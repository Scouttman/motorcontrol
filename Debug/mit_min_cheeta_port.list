
mit_min_cheeta_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fa0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800a180  0800a180  0001a180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5dc  0800a5dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5dc  0800a5dc  0001a5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5e4  0800a5e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5e4  0800a5e4  0001a5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5e8  0800a5e8  0001a5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a5ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001258  200001e0  0800a7cc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001438  0800a7cc  00021438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb99  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003872  00000000  00000000  0003eda9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  00042620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001780  00000000  00000000  00043f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000222a3  00000000  00000000  000456a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b984  00000000  00000000  0006794b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3f51  00000000  00000000  000832cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00167220  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007da8  00000000  00000000  00167274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0016f01c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0016f0e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a168 	.word	0x0800a168

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800a168 	.word	0x0800a168

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f006 fbc3 	bl	8007734 <memset>

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fb6:	4b30      	ldr	r3, [pc, #192]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fd8:	2204      	movs	r2, #4
 8000fda:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_ADC1_Init+0xe8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_ADC1_Init+0xe8>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_ADC1_Init+0xe8>)
 800100c:	2200      	movs	r2, #0
 800100e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_ADC1_Init+0xe8>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001018:	4817      	ldr	r0, [pc, #92]	; (8001078 <MX_ADC1_Init+0xe8>)
 800101a:	f001 fb3b 	bl	8002694 <HAL_ADC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001024:	f000 fdec 	bl	8001c00 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4811      	ldr	r0, [pc, #68]	; (8001078 <MX_ADC1_Init+0xe8>)
 8001034:	f002 f9ec 	bl	8003410 <HAL_ADCEx_MultiModeConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800103e:	f000 fddf 	bl	8001c00 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_ADC1_Init+0xec>)
 8001044:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001046:	2306      	movs	r3, #6
 8001048:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800104e:	237f      	movs	r3, #127	; 0x7f
 8001050:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001052:	2304      	movs	r3, #4
 8001054:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_ADC1_Init+0xe8>)
 8001060:	f001 fd5e 	bl	8002b20 <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800106a:	f000 fdc9 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3730      	adds	r7, #48	; 0x30
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000278 	.word	0x20000278
 800107c:	32601000 	.word	0x32601000

08001080 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */
  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001086:	463b      	mov	r3, r7
 8001088:	2220      	movs	r2, #32
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f006 fb51 	bl	8007734 <memset>

  /* USER CODE BEGIN ADC2_Init 1 */
  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001092:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <MX_ADC2_Init+0xc0>)
 8001094:	4a2b      	ldr	r2, [pc, #172]	; (8001144 <MX_ADC2_Init+0xc4>)
 8001096:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <MX_ADC2_Init+0xc0>)
 800109a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800109e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010a0:	4b27      	ldr	r3, [pc, #156]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010ba:	2204      	movs	r2, #4
 80010bc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010fa:	4811      	ldr	r0, [pc, #68]	; (8001140 <MX_ADC2_Init+0xc0>)
 80010fc:	f001 faca 	bl	8002694 <HAL_ADC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001106:	f000 fd7b 	bl	8001c00 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_ADC2_Init+0xc8>)
 800110c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2306      	movs	r3, #6
 8001110:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001116:	237f      	movs	r3, #127	; 0x7f
 8001118:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111a:	2304      	movs	r3, #4
 800111c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_ADC2_Init+0xc0>)
 8001128:	f001 fcfa 	bl	8002b20 <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001132:	f000 fd65 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  /* USER CODE END ADC2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000020c 	.word	0x2000020c
 8001144:	50000100 	.word	0x50000100
 8001148:	0c900008 	.word	0x0c900008

0800114c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	; 0x30
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800116c:	d146      	bne.n	80011fc <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800116e:	4b3f      	ldr	r3, [pc, #252]	; (800126c <HAL_ADC_MspInit+0x120>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a3d      	ldr	r2, [pc, #244]	; (800126c <HAL_ADC_MspInit+0x120>)
 8001176:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <HAL_ADC_MspInit+0x120>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d10b      	bne.n	8001198 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001180:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <HAL_ADC_MspInit+0x124>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	4a3a      	ldr	r2, [pc, #232]	; (8001270 <HAL_ADC_MspInit+0x124>)
 8001186:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800118a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118c:	4b38      	ldr	r3, [pc, #224]	; (8001270 <HAL_ADC_MspInit+0x124>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b35      	ldr	r3, [pc, #212]	; (8001270 <HAL_ADC_MspInit+0x124>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a34      	ldr	r2, [pc, #208]	; (8001270 <HAL_ADC_MspInit+0x124>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b32      	ldr	r3, [pc, #200]	; (8001270 <HAL_ADC_MspInit+0x124>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <HAL_ADC_MspInit+0x124>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <HAL_ADC_MspInit+0x124>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011bc:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <HAL_ADC_MspInit+0x124>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011c8:	2304      	movs	r3, #4
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011cc:	2303      	movs	r3, #3
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011de:	f002 fc4f 	bl	8003a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	481f      	ldr	r0, [pc, #124]	; (8001274 <HAL_ADC_MspInit+0x128>)
 80011f6:	f002 fc43 	bl	8003a80 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* USER CODE BEGIN ADC2_MspInit 1 */
  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80011fa:	e032      	b.n	8001262 <HAL_ADC_MspInit+0x116>
  else if(adcHandle->Instance==ADC2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <HAL_ADC_MspInit+0x12c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d12d      	bne.n	8001262 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_ADC_MspInit+0x120>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	4a17      	ldr	r2, [pc, #92]	; (800126c <HAL_ADC_MspInit+0x120>)
 800120e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_ADC_MspInit+0x120>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d10b      	bne.n	8001230 <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_ADC_MspInit+0x124>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <HAL_ADC_MspInit+0x124>)
 800121e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_ADC_MspInit+0x124>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_ADC_MspInit+0x124>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_ADC_MspInit+0x124>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_ADC_MspInit+0x124>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8001248:	2341      	movs	r3, #65	; 0x41
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124c:	2303      	movs	r3, #3
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f002 fc0f 	bl	8003a80 <HAL_GPIO_Init>
}
 8001262:	bf00      	nop
 8001264:	3730      	adds	r7, #48	; 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001fc 	.word	0x200001fc
 8001270:	40021000 	.word	0x40021000
 8001274:	48000400 	.word	0x48000400
 8001278:	50000100 	.word	0x50000100

0800127c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_FDCAN1_Init+0x84>)
 8001282:	4a20      	ldr	r2, [pc, #128]	; (8001304 <MX_FDCAN1_Init+0x88>)
 8001284:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_FDCAN1_Init+0x84>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_FDCAN1_Init+0x84>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_FDCAN1_Init+0x84>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_FDCAN1_Init+0x84>)
 800129a:	2200      	movs	r2, #0
 800129c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012b8:	2202      	movs	r2, #2
 80012ba:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012be:	2202      	movs	r2, #2
 80012c0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012dc:	2200      	movs	r2, #0
 80012de:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_FDCAN1_Init+0x84>)
 80012ee:	f002 fa17 	bl	8003720 <HAL_FDCAN_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80012f8:	f000 fc82 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200002e4 	.word	0x200002e4
 8001304:	40006400 	.word	0x40006400

08001308 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a17      	ldr	r2, [pc, #92]	; (8001384 <HAL_FDCAN_MspInit+0x7c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d128      	bne.n	800137c <HAL_FDCAN_MspInit+0x74>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_FDCAN_MspInit+0x80>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	4a16      	ldr	r2, [pc, #88]	; (8001388 <HAL_FDCAN_MspInit+0x80>)
 8001330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001334:	6593      	str	r3, [r2, #88]	; 0x58
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_FDCAN_MspInit+0x80>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_FDCAN_MspInit+0x80>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a10      	ldr	r2, [pc, #64]	; (8001388 <HAL_FDCAN_MspInit+0x80>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_FDCAN_MspInit+0x80>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800135a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800136c:	2309      	movs	r3, #9
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <HAL_FDCAN_MspInit+0x84>)
 8001378:	f002 fb82 	bl	8003a80 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800137c:	bf00      	nop
 800137e:	3728      	adds	r7, #40	; 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40006400 	.word	0x40006400
 8001388:	40021000 	.word	0x40021000
 800138c:	48000400 	.word	0x48000400

08001390 <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
	fw->base = FLASH_USER_START_ADDR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a0:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <flash_read_int>:
void flash_writer_close(FlashWriter * fw) {
    HAL_FLASH_Lock();
    fw->ready = false;
}

int flash_read_int(FlashWriter fw, uint32_t index) {
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	e883 0003 	stmia.w	r3, {r0, r1}
 80013c2:	607a      	str	r2, [r7, #4]
    return *(int*) (4 * index);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	681b      	ldr	r3, [r3, #0]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 80013d6:	b480      	push	{r7}
 80013d8:	b085      	sub	sp, #20
 80013da:	af00      	add	r7, sp, #0
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80013e4:	607a      	str	r2, [r7, #4]
    return *(float*) (4 * index);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	ee07 3a90 	vmov	s15, r3
}
 80013f0:	eeb0 0a67 	vmov.f32	s0, s15
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <init_controller_params>:
    controller->adc_a_offset = adc_a_offset/n;
    controller->adc_b_offset = adc_b_offset/n;

    }

void init_controller_params(ControllerStruct *controller){
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a42      	ldr	r2, [pc, #264]	; (8001514 <init_controller_params+0x114>)
 800140c:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a40      	ldr	r2, [pc, #256]	; (8001514 <init_controller_params+0x114>)
 8001412:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 8001414:	4b40      	ldr	r3, [pc, #256]	; (8001518 <init_controller_params+0x118>)
 8001416:	edd3 7a02 	vldr	s15, [r3, #8]
 800141a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800151c <init_controller_params+0x11c>
 800141e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 8001428:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <init_controller_params+0x118>)
 800142a:	edd3 7a02 	vldr	s15, [r3, #8]
 800142e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800151c <init_controller_params+0x11c>
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <init_controller_params+0x118>)
 800143e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001442:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001520 <init_controller_params+0x120>
 8001446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800144a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001524 <init_controller_params+0x124>
 800144e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001456:	ee37 7a67 	vsub.f32	s14, s14, s15
 800145a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800145e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001462:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001466:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8001476:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001528 <init_controller_params+0x128>
 800147a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    controller->phase_order = PHASE_ORDER;
 8001484:	4b29      	ldr	r3, [pc, #164]	; (800152c <init_controller_params+0x12c>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	e036      	b.n	8001502 <init_controller_params+0x102>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001530 <init_controller_params+0x130>
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001534 <init_controller_params+0x134>
 80014aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014ae:	ee16 0a90 	vmov	r0, s13
 80014b2:	f7ff f871 	bl	8000598 <__aeabi_f2d>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	ec43 2b10 	vmov	d0, r2, r3
 80014be:	f005 ff2b 	bl	8007318 <exp>
 80014c2:	ec51 0b10 	vmov	r0, r1, d0
 80014c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <init_controller_params+0x138>)
 80014cc:	f7ff f8bc 	bl	8000648 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <init_controller_params+0x13c>)
 80014de:	f7fe fefd 	bl	80002dc <__adddf3>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb85 	bl	8000bf8 <__aeabi_d2f>
 80014ee:	4601      	mov	r1, r0
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	333c      	adds	r3, #60	; 0x3c
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3301      	adds	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b7f      	cmp	r3, #127	; 0x7f
 8001506:	ddc5      	ble.n	8001494 <init_controller_params+0x94>
    }

    }
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	3d3851ec 	.word	0x3d3851ec
 8001518:	20000648 	.word	0x20000648
 800151c:	38d1b717 	.word	0x38d1b717
 8001520:	37d1b717 	.word	0x37d1b717
 8001524:	40c90fdb 	.word	0x40c90fdb
 8001528:	3dcccccd 	.word	0x3dcccccd
 800152c:	20000f1c 	.word	0x20000f1c
 8001530:	bc000000 	.word	0xbc000000
 8001534:	3d03126f 	.word	0x3d03126f
 8001538:	3ff33333 	.word	0x3ff33333
 800153c:	3ff00000 	.word	0x3ff00000

08001540 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_GPIO_Init+0x8c>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <MX_GPIO_Init+0x8c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_GPIO_Init+0x8c>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_GPIO_Init+0x8c>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a16      	ldr	r2, [pc, #88]	; (80015cc <MX_GPIO_Init+0x8c>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_GPIO_Init+0x8c>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_GPIO_Init+0x8c>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4a10      	ldr	r2, [pc, #64]	; (80015cc <MX_GPIO_Init+0x8c>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_GPIO_Init+0x8c>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2140      	movs	r1, #64	; 0x40
 80015a2:	480b      	ldr	r0, [pc, #44]	; (80015d0 <MX_GPIO_Init+0x90>)
 80015a4:	f002 fbee 	bl	8003d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80015a8:	2340      	movs	r3, #64	; 0x40
 80015aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4619      	mov	r1, r3
 80015be:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_GPIO_Init+0x90>)
 80015c0:	f002 fa5e 	bl	8003a80 <HAL_GPIO_Init>

}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000
 80015d0:	48000800 	.word	0x48000800

080015d4 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 80015da:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <MX_I2C1_SMBUS_Init+0x7c>)
 80015dc:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00303D5B;
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 80015e0:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <MX_I2C1_SMBUS_Init+0x80>)
 80015e2:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 80015ec:	2202      	movs	r2, #2
 80015ee:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 800161c:	2200      	movs	r2, #0
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000080C3;
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 8001622:	f248 02c3 	movw	r2, #32963	; 0x80c3
 8001626:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8001628:	4808      	ldr	r0, [pc, #32]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 800162a:	f003 fb9b 	bl	8004d64 <HAL_SMBUS_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001634:	f000 fae4 	bl	8001c00 <Error_Handler>
  }
  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_I2C1_SMBUS_Init+0x78>)
 800163a:	f003 fc4b 	bl	8004ed4 <HAL_SMBUS_EnableAlert_IT>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_I2C1_SMBUS_Init+0x74>
  {
    Error_Handler();
 8001644:	f000 fadc 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000348 	.word	0x20000348
 8001650:	40005400 	.word	0x40005400
 8001654:	00303d5b 	.word	0x00303d5b

08001658 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(smbusHandle->Instance==I2C1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a26      	ldr	r2, [pc, #152]	; (8001710 <HAL_SMBUS_MspInit+0xb8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d145      	bne.n	8001706 <HAL_SMBUS_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_SMBUS_MspInit+0xbc>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a25      	ldr	r2, [pc, #148]	; (8001714 <HAL_SMBUS_MspInit+0xbc>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_SMBUS_MspInit+0xbc>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_SMBUS_MspInit+0xbc>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <HAL_SMBUS_MspInit+0xbc>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_SMBUS_MspInit+0xbc>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA13     ------> I2C1_SCL
    PB5     ------> I2C1_SMBA
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b0:	2312      	movs	r3, #18
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016bc:	2304      	movs	r3, #4
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ca:	f002 f9d9 	bl	8003a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016ce:	23a0      	movs	r3, #160	; 0xa0
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d2:	2312      	movs	r3, #18
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016de:	2304      	movs	r3, #4
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	480b      	ldr	r0, [pc, #44]	; (8001718 <HAL_SMBUS_MspInit+0xc0>)
 80016ea:	f002 f9c9 	bl	8003a80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_SMBUS_MspInit+0xbc>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_SMBUS_MspInit+0xbc>)
 80016f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_SMBUS_MspInit+0xbc>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40005400 	.word	0x40005400
 8001714:	40021000 	.word	0x40021000
 8001718:	48000400 	.word	0x48000400

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001774:	f000 fcef 	bl	8002156 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001778:	f000 f9e4 	bl	8001b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800177c:	f7ff fee0 	bl	8001540 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001780:	f000 faf2 	bl	8001d68 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001784:	f000 fc1c 	bl	8001fc0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001788:	f7ff fc02 	bl	8000f90 <MX_ADC1_Init>
  MX_ADC2_Init();
 800178c:	f7ff fc78 	bl	8001080 <MX_ADC2_Init>
  MX_I2C1_SMBUS_Init();
 8001790:	f7ff ff20 	bl	80015d4 <MX_I2C1_SMBUS_Init>
  MX_FDCAN1_Init();
 8001794:	f7ff fd72 	bl	800127c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 8001798:	2106      	movs	r1, #6
 800179a:	48b9      	ldr	r0, [pc, #740]	; (8001a80 <main+0x310>)
 800179c:	f000 fa37 	bl	8001c0e <preference_writer_init>
  preference_writer_load(prefs);
 80017a0:	4bb7      	ldr	r3, [pc, #732]	; (8001a80 <main+0x310>)
 80017a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a4:	f000 fa44 	bl	8001c30 <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 80017a8:	4bb6      	ldr	r3, [pc, #728]	; (8001a84 <main+0x314>)
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017b0:	d102      	bne.n	80017b8 <main+0x48>
 80017b2:	4bb4      	ldr	r3, [pc, #720]	; (8001a84 <main+0x314>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 80017b8:	4bb2      	ldr	r3, [pc, #712]	; (8001a84 <main+0x314>)
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017c0:	d102      	bne.n	80017c8 <main+0x58>
 80017c2:	4bb0      	ldr	r3, [pc, #704]	; (8001a84 <main+0x314>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 80017c8:	4baf      	ldr	r3, [pc, #700]	; (8001a88 <main+0x318>)
 80017ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80017ce:	eef4 7a67 	vcmp.f32	s15, s15
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	d609      	bvs.n	80017ec <main+0x7c>
 80017d8:	4bab      	ldr	r3, [pc, #684]	; (8001a88 <main+0x318>)
 80017da:	edd3 7a02 	vldr	s15, [r3, #8]
 80017de:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80017e2:	eef4 7a47 	vcmp.f32	s15, s14
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	d102      	bne.n	80017f2 <main+0x82>
 80017ec:	4ba6      	ldr	r3, [pc, #664]	; (8001a88 <main+0x318>)
 80017ee:	4aa7      	ldr	r2, [pc, #668]	; (8001a8c <main+0x31c>)
 80017f0:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 80017f2:	4ba5      	ldr	r3, [pc, #660]	; (8001a88 <main+0x318>)
 80017f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80017f8:	eef4 7a67 	vcmp.f32	s15, s15
 80017fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001800:	d609      	bvs.n	8001816 <main+0xa6>
 8001802:	4ba1      	ldr	r3, [pc, #644]	; (8001a88 <main+0x318>)
 8001804:	edd3 7a03 	vldr	s15, [r3, #12]
 8001808:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800180c:	eef4 7a47 	vcmp.f32	s15, s14
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	d102      	bne.n	800181c <main+0xac>
 8001816:	4b9c      	ldr	r3, [pc, #624]	; (8001a88 <main+0x318>)
 8001818:	4a9d      	ldr	r2, [pc, #628]	; (8001a90 <main+0x320>)
 800181a:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 800181c:	4b9a      	ldr	r3, [pc, #616]	; (8001a88 <main+0x318>)
 800181e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001822:	eef4 7a67 	vcmp.f32	s15, s15
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	d609      	bvs.n	8001840 <main+0xd0>
 800182c:	4b96      	ldr	r3, [pc, #600]	; (8001a88 <main+0x318>)
 800182e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001832:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001836:	eef4 7a47 	vcmp.f32	s15, s14
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	d103      	bne.n	8001848 <main+0xd8>
 8001840:	4b91      	ldr	r3, [pc, #580]	; (8001a88 <main+0x318>)
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8001848:	4b8e      	ldr	r3, [pc, #568]	; (8001a84 <main+0x314>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001850:	d102      	bne.n	8001858 <main+0xe8>
 8001852:	4b8c      	ldr	r3, [pc, #560]	; (8001a84 <main+0x314>)
 8001854:	2201      	movs	r2, #1
 8001856:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8001858:	4b8a      	ldr	r3, [pc, #552]	; (8001a84 <main+0x314>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001860:	d102      	bne.n	8001868 <main+0xf8>
 8001862:	4b88      	ldr	r3, [pc, #544]	; (8001a84 <main+0x314>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8001868:	4b86      	ldr	r3, [pc, #536]	; (8001a84 <main+0x314>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001870:	d103      	bne.n	800187a <main+0x10a>
 8001872:	4b84      	ldr	r3, [pc, #528]	; (8001a84 <main+0x314>)
 8001874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001878:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 800187a:	4b83      	ldr	r3, [pc, #524]	; (8001a88 <main+0x318>)
 800187c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001880:	eef4 7a67 	vcmp.f32	s15, s15
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	d609      	bvs.n	800189e <main+0x12e>
 800188a:	4b7f      	ldr	r3, [pc, #508]	; (8001a88 <main+0x318>)
 800188c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001890:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001894:	eef4 7a47 	vcmp.f32	s15, s14
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	d103      	bne.n	80018a6 <main+0x136>
 800189e:	4b7a      	ldr	r3, [pc, #488]	; (8001a88 <main+0x318>)
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 80018a6:	4b78      	ldr	r3, [pc, #480]	; (8001a88 <main+0x318>)
 80018a8:	edd3 7a08 	vldr	s15, [r3, #32]
 80018ac:	eef4 7a67 	vcmp.f32	s15, s15
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	d609      	bvs.n	80018ca <main+0x15a>
 80018b6:	4b74      	ldr	r3, [pc, #464]	; (8001a88 <main+0x318>)
 80018b8:	edd3 7a08 	vldr	s15, [r3, #32]
 80018bc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80018c0:	eef4 7a47 	vcmp.f32	s15, s14
 80018c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c8:	d102      	bne.n	80018d0 <main+0x160>
 80018ca:	4b6f      	ldr	r3, [pc, #444]	; (8001a88 <main+0x318>)
 80018cc:	4a71      	ldr	r2, [pc, #452]	; (8001a94 <main+0x324>)
 80018ce:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 80018d0:	4b6d      	ldr	r3, [pc, #436]	; (8001a88 <main+0x318>)
 80018d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80018d6:	eef4 7a67 	vcmp.f32	s15, s15
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	d609      	bvs.n	80018f4 <main+0x184>
 80018e0:	4b69      	ldr	r3, [pc, #420]	; (8001a88 <main+0x318>)
 80018e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80018e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80018ea:	eef4 7a47 	vcmp.f32	s15, s14
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	d102      	bne.n	80018fa <main+0x18a>
 80018f4:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <main+0x318>)
 80018f6:	4a68      	ldr	r2, [pc, #416]	; (8001a98 <main+0x328>)
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 80018fa:	4b63      	ldr	r3, [pc, #396]	; (8001a88 <main+0x318>)
 80018fc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001900:	eef4 7a67 	vcmp.f32	s15, s15
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	d609      	bvs.n	800191e <main+0x1ae>
 800190a:	4b5f      	ldr	r3, [pc, #380]	; (8001a88 <main+0x318>)
 800190c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001910:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001914:	eef4 7a47 	vcmp.f32	s15, s14
 8001918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191c:	d102      	bne.n	8001924 <main+0x1b4>
 800191e:	4b5a      	ldr	r3, [pc, #360]	; (8001a88 <main+0x318>)
 8001920:	4a5e      	ldr	r2, [pc, #376]	; (8001a9c <main+0x32c>)
 8001922:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8001924:	4b58      	ldr	r3, [pc, #352]	; (8001a88 <main+0x318>)
 8001926:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800192a:	eef4 7a67 	vcmp.f32	s15, s15
 800192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001932:	d609      	bvs.n	8001948 <main+0x1d8>
 8001934:	4b54      	ldr	r3, [pc, #336]	; (8001a88 <main+0x318>)
 8001936:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800193a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800193e:	eef4 7a47 	vcmp.f32	s15, s14
 8001942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001946:	d102      	bne.n	800194e <main+0x1de>
 8001948:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <main+0x318>)
 800194a:	4a55      	ldr	r2, [pc, #340]	; (8001aa0 <main+0x330>)
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 800194e:	4b4e      	ldr	r3, [pc, #312]	; (8001a88 <main+0x318>)
 8001950:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001954:	eef4 7a67 	vcmp.f32	s15, s15
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	d609      	bvs.n	8001972 <main+0x202>
 800195e:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <main+0x318>)
 8001960:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001964:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001968:	eef4 7a47 	vcmp.f32	s15, s14
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	d103      	bne.n	800197a <main+0x20a>
 8001972:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <main+0x318>)
 8001974:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001978:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 800197a:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <main+0x318>)
 800197c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001980:	eef4 7a67 	vcmp.f32	s15, s15
 8001984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001988:	d609      	bvs.n	800199e <main+0x22e>
 800198a:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <main+0x318>)
 800198c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001990:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001994:	eef4 7a47 	vcmp.f32	s15, s14
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	d103      	bne.n	80019a6 <main+0x236>
 800199e:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <main+0x318>)
 80019a0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 80019a6:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <main+0x318>)
 80019a8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80019ac:	eef4 7a67 	vcmp.f32	s15, s15
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	d609      	bvs.n	80019ca <main+0x25a>
 80019b6:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <main+0x318>)
 80019b8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80019bc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80019c0:	eef4 7a47 	vcmp.f32	s15, s14
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	d102      	bne.n	80019d0 <main+0x260>
 80019ca:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <main+0x318>)
 80019cc:	4a35      	ldr	r2, [pc, #212]	; (8001aa4 <main+0x334>)
 80019ce:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 80019d0:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <main+0x318>)
 80019d2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80019d6:	eef4 7a67 	vcmp.f32	s15, s15
 80019da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019de:	d609      	bvs.n	80019f4 <main+0x284>
 80019e0:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <main+0x318>)
 80019e2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80019e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80019ea:	eef4 7a47 	vcmp.f32	s15, s14
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	d102      	bne.n	80019fa <main+0x28a>
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <main+0x318>)
 80019f6:	4a29      	ldr	r2, [pc, #164]	; (8001a9c <main+0x32c>)
 80019f8:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <main+0x318>)
 80019fc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001a00:	eef4 7a67 	vcmp.f32	s15, s15
 8001a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a08:	d702      	bvc.n	8001a10 <main+0x2a0>
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <main+0x318>)
 8001a0c:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <main+0x338>)
 8001a0e:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <main+0x318>)
 8001a12:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001a16:	eef4 7a67 	vcmp.f32	s15, s15
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	d702      	bvc.n	8001a26 <main+0x2b6>
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <main+0x318>)
 8001a22:	4a22      	ldr	r2, [pc, #136]	; (8001aac <main+0x33c>)
 8001a24:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <main+0x318>)
 8001a28:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001a2c:	eef4 7a67 	vcmp.f32	s15, s15
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	d702      	bvc.n	8001a3c <main+0x2cc>
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <main+0x318>)
 8001a38:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <main+0x340>)
 8001a3a:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <main+0x318>)
 8001a3e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001a42:	eef4 7a67 	vcmp.f32	s15, s15
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	d702      	bvc.n	8001a52 <main+0x2e2>
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <main+0x318>)
 8001a4e:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <main+0x344>)
 8001a50:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else{

  }

  init_controller_params(&controller);
 8001a52:	4819      	ldr	r0, [pc, #100]	; (8001ab8 <main+0x348>)
 8001a54:	f7ff fcd4 	bl	8001400 <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 8001a58:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4817      	ldr	r0, [pc, #92]	; (8001abc <main+0x34c>)
 8001a60:	f005 fe68 	bl	8007734 <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <main+0x314>)
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <main+0x350>)
 8001a6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  comm_encoder.e_zero = E_ZERO;
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <main+0x314>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <main+0x350>)
 8001a74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  comm_encoder.ppairs = PPAIRS;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <main+0x318>)
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	e022      	b.n	8001ac4 <main+0x354>
 8001a7e:	bf00      	nop
 8001a80:	20000638 	.word	0x20000638
 8001a84:	20000f1c 	.word	0x20000f1c
 8001a88:	20000648 	.word	0x20000648
 8001a8c:	447a0000 	.word	0x447a0000
 8001a90:	42200000 	.word	0x42200000
 8001a94:	42fa0000 	.word	0x42fa0000
 8001a98:	41600000 	.word	0x41600000
 8001a9c:	40a00000 	.word	0x40a00000
 8001aa0:	41a80000 	.word	0x41a80000
 8001aa4:	43fa0000 	.word	0x43fa0000
 8001aa8:	41480000 	.word	0x41480000
 8001aac:	c1480000 	.word	0xc1480000
 8001ab0:	42820000 	.word	0x42820000
 8001ab4:	c2820000 	.word	0xc2820000
 8001ab8:	20000748 	.word	0x20000748
 8001abc:	20000c90 	.word	0x20000c90
 8001ac0:	20000398 	.word	0x20000398
 8001ac4:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <main+0x3b8>)
 8001ac6:	6653      	str	r3, [r2, #100]	; 0x64
//  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
//  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8001ac8:	4818      	ldr	r0, [pc, #96]	; (8001b2c <main+0x3bc>)
 8001aca:	f000 ff6d 	bl	80029a8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8001ace:	4818      	ldr	r0, [pc, #96]	; (8001b30 <main+0x3c0>)
 8001ad0:	f000 ff6a 	bl	80029a8 <HAL_ADC_Start>
//  HAL_Delay(1);
  //drv_enable_gd(drv);   */
//  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4817      	ldr	r0, [pc, #92]	; (8001b34 <main+0x3c4>)
 8001ad8:	f003 fb72 	bl	80051c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001adc:	2104      	movs	r1, #4
 8001ade:	4815      	ldr	r0, [pc, #84]	; (8001b34 <main+0x3c4>)
 8001ae0:	f003 fb6e 	bl	80051c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ae4:	2108      	movs	r1, #8
 8001ae6:	4813      	ldr	r0, [pc, #76]	; (8001b34 <main+0x3c4>)
 8001ae8:	f003 fb6a 	bl	80051c0 <HAL_TIM_PWM_Start>
  // can_tx_init(&can_tx);
  // HAL_CAN_Start(&CAN_H); //start CAN
  // __HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  NVIC_SetPriority(PWM_ISR, 1); // commutation > communication
 8001aec:	2101      	movs	r1, #1
 8001aee:	2019      	movs	r0, #25
 8001af0:	f7ff fe14 	bl	800171c <__NVIC_SetPriority>
  NVIC_SetPriority(CAN_ISR, 3);
 8001af4:	2103      	movs	r1, #3
 8001af6:	2015      	movs	r0, #21
 8001af8:	f7ff fe10 	bl	800171c <__NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <main+0x3c8>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <main+0x3c8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <main+0x3c8>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	490a      	ldr	r1, [pc, #40]	; (8001b3c <main+0x3cc>)
 8001b12:	480b      	ldr	r0, [pc, #44]	; (8001b40 <main+0x3d0>)
 8001b14:	f004 faf8 	bl	8006108 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8001b18:	4806      	ldr	r0, [pc, #24]	; (8001b34 <main+0x3c4>)
 8001b1a:	f003 fa2f 	bl	8004f7c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 8001b1e:	2064      	movs	r0, #100	; 0x64
 8001b20:	f000 fb8a 	bl	8002238 <HAL_Delay>
 8001b24:	e7fb      	b.n	8001b1e <main+0x3ae>
 8001b26:	bf00      	nop
 8001b28:	20000398 	.word	0x20000398
 8001b2c:	20000278 	.word	0x20000278
 8001b30:	2000020c 	.word	0x2000020c
 8001b34:	20001348 	.word	0x20001348
 8001b38:	20000628 	.word	0x20000628
 8001b3c:	20000624 	.word	0x20000624
 8001b40:	20001394 	.word	0x20001394

08001b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0a4      	sub	sp, #144	; 0x90
 8001b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b4e:	2238      	movs	r2, #56	; 0x38
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f005 fdee 	bl	8007734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2244      	movs	r2, #68	; 0x44
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f005 fde0 	bl	8007734 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b74:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b78:	f002 f91c 	bl	8003db4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b84:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b86:	2340      	movs	r3, #64	; 0x40
 8001b88:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 f9c2 	bl	8003f1c <HAL_RCC_OscConfig>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001b9e:	f000 f82f 	bl	8001c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba2:	230f      	movs	r3, #15
 8001ba4:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001baa:	2300      	movs	r3, #0
 8001bac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fcc5 	bl	800454c <HAL_RCC_ClockConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001bc8:	f000 f81a 	bl	8001c00 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001bcc:	f249 0342 	movw	r3, #36930	; 0x9042
 8001bd0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001be0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be6:	463b      	mov	r3, r7
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 fecb 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001bf4:	f000 f804 	bl	8001c00 <Error_Handler>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3790      	adds	r7, #144	; 0x90
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6839      	ldr	r1, [r7, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fbb7 	bl	8001390 <flash_writer_init>
	pr->sector = sector;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	609a      	str	r2, [r3, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <preference_writer_load>:
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
    }
    pr->ready = false;
}

void preference_writer_load(PreferenceWriter pr) {
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	463c      	mov	r4, r7
 8001c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e00e      	b.n	8001c60 <preference_writer_load+0x30>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	461a      	mov	r2, r3
 8001c46:	463b      	mov	r3, r7
 8001c48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c4c:	f7ff fbb2 	bl	80013b4 <flash_read_int>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4913      	ldr	r1, [pc, #76]	; (8001ca0 <preference_writer_load+0x70>)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2bff      	cmp	r3, #255	; 0xff
 8001c64:	dded      	ble.n	8001c42 <preference_writer_load+0x12>
    }
    for(; offs < 320; offs++) {
 8001c66:	e012      	b.n	8001c8e <preference_writer_load+0x5e>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 8001c70:	463b      	mov	r3, r7
 8001c72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c76:	f7ff fbae 	bl	80013d6 <flash_read_float>
 8001c7a:	eef0 7a40 	vmov.f32	s15, s0
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <preference_writer_load+0x74>)
 8001c80:	00a3      	lsls	r3, r4, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c94:	dbe8      	blt.n	8001c68 <preference_writer_load+0x38>
    }
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd90      	pop	{r4, r7, pc}
 8001ca0:	20000f1c 	.word	0x20000f1c
 8001ca4:	20000648 	.word	0x20000648

08001ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_MspInit+0x44>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <HAL_MspInit+0x44>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_MspInit+0x44>)
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_MspInit+0x44>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <HAL_MspInit+0x44>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_MspInit+0x44>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cde:	f002 f90d 	bl	8003efc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <NMI_Handler+0x4>

08001cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <HardFault_Handler+0x4>

08001cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <MemManage_Handler+0x4>

08001d02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <BusFault_Handler+0x4>

08001d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <UsageFault_Handler+0x4>

08001d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d3c:	f000 fa5e 	bl	80021fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <SystemInit+0x20>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <SystemInit+0x20>)
 8001d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b098      	sub	sp, #96	; 0x60
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2234      	movs	r2, #52	; 0x34
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f005 fccd 	bl	8007734 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001d9c:	4a4c      	ldr	r2, [pc, #304]	; (8001ed0 <MX_TIM1_Init+0x168>)
 8001d9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001da0:	4b4a      	ldr	r3, [pc, #296]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da6:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dac:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db4:	4b45      	ldr	r3, [pc, #276]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dba:	4b44      	ldr	r3, [pc, #272]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc0:	4b42      	ldr	r3, [pc, #264]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dc6:	4841      	ldr	r0, [pc, #260]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001dc8:	f003 f9a3 	bl	8005112 <HAL_TIM_PWM_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001dd2:	f7ff ff15 	bl	8001c00 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001dd6:	483d      	ldr	r0, [pc, #244]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001dd8:	f003 f93a 	bl	8005050 <HAL_TIM_OC_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001de2:	f7ff ff0d 	bl	8001c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001df2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001df6:	4619      	mov	r1, r3
 8001df8:	4834      	ldr	r0, [pc, #208]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001dfa:	f004 f813 	bl	8005e24 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8001e04:	f7ff fefc 	bl	8001c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e08:	2360      	movs	r3, #96	; 0x60
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e10:	2300      	movs	r3, #0
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e14:	2300      	movs	r3, #0
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4827      	ldr	r0, [pc, #156]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001e2e:	f003 fb3d 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001e38:	f7ff fee2 	bl	8001c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e40:	2204      	movs	r2, #4
 8001e42:	4619      	mov	r1, r3
 8001e44:	4821      	ldr	r0, [pc, #132]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001e46:	f003 fb31 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001e50:	f7ff fed6 	bl	8001c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e54:	2300      	movs	r3, #0
 8001e56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	4619      	mov	r1, r3
 8001e60:	481a      	ldr	r0, [pc, #104]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001e62:	f003 faad 	bl	80053c0 <HAL_TIM_OC_ConfigChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001e6c:	f7ff fec8 	bl	8001c00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4807      	ldr	r0, [pc, #28]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001eae:	f004 f83b 	bl	8005f28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8001eb8:	f7ff fea2 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ebc:	4803      	ldr	r0, [pc, #12]	; (8001ecc <MX_TIM1_Init+0x164>)
 8001ebe:	f000 f829 	bl	8001f14 <HAL_TIM_MspPostInit>

}
 8001ec2:	bf00      	nop
 8001ec4:	3760      	adds	r7, #96	; 0x60
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20001348 	.word	0x20001348
 8001ed0:	40012c00 	.word	0x40012c00

08001ed4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_TIM_PWM_MspInit+0x38>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10b      	bne.n	8001efe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eea:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001eec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ef0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40012c00 	.word	0x40012c00
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a20      	ldr	r2, [pc, #128]	; (8001fb4 <HAL_TIM_MspPostInit+0xa0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d13a      	bne.n	8001fac <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_TIM_MspPostInit+0xa4>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_TIM_MspPostInit+0xa4>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_TIM_MspPostInit+0xa4>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_TIM_MspPostInit+0xa4>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_TIM_MspPostInit+0xa4>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <HAL_TIM_MspPostInit+0xa4>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	4619      	mov	r1, r3
 8001f82:	480e      	ldr	r0, [pc, #56]	; (8001fbc <HAL_TIM_MspPostInit+0xa8>)
 8001f84:	f001 fd7c 	bl	8003a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001f88:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f8c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f9a:	2306      	movs	r3, #6
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa8:	f001 fd6a 	bl	8003a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40012c00 	.word	0x40012c00
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	48000400 	.word	0x48000400

08001fc0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <MX_USART2_UART_Init+0x90>)
 8001fc6:	4a23      	ldr	r2, [pc, #140]	; (8002054 <MX_USART2_UART_Init+0x94>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fca:	4b21      	ldr	r3, [pc, #132]	; (8002050 <MX_USART2_UART_Init+0x90>)
 8001fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <MX_USART2_UART_Init+0x90>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <MX_USART2_UART_Init+0x90>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <MX_USART2_UART_Init+0x90>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <MX_USART2_UART_Init+0x90>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b19      	ldr	r3, [pc, #100]	; (8002050 <MX_USART2_UART_Init+0x90>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <MX_USART2_UART_Init+0x90>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <MX_USART2_UART_Init+0x90>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <MX_USART2_UART_Init+0x90>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <MX_USART2_UART_Init+0x90>)
 8002004:	2200      	movs	r2, #0
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002008:	4811      	ldr	r0, [pc, #68]	; (8002050 <MX_USART2_UART_Init+0x90>)
 800200a:	f004 f82d 	bl	8006068 <HAL_UART_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002014:	f7ff fdf4 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002018:	2100      	movs	r1, #0
 800201a:	480d      	ldr	r0, [pc, #52]	; (8002050 <MX_USART2_UART_Init+0x90>)
 800201c:	f005 f8af 	bl	800717e <HAL_UARTEx_SetTxFifoThreshold>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002026:	f7ff fdeb 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800202a:	2100      	movs	r1, #0
 800202c:	4808      	ldr	r0, [pc, #32]	; (8002050 <MX_USART2_UART_Init+0x90>)
 800202e:	f005 f8e4 	bl	80071fa <HAL_UARTEx_SetRxFifoThreshold>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002038:	f7ff fde2 	bl	8001c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800203c:	4804      	ldr	r0, [pc, #16]	; (8002050 <MX_USART2_UART_Init+0x90>)
 800203e:	f005 f865 	bl	800710c <HAL_UARTEx_DisableFifoMode>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002048:	f7ff fdda 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20001394 	.word	0x20001394
 8002054:	40004400 	.word	0x40004400

08002058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <HAL_UART_MspInit+0x7c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d127      	bne.n	80020ca <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_UART_MspInit+0x80>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_UART_MspInit+0x80>)
 8002080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002084:	6593      	str	r3, [r2, #88]	; 0x58
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_UART_MspInit+0x80>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_UART_MspInit+0x80>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_UART_MspInit+0x80>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_UART_MspInit+0x80>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80020aa:	2318      	movs	r3, #24
 80020ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020ba:	2307      	movs	r3, #7
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020be:	f107 0314 	add.w	r3, r7, #20
 80020c2:	4619      	mov	r1, r3
 80020c4:	4805      	ldr	r0, [pc, #20]	; (80020dc <HAL_UART_MspInit+0x84>)
 80020c6:	f001 fcdb 	bl	8003a80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020ca:	bf00      	nop
 80020cc:	3728      	adds	r7, #40	; 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40004400 	.word	0x40004400
 80020d8:	40021000 	.word	0x40021000
 80020dc:	48000400 	.word	0x48000400

080020e0 <HAL_UART_RxCpltCallback>:
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80020e8:	2201      	movs	r2, #1
 80020ea:	4904      	ldr	r1, [pc, #16]	; (80020fc <HAL_UART_RxCpltCallback+0x1c>)
 80020ec:	4804      	ldr	r0, [pc, #16]	; (8002100 <HAL_UART_RxCpltCallback+0x20>)
 80020ee:	f004 f80b 	bl	8006108 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000624 	.word	0x20000624
 8002100:	20001394 	.word	0x20001394

08002104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002104:	480d      	ldr	r0, [pc, #52]	; (800213c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002106:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <LoopForever+0x6>)
  ldr r1, =_edata
 800210a:	490e      	ldr	r1, [pc, #56]	; (8002144 <LoopForever+0xa>)
  ldr r2, =_sidata
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <LoopForever+0xe>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002110:	e002      	b.n	8002118 <LoopCopyDataInit>

08002112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002116:	3304      	adds	r3, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800211c:	d3f9      	bcc.n	8002112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211e:	4a0b      	ldr	r2, [pc, #44]	; (800214c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002120:	4c0b      	ldr	r4, [pc, #44]	; (8002150 <LoopForever+0x16>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002124:	e001      	b.n	800212a <LoopFillZerobss>

08002126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002128:	3204      	adds	r2, #4

0800212a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800212c:	d3fb      	bcc.n	8002126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800212e:	f7ff fe09 	bl	8001d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002132:	f005 facd 	bl	80076d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002136:	f7ff fb1b 	bl	8001770 <main>

0800213a <LoopForever>:

LoopForever:
    b LoopForever
 800213a:	e7fe      	b.n	800213a <LoopForever>
  ldr   r0, =_estack
 800213c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002148:	0800a5ec 	.word	0x0800a5ec
  ldr r2, =_sbss
 800214c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002150:	20001438 	.word	0x20001438

08002154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC1_2_IRQHandler>

08002156 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002160:	2003      	movs	r0, #3
 8002162:	f001 faab 	bl	80036bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002166:	2000      	movs	r0, #0
 8002168:	f000 f80e 	bl	8002188 <HAL_InitTick>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	71fb      	strb	r3, [r7, #7]
 8002176:	e001      	b.n	800217c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002178:	f7ff fd96 	bl	8001ca8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800217c:	79fb      	ldrb	r3, [r7, #7]

}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_InitTick+0x68>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d022      	beq.n	80021e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_InitTick+0x6c>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_InitTick+0x68>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 faa8 	bl	8003706 <HAL_SYSTICK_Config>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10f      	bne.n	80021dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b0f      	cmp	r3, #15
 80021c0:	d809      	bhi.n	80021d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c2:	2200      	movs	r2, #0
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ca:	f001 fa82 	bl	80036d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <HAL_InitTick+0x70>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	e007      	b.n	80021e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	e004      	b.n	80021e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e001      	b.n	80021e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000008 	.word	0x20000008
 80021f4:	20000000 	.word	0x20000000
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_IncTick+0x1c>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_IncTick+0x20>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4413      	add	r3, r2
 800220a:	4a03      	ldr	r2, [pc, #12]	; (8002218 <HAL_IncTick+0x1c>)
 800220c:	6013      	str	r3, [r2, #0]
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	20001424 	.word	0x20001424
 800221c:	20000008 	.word	0x20000008

08002220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20001424 	.word	0x20001424

08002238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff ffee 	bl	8002220 <HAL_GetTick>
 8002244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002250:	d004      	beq.n	800225c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_Delay+0x40>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4413      	add	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800225c:	bf00      	nop
 800225e:	f7ff ffdf 	bl	8002220 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	429a      	cmp	r2, r3
 800226c:	d8f7      	bhi.n	800225e <HAL_Delay+0x26>
  {
  }
}
 800226e:	bf00      	nop
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000008 	.word	0x20000008

0800227c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	609a      	str	r2, [r3, #8]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	609a      	str	r2, [r3, #8]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3360      	adds	r3, #96	; 0x60
 80022f6:	461a      	mov	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <LL_ADC_SetOffset+0x44>)
 8002306:	4013      	ands	r3, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	4313      	orrs	r3, r2
 8002314:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800231c:	bf00      	nop
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	03fff000 	.word	0x03fff000

0800232c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3360      	adds	r3, #96	; 0x60
 800233a:	461a      	mov	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3360      	adds	r3, #96	; 0x60
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	431a      	orrs	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002382:	bf00      	nop
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800238e:	b480      	push	{r7}
 8002390:	b087      	sub	sp, #28
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3360      	adds	r3, #96	; 0x60
 800239e:	461a      	mov	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023b8:	bf00      	nop
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3360      	adds	r3, #96	; 0x60
 80023d4:	461a      	mov	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	431a      	orrs	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80023ee:	bf00      	nop
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	615a      	str	r2, [r3, #20]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3330      	adds	r3, #48	; 0x30
 8002430:	461a      	mov	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	4413      	add	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	211f      	movs	r1, #31
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	401a      	ands	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	0e9b      	lsrs	r3, r3, #26
 8002458:	f003 011f 	and.w	r1, r3, #31
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	431a      	orrs	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800246c:	bf00      	nop
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3314      	adds	r3, #20
 8002488:	461a      	mov	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	0e5b      	lsrs	r3, r3, #25
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	4413      	add	r3, r2
 8002496:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	0d1b      	lsrs	r3, r3, #20
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	2107      	movs	r1, #7
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	401a      	ands	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	0d1b      	lsrs	r3, r3, #20
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	431a      	orrs	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	43db      	mvns	r3, r3
 80024ea:	401a      	ands	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0318 	and.w	r3, r3, #24
 80024f2:	4908      	ldr	r1, [pc, #32]	; (8002514 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024f4:	40d9      	lsrs	r1, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	400b      	ands	r3, r1
 80024fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fe:	431a      	orrs	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	0007ffff 	.word	0x0007ffff

08002518 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 031f 	and.w	r3, r3, #31
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002544:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6093      	str	r3, [r2, #8]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800256c:	d101      	bne.n	8002572 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002590:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002594:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025bc:	d101      	bne.n	80025c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <LL_ADC_IsEnabled+0x18>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <LL_ADC_IsEnabled+0x1a>
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800262e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002632:	f043 0204 	orr.w	r2, r3, #4
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b04      	cmp	r3, #4
 8002658:	d101      	bne.n	800265e <LL_ADC_REG_IsConversionOngoing+0x18>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b08      	cmp	r3, #8
 800267e:	d101      	bne.n	8002684 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e16d      	b.n	800298a <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7fe fd45 	bl	800114c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff3f 	bl	8002558 <LL_ADC_IsDeepPowerDownEnabled>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d004      	beq.n	80026ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff25 	bl	8002534 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ff5a 	bl	80025a8 <LL_ADC_IsInternalRegulatorEnabled>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d115      	bne.n	8002726 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff ff3e 	bl	8002580 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002704:	4ba3      	ldr	r3, [pc, #652]	; (8002994 <HAL_ADC_Init+0x300>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	099b      	lsrs	r3, r3, #6
 800270a:	4aa3      	ldr	r2, [pc, #652]	; (8002998 <HAL_ADC_Init+0x304>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	3301      	adds	r3, #1
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002718:	e002      	b.n	8002720 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3b01      	subs	r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f9      	bne.n	800271a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff3c 	bl	80025a8 <LL_ADC_IsInternalRegulatorEnabled>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10d      	bne.n	8002752 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	f043 0210 	orr.w	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002746:	f043 0201 	orr.w	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ff75 	bl	8002646 <LL_ADC_REG_IsConversionOngoing>
 800275c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 8106 	bne.w	8002978 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f040 8102 	bne.w	8002978 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800277c:	f043 0202 	orr.w	r2, r3, #2
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff35 	bl	80025f8 <LL_ADC_IsEnabled>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d111      	bne.n	80027b8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002794:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002798:	f7ff ff2e 	bl	80025f8 <LL_ADC_IsEnabled>
 800279c:	4604      	mov	r4, r0
 800279e:	487f      	ldr	r0, [pc, #508]	; (800299c <HAL_ADC_Init+0x308>)
 80027a0:	f7ff ff2a 	bl	80025f8 <LL_ADC_IsEnabled>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4323      	orrs	r3, r4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d105      	bne.n	80027b8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4619      	mov	r1, r3
 80027b2:	487b      	ldr	r0, [pc, #492]	; (80029a0 <HAL_ADC_Init+0x30c>)
 80027b4:	f7ff fd62 	bl	800227c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	7f5b      	ldrb	r3, [r3, #29]
 80027bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80027c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80027ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d106      	bne.n	80027f4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	3b01      	subs	r3, #1
 80027ec:	045b      	lsls	r3, r3, #17
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d009      	beq.n	8002810 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_ADC_Init+0x310>)
 8002818:	4013      	ands	r3, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	69b9      	ldr	r1, [r7, #24]
 8002820:	430b      	orrs	r3, r1
 8002822:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff01 	bl	8002646 <LL_ADC_REG_IsConversionOngoing>
 8002844:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff0e 	bl	800266c <LL_ADC_INJ_IsConversionOngoing>
 8002850:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d16d      	bne.n	8002934 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d16a      	bne.n	8002934 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002862:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800286a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800287a:	f023 0302 	bic.w	r3, r3, #2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	69b9      	ldr	r1, [r7, #24]
 8002884:	430b      	orrs	r3, r1
 8002886:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d017      	beq.n	80028c0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800289e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6911      	ldr	r1, [r2, #16]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80028be:	e013      	b.n	80028e8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d118      	bne.n	8002924 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002908:	4311      	orrs	r1, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800290e:	4311      	orrs	r1, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002914:	430a      	orrs	r2, r1
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	611a      	str	r2, [r3, #16]
 8002922:	e007      	b.n	8002934 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d10c      	bne.n	8002956 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f023 010f 	bic.w	r1, r3, #15
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	1e5a      	subs	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
 8002954:	e007      	b.n	8002966 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 020f 	bic.w	r2, r2, #15
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	65da      	str	r2, [r3, #92]	; 0x5c
 8002976:	e007      	b.n	8002988 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	f043 0210 	orr.w	r2, r3, #16
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002988:	7ffb      	ldrb	r3, [r7, #31]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3724      	adds	r7, #36	; 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd90      	pop	{r4, r7, pc}
 8002992:	bf00      	nop
 8002994:	20000000 	.word	0x20000000
 8002998:	053e2d63 	.word	0x053e2d63
 800299c:	50000100 	.word	0x50000100
 80029a0:	50000300 	.word	0x50000300
 80029a4:	fff04007 	.word	0xfff04007

080029a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029b0:	4859      	ldr	r0, [pc, #356]	; (8002b18 <HAL_ADC_Start+0x170>)
 80029b2:	f7ff fdb1 	bl	8002518 <LL_ADC_GetMultimode>
 80029b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fe42 	bl	8002646 <LL_ADC_REG_IsConversionOngoing>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f040 809f 	bne.w	8002b08 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_ADC_Start+0x30>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e09a      	b.n	8002b0e <HAL_ADC_Start+0x166>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fc8d 	bl	8003300 <ADC_Enable>
 80029e6:	4603      	mov	r3, r0
 80029e8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f040 8086 	bne.w	8002afe <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a44      	ldr	r2, [pc, #272]	; (8002b1c <HAL_ADC_Start+0x174>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d002      	beq.n	8002a16 <HAL_ADC_Start+0x6e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	e001      	b.n	8002a1a <HAL_ADC_Start+0x72>
 8002a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d002      	beq.n	8002a28 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d105      	bne.n	8002a34 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a40:	d106      	bne.n	8002a50 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a46:	f023 0206 	bic.w	r2, r3, #6
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	661a      	str	r2, [r3, #96]	; 0x60
 8002a4e:	e002      	b.n	8002a56 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	221c      	movs	r2, #28
 8002a5c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a2c      	ldr	r2, [pc, #176]	; (8002b1c <HAL_ADC_Start+0x174>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d002      	beq.n	8002a76 <HAL_ADC_Start+0xce>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	e001      	b.n	8002a7a <HAL_ADC_Start+0xd2>
 8002a76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d008      	beq.n	8002a94 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d002      	beq.n	8002a94 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b09      	cmp	r3, #9
 8002a92:	d114      	bne.n	8002abe <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aaa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fdb1 	bl	800261e <LL_ADC_REG_StartConversion>
 8002abc:	e026      	b.n	8002b0c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a13      	ldr	r2, [pc, #76]	; (8002b1c <HAL_ADC_Start+0x174>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d002      	beq.n	8002ada <HAL_ADC_Start+0x132>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	e001      	b.n	8002ade <HAL_ADC_Start+0x136>
 8002ada:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ade:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00f      	beq.n	8002b0c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002af4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	65da      	str	r2, [r3, #92]	; 0x5c
 8002afc:	e006      	b.n	8002b0c <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002b06:	e001      	b.n	8002b0c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	50000300 	.word	0x50000300
 8002b1c:	50000100 	.word	0x50000100

08002b20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b0b6      	sub	sp, #216	; 0xd8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x22>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e3c8      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x7b4>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fd79 	bl	8002646 <LL_ADC_REG_IsConversionOngoing>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 83ad 	bne.w	80032b6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f7ff fc59 	bl	8002420 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fd67 	bl	8002646 <LL_ADC_REG_IsConversionOngoing>
 8002b78:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fd73 	bl	800266c <LL_ADC_INJ_IsConversionOngoing>
 8002b86:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 81d9 	bne.w	8002f46 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f040 81d4 	bne.w	8002f46 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7ff fc60 	bl	8002478 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fc1a 	bl	80023fa <LL_ADC_SetSamplingTimeCommonConfig>
 8002bc6:	e00e      	b.n	8002be6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f7ff fc4f 	bl	8002478 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fc0a 	bl	80023fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	08db      	lsrs	r3, r3, #3
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d022      	beq.n	8002c4e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6919      	ldr	r1, [r3, #16]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c18:	f7ff fb64 	bl	80022e4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	6919      	ldr	r1, [r3, #16]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f7ff fbb0 	bl	800238e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6919      	ldr	r1, [r3, #16]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	7f1b      	ldrb	r3, [r3, #28]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x124>
 8002c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c42:	e000      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x126>
 8002c44:	2300      	movs	r3, #0
 8002c46:	461a      	mov	r2, r3
 8002c48:	f7ff fbbc 	bl	80023c4 <LL_ADC_SetOffsetSaturation>
 8002c4c:	e17b      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fb69 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x15a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fb5e 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002c70:	4603      	mov	r3, r0
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	f003 021f 	and.w	r2, r3, #31
 8002c78:	e01e      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x198>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fb53 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002ca8:	2320      	movs	r3, #32
 8002caa:	e004      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x1b0>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0e9b      	lsrs	r3, r3, #26
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	e018      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x1e2>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002ce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002cec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e004      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002cf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d106      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fb22 	bl	8002358 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fb06 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x220>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fafb 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002d36:	4603      	mov	r3, r0
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	f003 021f 	and.w	r2, r3, #31
 8002d3e:	e01e      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x25e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2101      	movs	r1, #1
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff faf0 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002d66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e004      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002d72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x276>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	0e9b      	lsrs	r3, r3, #26
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	e018      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x2a8>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002daa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002db2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	e004      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002dbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d106      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fabf 	bl	8002358 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2102      	movs	r1, #2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff faa3 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10a      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x2e6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2102      	movs	r1, #2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fa98 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	0e9b      	lsrs	r3, r3, #26
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	e01e      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x324>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fa8d 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002e34:	2320      	movs	r3, #32
 8002e36:	e004      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x33c>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0e9b      	lsrs	r3, r3, #26
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	e016      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x36a>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002e6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e004      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d106      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	2102      	movs	r1, #2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fa5e 	bl	8002358 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fa42 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x3a8>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2103      	movs	r1, #3
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fa37 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	0e9b      	lsrs	r3, r3, #26
 8002ec2:	f003 021f 	and.w	r2, r3, #31
 8002ec6:	e017      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x3d8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2103      	movs	r1, #3
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fa2c 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002eea:	2320      	movs	r3, #32
 8002eec:	e003      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d105      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x3f0>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0e9b      	lsrs	r3, r3, #26
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	e011      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x414>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002f28:	2320      	movs	r3, #32
 8002f2a:	e003      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d106      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2103      	movs	r1, #3
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fa09 	bl	8002358 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fb54 	bl	80025f8 <LL_ADC_IsEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f040 8140 	bne.w	80031d8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	461a      	mov	r2, r3
 8002f66:	f7ff fab3 	bl	80024d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	4a8f      	ldr	r2, [pc, #572]	; (80031ac <HAL_ADC_ConfigChannel+0x68c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	f040 8131 	bne.w	80031d8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x47e>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	2b09      	cmp	r3, #9
 8002f94:	bf94      	ite	ls
 8002f96:	2301      	movls	r3, #1
 8002f98:	2300      	movhi	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	e019      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x4b2>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fae:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002fb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	e003      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2b09      	cmp	r3, #9
 8002fca:	bf94      	ite	ls
 8002fcc:	2301      	movls	r3, #1
 8002fce:	2300      	movhi	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d079      	beq.n	80030ca <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d107      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x4d2>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	0e9b      	lsrs	r3, r3, #26
 8002fe8:	3301      	adds	r3, #1
 8002fea:	069b      	lsls	r3, r3, #26
 8002fec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff0:	e015      	b.n	800301e <HAL_ADC_ConfigChannel+0x4fe>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003002:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800300a:	2320      	movs	r3, #32
 800300c:	e003      	b.n	8003016 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800300e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3301      	adds	r3, #1
 8003018:	069b      	lsls	r3, r3, #26
 800301a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_ADC_ConfigChannel+0x51e>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	0e9b      	lsrs	r3, r3, #26
 8003030:	3301      	adds	r3, #1
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	2101      	movs	r1, #1
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	e017      	b.n	800306e <HAL_ADC_ConfigChannel+0x54e>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800304c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800304e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e003      	b.n	8003062 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800305a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	2101      	movs	r1, #1
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	ea42 0103 	orr.w	r1, r2, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x574>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	0e9b      	lsrs	r3, r3, #26
 8003084:	3301      	adds	r3, #1
 8003086:	f003 021f 	and.w	r2, r3, #31
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	051b      	lsls	r3, r3, #20
 8003092:	e018      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x5a6>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80030a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80030ac:	2320      	movs	r3, #32
 80030ae:	e003      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80030b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f003 021f 	and.w	r2, r3, #31
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c6:	430b      	orrs	r3, r1
 80030c8:	e081      	b.n	80031ce <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d107      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x5c6>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0e9b      	lsrs	r3, r3, #26
 80030dc:	3301      	adds	r3, #1
 80030de:	069b      	lsls	r3, r3, #26
 80030e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e4:	e015      	b.n	8003112 <HAL_ADC_ConfigChannel+0x5f2>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80030f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80030fe:	2320      	movs	r3, #32
 8003100:	e003      	b.n	800310a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3301      	adds	r3, #1
 800310c:	069b      	lsls	r3, r3, #26
 800310e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x612>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	0e9b      	lsrs	r3, r3, #26
 8003124:	3301      	adds	r3, #1
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	2101      	movs	r1, #1
 800312c:	fa01 f303 	lsl.w	r3, r1, r3
 8003130:	e017      	b.n	8003162 <HAL_ADC_ConfigChannel+0x642>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	61fb      	str	r3, [r7, #28]
  return result;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800314a:	2320      	movs	r3, #32
 800314c:	e003      	b.n	8003156 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	3301      	adds	r3, #1
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	2101      	movs	r1, #1
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	ea42 0103 	orr.w	r1, r2, r3
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <HAL_ADC_ConfigChannel+0x66e>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	0e9b      	lsrs	r3, r3, #26
 8003178:	3301      	adds	r3, #1
 800317a:	f003 021f 	and.w	r2, r3, #31
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	3b1e      	subs	r3, #30
 8003186:	051b      	lsls	r3, r3, #20
 8003188:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800318c:	e01e      	b.n	80031cc <HAL_ADC_ConfigChannel+0x6ac>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	613b      	str	r3, [r7, #16]
  return result;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80031a6:	2320      	movs	r3, #32
 80031a8:	e006      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x698>
 80031aa:	bf00      	nop
 80031ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	f003 021f 	and.w	r2, r3, #31
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	3b1e      	subs	r3, #30
 80031c6:	051b      	lsls	r3, r3, #20
 80031c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031cc:	430b      	orrs	r3, r1
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	6892      	ldr	r2, [r2, #8]
 80031d2:	4619      	mov	r1, r3
 80031d4:	f7ff f950 	bl	8002478 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b3f      	ldr	r3, [pc, #252]	; (80032dc <HAL_ADC_ConfigChannel+0x7bc>)
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d071      	beq.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031e4:	483e      	ldr	r0, [pc, #248]	; (80032e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80031e6:	f7ff f86f 	bl	80022c8 <LL_ADC_GetCommonPathInternalCh>
 80031ea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a3c      	ldr	r2, [pc, #240]	; (80032e4 <HAL_ADC_ConfigChannel+0x7c4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x6e2>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a3a      	ldr	r2, [pc, #232]	; (80032e8 <HAL_ADC_ConfigChannel+0x7c8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d127      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003206:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d121      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003216:	d157      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800321c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003220:	4619      	mov	r1, r3
 8003222:	482f      	ldr	r0, [pc, #188]	; (80032e0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003224:	f7ff f83d 	bl	80022a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003228:	4b30      	ldr	r3, [pc, #192]	; (80032ec <HAL_ADC_ConfigChannel+0x7cc>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	4a30      	ldr	r2, [pc, #192]	; (80032f0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	099b      	lsrs	r3, r3, #6
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003242:	e002      	b.n	800324a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3b01      	subs	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f9      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003250:	e03a      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d113      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x764>
 800325c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10d      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <HAL_ADC_ConfigChannel+0x7d8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d02a      	beq.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003272:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800327a:	4619      	mov	r1, r3
 800327c:	4818      	ldr	r0, [pc, #96]	; (80032e0 <HAL_ADC_ConfigChannel+0x7c0>)
 800327e:	f7ff f810 	bl	80022a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003282:	e021      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <HAL_ADC_ConfigChannel+0x7dc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d11c      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800328e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d116      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a16      	ldr	r2, [pc, #88]	; (80032f8 <HAL_ADC_ConfigChannel+0x7d8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d011      	beq.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032ac:	4619      	mov	r1, r3
 80032ae:	480c      	ldr	r0, [pc, #48]	; (80032e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80032b0:	f7fe fff7 	bl	80022a2 <LL_ADC_SetCommonPathInternalCh>
 80032b4:	e008      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80032d0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	37d8      	adds	r7, #216	; 0xd8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	80080000 	.word	0x80080000
 80032e0:	50000300 	.word	0x50000300
 80032e4:	c3210000 	.word	0xc3210000
 80032e8:	90c00010 	.word	0x90c00010
 80032ec:	20000000 	.word	0x20000000
 80032f0:	053e2d63 	.word	0x053e2d63
 80032f4:	c7520000 	.word	0xc7520000
 80032f8:	50000100 	.word	0x50000100
 80032fc:	cb840000 	.word	0xcb840000

08003300 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff f973 	bl	80025f8 <LL_ADC_IsEnabled>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d14d      	bne.n	80033b4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	4b28      	ldr	r3, [pc, #160]	; (80033c0 <ADC_Enable+0xc0>)
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	f043 0210 	orr.w	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003336:	f043 0201 	orr.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e039      	b.n	80033b6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff f942 	bl	80025d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800334c:	f7fe ff68 	bl	8002220 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003352:	e028      	b.n	80033a6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff f94d 	bl	80025f8 <LL_ADC_IsEnabled>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff f931 	bl	80025d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800336e:	f7fe ff57 	bl	8002220 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d914      	bls.n	80033a6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d00d      	beq.n	80033a6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338e:	f043 0210 	orr.w	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e007      	b.n	80033b6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d1cf      	bne.n	8003354 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	8000003f 	.word	0x8000003f

080033c4 <LL_ADC_IsEnabled>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <LL_ADC_IsEnabled+0x18>
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <LL_ADC_IsEnabled+0x1a>
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <LL_ADC_REG_IsConversionOngoing>:
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d101      	bne.n	8003402 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b0a1      	sub	sp, #132	; 0x84
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800342a:	2302      	movs	r3, #2
 800342c:	e08b      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003436:	2300      	movs	r3, #0
 8003438:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800343a:	2300      	movs	r3, #0
 800343c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003446:	d102      	bne.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003448:	4b41      	ldr	r3, [pc, #260]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	e001      	b.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e06a      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ffb9 	bl	80033ea <LL_ADC_REG_IsConversionOngoing>
 8003478:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff ffb3 	bl	80033ea <LL_ADC_REG_IsConversionOngoing>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d14c      	bne.n	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800348a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800348c:	2b00      	cmp	r3, #0
 800348e:	d149      	bne.n	8003524 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003490:	4b30      	ldr	r3, [pc, #192]	; (8003554 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003492:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d028      	beq.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800349c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ae:	035b      	lsls	r3, r3, #13
 80034b0:	430b      	orrs	r3, r1
 80034b2:	431a      	orrs	r2, r3
 80034b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034bc:	f7ff ff82 	bl	80033c4 <LL_ADC_IsEnabled>
 80034c0:	4604      	mov	r4, r0
 80034c2:	4823      	ldr	r0, [pc, #140]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80034c4:	f7ff ff7e 	bl	80033c4 <LL_ADC_IsEnabled>
 80034c8:	4603      	mov	r3, r0
 80034ca:	4323      	orrs	r3, r4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d133      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80034d8:	f023 030f 	bic.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	6811      	ldr	r1, [r2, #0]
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	6892      	ldr	r2, [r2, #8]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	431a      	orrs	r2, r3
 80034e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ea:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034ec:	e024      	b.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034fa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80034fe:	f7ff ff61 	bl	80033c4 <LL_ADC_IsEnabled>
 8003502:	4604      	mov	r4, r0
 8003504:	4812      	ldr	r0, [pc, #72]	; (8003550 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003506:	f7ff ff5d 	bl	80033c4 <LL_ADC_IsEnabled>
 800350a:	4603      	mov	r3, r0
 800350c:	4323      	orrs	r3, r4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d112      	bne.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800351a:	f023 030f 	bic.w	r3, r3, #15
 800351e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003520:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003522:	e009      	b.n	8003538 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003536:	e000      	b.n	800353a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003538:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003542:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003546:	4618      	mov	r0, r3
 8003548:	3784      	adds	r7, #132	; 0x84
 800354a:	46bd      	mov	sp, r7
 800354c:	bd90      	pop	{r4, r7, pc}
 800354e:	bf00      	nop
 8003550:	50000100 	.word	0x50000100
 8003554:	50000300 	.word	0x50000300

08003558 <__NVIC_SetPriorityGrouping>:
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003574:	4013      	ands	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	60d3      	str	r3, [r2, #12]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_GetPriorityGrouping>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <__NVIC_GetPriorityGrouping+0x18>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 0307 	and.w	r3, r3, #7
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_SetPriority>:
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	6039      	str	r1, [r7, #0]
 80035c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	db0a      	blt.n	80035e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	490c      	ldr	r1, [pc, #48]	; (8003608 <__NVIC_SetPriority+0x4c>)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	0112      	lsls	r2, r2, #4
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	440b      	add	r3, r1
 80035e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035e4:	e00a      	b.n	80035fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4908      	ldr	r1, [pc, #32]	; (800360c <__NVIC_SetPriority+0x50>)
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	3b04      	subs	r3, #4
 80035f4:	0112      	lsls	r2, r2, #4
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	440b      	add	r3, r1
 80035fa:	761a      	strb	r2, [r3, #24]
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000e100 	.word	0xe000e100
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003610:	b480      	push	{r7}
 8003612:	b089      	sub	sp, #36	; 0x24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f1c3 0307 	rsb	r3, r3, #7
 800362a:	2b04      	cmp	r3, #4
 800362c:	bf28      	it	cs
 800362e:	2304      	movcs	r3, #4
 8003630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3304      	adds	r3, #4
 8003636:	2b06      	cmp	r3, #6
 8003638:	d902      	bls.n	8003640 <NVIC_EncodePriority+0x30>
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3b03      	subs	r3, #3
 800363e:	e000      	b.n	8003642 <NVIC_EncodePriority+0x32>
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43da      	mvns	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	401a      	ands	r2, r3
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003658:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fa01 f303 	lsl.w	r3, r1, r3
 8003662:	43d9      	mvns	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003668:	4313      	orrs	r3, r2
         );
}
 800366a:	4618      	mov	r0, r3
 800366c:	3724      	adds	r7, #36	; 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3b01      	subs	r3, #1
 8003684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003688:	d301      	bcc.n	800368e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800368a:	2301      	movs	r3, #1
 800368c:	e00f      	b.n	80036ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800368e:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <SysTick_Config+0x40>)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3b01      	subs	r3, #1
 8003694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003696:	210f      	movs	r1, #15
 8003698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800369c:	f7ff ff8e 	bl	80035bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <SysTick_Config+0x40>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036a6:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <SysTick_Config+0x40>)
 80036a8:	2207      	movs	r2, #7
 80036aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	e000e010 	.word	0xe000e010

080036bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ff47 	bl	8003558 <__NVIC_SetPriorityGrouping>
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	4603      	mov	r3, r0
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036e0:	f7ff ff5e 	bl	80035a0 <__NVIC_GetPriorityGrouping>
 80036e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	6978      	ldr	r0, [r7, #20]
 80036ec:	f7ff ff90 	bl	8003610 <NVIC_EncodePriority>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff ff5f 	bl	80035bc <__NVIC_SetPriority>
}
 80036fe:	bf00      	nop
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff ffb2 	bl	8003678 <SysTick_Config>
 8003714:	4603      	mov	r3, r0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e147      	b.n	80039c2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fdde 	bl	8001308 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0210 	bic.w	r2, r2, #16
 800375a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800375c:	f7fe fd60 	bl	8002220 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003762:	e012      	b.n	800378a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003764:	f7fe fd5c 	bl	8002220 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b0a      	cmp	r3, #10
 8003770:	d90b      	bls.n	800378a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003776:	f043 0201 	orr.w	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2203      	movs	r2, #3
 8003782:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e11b      	b.n	80039c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b08      	cmp	r3, #8
 8003796:	d0e5      	beq.n	8003764 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037a8:	f7fe fd3a 	bl	8002220 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80037ae:	e012      	b.n	80037d6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80037b0:	f7fe fd36 	bl	8002220 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b0a      	cmp	r3, #10
 80037bc:	d90b      	bls.n	80037d6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c2:	f043 0201 	orr.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2203      	movs	r2, #3
 80037ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0f5      	b.n	80039c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0e5      	beq.n	80037b0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0202 	orr.w	r2, r2, #2
 80037f2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a74      	ldr	r2, [pc, #464]	; (80039cc <HAL_FDCAN_Init+0x2ac>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d103      	bne.n	8003806 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80037fe:	4a74      	ldr	r2, [pc, #464]	; (80039d0 <HAL_FDCAN_Init+0x2b0>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7c1b      	ldrb	r3, [r3, #16]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d108      	bne.n	8003820 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381c:	619a      	str	r2, [r3, #24]
 800381e:	e007      	b.n	8003830 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800382e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7c5b      	ldrb	r3, [r3, #17]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d108      	bne.n	800384a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003846:	619a      	str	r2, [r3, #24]
 8003848:	e007      	b.n	800385a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699a      	ldr	r2, [r3, #24]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003858:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	7c9b      	ldrb	r3, [r3, #18]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d108      	bne.n	8003874 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003870:	619a      	str	r2, [r3, #24]
 8003872:	e007      	b.n	8003884 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003882:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699a      	ldr	r2, [r3, #24]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80038a8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0210 	bic.w	r2, r2, #16
 80038b8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d108      	bne.n	80038d4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0204 	orr.w	r2, r2, #4
 80038d0:	619a      	str	r2, [r3, #24]
 80038d2:	e02c      	b.n	800392e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d028      	beq.n	800392e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d01c      	beq.n	800391e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038f2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0210 	orr.w	r2, r2, #16
 8003902:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d110      	bne.n	800392e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0220 	orr.w	r2, r2, #32
 800391a:	619a      	str	r2, [r3, #24]
 800391c:	e007      	b.n	800392e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0220 	orr.w	r2, r2, #32
 800392c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	3b01      	subs	r3, #1
 8003934:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	3b01      	subs	r3, #1
 800393c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800393e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003946:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	3b01      	subs	r3, #1
 8003950:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003956:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003958:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003962:	d115      	bne.n	8003990 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	3b01      	subs	r3, #1
 8003970:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003972:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	3b01      	subs	r3, #1
 800397a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800397c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	3b01      	subs	r3, #1
 8003986:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800398c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800398e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f814 	bl	80039d4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40006400 	.word	0x40006400
 80039d0:	40006500 	.word	0x40006500

080039d4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80039dc:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80039de:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ee:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f6:	041a      	lsls	r2, r3, #16
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a14:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	061a      	lsls	r2, r3, #24
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e005      	b.n	8003a62 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d3f3      	bcc.n	8003a56 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003a6e:	bf00      	nop
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	4000a400 	.word	0x4000a400

08003a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a8e:	e15a      	b.n	8003d46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 814c 	beq.w	8003d40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d00b      	beq.n	8003ac8 <HAL_GPIO_Init+0x48>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d007      	beq.n	8003ac8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003abc:	2b11      	cmp	r3, #17
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b12      	cmp	r3, #18
 8003ac6:	d130      	bne.n	8003b2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003afe:	2201      	movs	r2, #1
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	f003 0201 	and.w	r2, r3, #1
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	2203      	movs	r2, #3
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0xea>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b12      	cmp	r3, #18
 8003b68:	d123      	bne.n	8003bb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	08da      	lsrs	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3208      	adds	r2, #8
 8003b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	220f      	movs	r2, #15
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	08da      	lsrs	r2, r3, #3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3208      	adds	r2, #8
 8003bac:	6939      	ldr	r1, [r7, #16]
 8003bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f003 0203 	and.w	r2, r3, #3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80a6 	beq.w	8003d40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf4:	4b5b      	ldr	r3, [pc, #364]	; (8003d64 <HAL_GPIO_Init+0x2e4>)
 8003bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf8:	4a5a      	ldr	r2, [pc, #360]	; (8003d64 <HAL_GPIO_Init+0x2e4>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	6613      	str	r3, [r2, #96]	; 0x60
 8003c00:	4b58      	ldr	r3, [pc, #352]	; (8003d64 <HAL_GPIO_Init+0x2e4>)
 8003c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c0c:	4a56      	ldr	r2, [pc, #344]	; (8003d68 <HAL_GPIO_Init+0x2e8>)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	3302      	adds	r3, #2
 8003c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	220f      	movs	r2, #15
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c36:	d01f      	beq.n	8003c78 <HAL_GPIO_Init+0x1f8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a4c      	ldr	r2, [pc, #304]	; (8003d6c <HAL_GPIO_Init+0x2ec>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d019      	beq.n	8003c74 <HAL_GPIO_Init+0x1f4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a4b      	ldr	r2, [pc, #300]	; (8003d70 <HAL_GPIO_Init+0x2f0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d013      	beq.n	8003c70 <HAL_GPIO_Init+0x1f0>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a4a      	ldr	r2, [pc, #296]	; (8003d74 <HAL_GPIO_Init+0x2f4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00d      	beq.n	8003c6c <HAL_GPIO_Init+0x1ec>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a49      	ldr	r2, [pc, #292]	; (8003d78 <HAL_GPIO_Init+0x2f8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <HAL_GPIO_Init+0x1e8>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a48      	ldr	r2, [pc, #288]	; (8003d7c <HAL_GPIO_Init+0x2fc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d101      	bne.n	8003c64 <HAL_GPIO_Init+0x1e4>
 8003c60:	2305      	movs	r3, #5
 8003c62:	e00a      	b.n	8003c7a <HAL_GPIO_Init+0x1fa>
 8003c64:	2306      	movs	r3, #6
 8003c66:	e008      	b.n	8003c7a <HAL_GPIO_Init+0x1fa>
 8003c68:	2304      	movs	r3, #4
 8003c6a:	e006      	b.n	8003c7a <HAL_GPIO_Init+0x1fa>
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e004      	b.n	8003c7a <HAL_GPIO_Init+0x1fa>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e002      	b.n	8003c7a <HAL_GPIO_Init+0x1fa>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <HAL_GPIO_Init+0x1fa>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	f002 0203 	and.w	r2, r2, #3
 8003c80:	0092      	lsls	r2, r2, #2
 8003c82:	4093      	lsls	r3, r2
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c8a:	4937      	ldr	r1, [pc, #220]	; (8003d68 <HAL_GPIO_Init+0x2e8>)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	089b      	lsrs	r3, r3, #2
 8003c90:	3302      	adds	r3, #2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c98:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <HAL_GPIO_Init+0x300>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cbc:	4a30      	ldr	r2, [pc, #192]	; (8003d80 <HAL_GPIO_Init+0x300>)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003cc2:	4b2f      	ldr	r3, [pc, #188]	; (8003d80 <HAL_GPIO_Init+0x300>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ce6:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <HAL_GPIO_Init+0x300>)
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cec:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <HAL_GPIO_Init+0x300>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d10:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <HAL_GPIO_Init+0x300>)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d16:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <HAL_GPIO_Init+0x300>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4013      	ands	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d3a:	4a11      	ldr	r2, [pc, #68]	; (8003d80 <HAL_GPIO_Init+0x300>)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	3301      	adds	r3, #1
 8003d44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f47f ae9d 	bne.w	8003a90 <HAL_GPIO_Init+0x10>
  }
}
 8003d56:	bf00      	nop
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	48000400 	.word	0x48000400
 8003d70:	48000800 	.word	0x48000800
 8003d74:	48000c00 	.word	0x48000c00
 8003d78:	48001000 	.word	0x48001000
 8003d7c:	48001400 	.word	0x48001400
 8003d80:	40010400 	.word	0x40010400

08003d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]
 8003d90:	4613      	mov	r3, r2
 8003d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d94:	787b      	ldrb	r3, [r7, #1]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d9a:	887a      	ldrh	r2, [r7, #2]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003da0:	e002      	b.n	8003da8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d141      	bne.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dc2:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dce:	d131      	bne.n	8003e34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dd0:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd6:	4a46      	ldr	r2, [pc, #280]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ddc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de0:	4b43      	ldr	r3, [pc, #268]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003de8:	4a41      	ldr	r2, [pc, #260]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003df0:	4b40      	ldr	r3, [pc, #256]	; (8003ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2232      	movs	r2, #50	; 0x32
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	4a3f      	ldr	r2, [pc, #252]	; (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003e00:	0c9b      	lsrs	r3, r3, #18
 8003e02:	3301      	adds	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e06:	e002      	b.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e0e:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1a:	d102      	bne.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f2      	bne.n	8003e08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e22:	4b33      	ldr	r3, [pc, #204]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2e:	d158      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e057      	b.n	8003ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e34:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3a:	4a2d      	ldr	r2, [pc, #180]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e44:	e04d      	b.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4c:	d141      	bne.n	8003ed2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e4e:	4b28      	ldr	r3, [pc, #160]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5a:	d131      	bne.n	8003ec0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e5c:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e62:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e6c:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e74:	4a1e      	ldr	r2, [pc, #120]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2232      	movs	r2, #50	; 0x32
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	4a1c      	ldr	r2, [pc, #112]	; (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	0c9b      	lsrs	r3, r3, #18
 8003e8e:	3301      	adds	r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e92:	e002      	b.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e9a:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea6:	d102      	bne.n	8003eae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f2      	bne.n	8003e94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eba:	d112      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e011      	b.n	8003ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ecc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ed0:	e007      	b.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ed2:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003eda:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ee0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	431bde83 	.word	0x431bde83

08003efc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f0a:	6093      	str	r3, [r2, #8]
}
 8003f0c:	bf00      	nop
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40007000 	.word	0x40007000

08003f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e308      	b.n	8004540 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d075      	beq.n	8004026 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f3a:	4ba3      	ldr	r3, [pc, #652]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f44:	4ba0      	ldr	r3, [pc, #640]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d102      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3e>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d002      	beq.n	8003f60 <HAL_RCC_OscConfig+0x44>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d10b      	bne.n	8003f78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f60:	4b99      	ldr	r3, [pc, #612]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05b      	beq.n	8004024 <HAL_RCC_OscConfig+0x108>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d157      	bne.n	8004024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e2e3      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f80:	d106      	bne.n	8003f90 <HAL_RCC_OscConfig+0x74>
 8003f82:	4b91      	ldr	r3, [pc, #580]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a90      	ldr	r2, [pc, #576]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e01d      	b.n	8003fcc <HAL_RCC_OscConfig+0xb0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x98>
 8003f9a:	4b8b      	ldr	r3, [pc, #556]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a8a      	ldr	r2, [pc, #552]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b88      	ldr	r3, [pc, #544]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a87      	ldr	r2, [pc, #540]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCC_OscConfig+0xb0>
 8003fb4:	4b84      	ldr	r3, [pc, #528]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a83      	ldr	r2, [pc, #524]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b81      	ldr	r3, [pc, #516]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a80      	ldr	r2, [pc, #512]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fe f924 	bl	8002220 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fe f920 	bl	8002220 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e2a8      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fee:	4b76      	ldr	r3, [pc, #472]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0xc0>
 8003ffa:	e014      	b.n	8004026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fe f910 	bl	8002220 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004004:	f7fe f90c 	bl	8002220 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e294      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004016:	4b6c      	ldr	r3, [pc, #432]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0xe8>
 8004022:	e000      	b.n	8004026 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d075      	beq.n	800411e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004032:	4b65      	ldr	r3, [pc, #404]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800403c:	4b62      	ldr	r3, [pc, #392]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d102      	bne.n	8004052 <HAL_RCC_OscConfig+0x136>
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d002      	beq.n	8004058 <HAL_RCC_OscConfig+0x13c>
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d11f      	bne.n	8004098 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004058:	4b5b      	ldr	r3, [pc, #364]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_OscConfig+0x154>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e267      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004070:	4b55      	ldr	r3, [pc, #340]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	4952      	ldr	r1, [pc, #328]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004084:	4b51      	ldr	r3, [pc, #324]	; (80041cc <HAL_RCC_OscConfig+0x2b0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe f87d 	bl	8002188 <HAL_InitTick>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d043      	beq.n	800411c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e253      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d023      	beq.n	80040e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a0:	4b49      	ldr	r3, [pc, #292]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a48      	ldr	r2, [pc, #288]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fe f8b8 	bl	8002220 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b4:	f7fe f8b4 	bl	8002220 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e23c      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c6:	4b40      	ldr	r3, [pc, #256]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b3d      	ldr	r3, [pc, #244]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	061b      	lsls	r3, r3, #24
 80040e0:	4939      	ldr	r1, [pc, #228]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
 80040e6:	e01a      	b.n	800411e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e8:	4b37      	ldr	r3, [pc, #220]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a36      	ldr	r2, [pc, #216]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fe f894 	bl	8002220 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040fc:	f7fe f890 	bl	8002220 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e218      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800410e:	4b2e      	ldr	r3, [pc, #184]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x1e0>
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800411c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d03c      	beq.n	80041a4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01c      	beq.n	800416c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004132:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004138:	4a23      	ldr	r2, [pc, #140]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004142:	f7fe f86d 	bl	8002220 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414a:	f7fe f869 	bl	8002220 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1f1      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 800415e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0ef      	beq.n	800414a <HAL_RCC_OscConfig+0x22e>
 800416a:	e01b      	b.n	80041a4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416c:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 800416e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004172:	4a15      	ldr	r2, [pc, #84]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fe f850 	bl	8002220 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004184:	f7fe f84c 	bl	8002220 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1d4      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ef      	bne.n	8004184 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80ab 	beq.w	8004308 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041b6:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_RCC_OscConfig+0x2b4>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e005      	b.n	80041d2 <HAL_RCC_OscConfig+0x2b6>
 80041c6:	bf00      	nop
 80041c8:	40021000 	.word	0x40021000
 80041cc:	20000004 	.word	0x20000004
 80041d0:	2300      	movs	r3, #0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00d      	beq.n	80041f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	4baf      	ldr	r3, [pc, #700]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	4aae      	ldr	r2, [pc, #696]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 80041dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e0:	6593      	str	r3, [r2, #88]	; 0x58
 80041e2:	4bac      	ldr	r3, [pc, #688]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041ee:	2301      	movs	r3, #1
 80041f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f2:	4ba9      	ldr	r3, [pc, #676]	; (8004498 <HAL_RCC_OscConfig+0x57c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d118      	bne.n	8004230 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041fe:	4ba6      	ldr	r3, [pc, #664]	; (8004498 <HAL_RCC_OscConfig+0x57c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4aa5      	ldr	r2, [pc, #660]	; (8004498 <HAL_RCC_OscConfig+0x57c>)
 8004204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420a:	f7fe f809 	bl	8002220 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004212:	f7fe f805 	bl	8002220 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e18d      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004224:	4b9c      	ldr	r3, [pc, #624]	; (8004498 <HAL_RCC_OscConfig+0x57c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d108      	bne.n	800424a <HAL_RCC_OscConfig+0x32e>
 8004238:	4b96      	ldr	r3, [pc, #600]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	4a95      	ldr	r2, [pc, #596]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004248:	e024      	b.n	8004294 <HAL_RCC_OscConfig+0x378>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b05      	cmp	r3, #5
 8004250:	d110      	bne.n	8004274 <HAL_RCC_OscConfig+0x358>
 8004252:	4b90      	ldr	r3, [pc, #576]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	4a8e      	ldr	r2, [pc, #568]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 800425a:	f043 0304 	orr.w	r3, r3, #4
 800425e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004262:	4b8c      	ldr	r3, [pc, #560]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	4a8a      	ldr	r2, [pc, #552]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004272:	e00f      	b.n	8004294 <HAL_RCC_OscConfig+0x378>
 8004274:	4b87      	ldr	r3, [pc, #540]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	4a86      	ldr	r2, [pc, #536]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004284:	4b83      	ldr	r3, [pc, #524]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	4a82      	ldr	r2, [pc, #520]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d016      	beq.n	80042ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fd ffc0 	bl	8002220 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fd ffbc 	bl	8002220 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e142      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ba:	4b76      	ldr	r3, [pc, #472]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ed      	beq.n	80042a4 <HAL_RCC_OscConfig+0x388>
 80042c8:	e015      	b.n	80042f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7fd ffa9 	bl	8002220 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fd ffa5 	bl	8002220 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e12b      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042e8:	4b6a      	ldr	r3, [pc, #424]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1ed      	bne.n	80042d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042f6:	7ffb      	ldrb	r3, [r7, #31]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d105      	bne.n	8004308 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fc:	4b65      	ldr	r3, [pc, #404]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	4a64      	ldr	r2, [pc, #400]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004306:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d03c      	beq.n	800438e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01c      	beq.n	8004356 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800431c:	4b5d      	ldr	r3, [pc, #372]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 800431e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004322:	4a5c      	ldr	r2, [pc, #368]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fd ff78 	bl	8002220 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004334:	f7fd ff74 	bl	8002220 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0fc      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004346:	4b53      	ldr	r3, [pc, #332]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ef      	beq.n	8004334 <HAL_RCC_OscConfig+0x418>
 8004354:	e01b      	b.n	800438e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004356:	4b4f      	ldr	r3, [pc, #316]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004358:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800435c:	4a4d      	ldr	r2, [pc, #308]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004366:	f7fd ff5b 	bl	8002220 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800436e:	f7fd ff57 	bl	8002220 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e0df      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004380:	4b44      	ldr	r3, [pc, #272]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1ef      	bne.n	800436e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80d3 	beq.w	800453e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004398:	4b3e      	ldr	r3, [pc, #248]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b0c      	cmp	r3, #12
 80043a2:	f000 808d 	beq.w	80044c0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d15a      	bne.n	8004464 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ae:	4b39      	ldr	r3, [pc, #228]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a38      	ldr	r2, [pc, #224]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 80043b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fd ff31 	bl	8002220 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c2:	f7fd ff2d 	bl	8002220 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e0b5      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d4:	4b2f      	ldr	r3, [pc, #188]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f0      	bne.n	80043c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e0:	4b2c      	ldr	r3, [pc, #176]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	4b2d      	ldr	r3, [pc, #180]	; (800449c <HAL_RCC_OscConfig+0x580>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6a11      	ldr	r1, [r2, #32]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043f0:	3a01      	subs	r2, #1
 80043f2:	0112      	lsls	r2, r2, #4
 80043f4:	4311      	orrs	r1, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80043fa:	0212      	lsls	r2, r2, #8
 80043fc:	4311      	orrs	r1, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004402:	0852      	lsrs	r2, r2, #1
 8004404:	3a01      	subs	r2, #1
 8004406:	0552      	lsls	r2, r2, #21
 8004408:	4311      	orrs	r1, r2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800440e:	0852      	lsrs	r2, r2, #1
 8004410:	3a01      	subs	r2, #1
 8004412:	0652      	lsls	r2, r2, #25
 8004414:	4311      	orrs	r1, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800441a:	06d2      	lsls	r2, r2, #27
 800441c:	430a      	orrs	r2, r1
 800441e:	491d      	ldr	r1, [pc, #116]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004420:	4313      	orrs	r3, r2
 8004422:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004424:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1a      	ldr	r2, [pc, #104]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 800442a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800442e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004430:	4b18      	ldr	r3, [pc, #96]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a17      	ldr	r2, [pc, #92]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800443a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fd fef0 	bl	8002220 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004444:	f7fd feec 	bl	8002220 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e074      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004456:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x528>
 8004462:	e06c      	b.n	800453e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 800446a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800446e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a07      	ldr	r2, [pc, #28]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <HAL_RCC_OscConfig+0x578>)
 8004482:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448c:	f7fd fec8 	bl	8002220 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004492:	e00e      	b.n	80044b2 <HAL_RCC_OscConfig+0x596>
 8004494:	40021000 	.word	0x40021000
 8004498:	40007000 	.word	0x40007000
 800449c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a0:	f7fd febe 	bl	8002220 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e046      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b2:	4b25      	ldr	r3, [pc, #148]	; (8004548 <HAL_RCC_OscConfig+0x62c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x584>
 80044be:	e03e      	b.n	800453e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e039      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80044cc:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <HAL_RCC_OscConfig+0x62c>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f003 0203 	and.w	r2, r3, #3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d12c      	bne.n	800453a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	3b01      	subs	r3, #1
 80044ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d123      	bne.n	800453a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d11b      	bne.n	800453a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d113      	bne.n	800453a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	3b01      	subs	r3, #1
 8004520:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d109      	bne.n	800453a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	3b01      	subs	r3, #1
 8004534:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004536:	429a      	cmp	r2, r3
 8004538:	d001      	beq.n	800453e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40021000 	.word	0x40021000

0800454c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e11e      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004564:	4b91      	ldr	r3, [pc, #580]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d910      	bls.n	8004594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b8e      	ldr	r3, [pc, #568]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 020f 	bic.w	r2, r3, #15
 800457a:	498c      	ldr	r1, [pc, #560]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b8a      	ldr	r3, [pc, #552]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e106      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d073      	beq.n	8004688 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d129      	bne.n	80045fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a8:	4b81      	ldr	r3, [pc, #516]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0f4      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045b8:	f000 f99e 	bl	80048f8 <RCC_GetSysClockFreqFromPLLSource>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4a7c      	ldr	r2, [pc, #496]	; (80047b4 <HAL_RCC_ClockConfig+0x268>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d93f      	bls.n	8004646 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045c6:	4b7a      	ldr	r3, [pc, #488]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d033      	beq.n	8004646 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d12f      	bne.n	8004646 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045e6:	4b72      	ldr	r3, [pc, #456]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ee:	4a70      	ldr	r2, [pc, #448]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80045f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	e024      	b.n	8004646 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d107      	bne.n	8004614 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004604:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0c6      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004614:	4b66      	ldr	r3, [pc, #408]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0be      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004624:	f000 f8ce 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 8004628:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4a61      	ldr	r2, [pc, #388]	; (80047b4 <HAL_RCC_ClockConfig+0x268>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d909      	bls.n	8004646 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004632:	4b5f      	ldr	r3, [pc, #380]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463a:	4a5d      	ldr	r2, [pc, #372]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 800463c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004640:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004646:	4b5a      	ldr	r3, [pc, #360]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4957      	ldr	r1, [pc, #348]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004654:	4313      	orrs	r3, r2
 8004656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004658:	f7fd fde2 	bl	8002220 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7fd fdde 	bl	8002220 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e095      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	4b4e      	ldr	r3, [pc, #312]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 020c 	and.w	r2, r3, #12
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	429a      	cmp	r2, r3
 8004686:	d1eb      	bne.n	8004660 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d023      	beq.n	80046dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a0:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4a42      	ldr	r2, [pc, #264]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046b8:	4b3d      	ldr	r3, [pc, #244]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046c0:	4a3b      	ldr	r2, [pc, #236]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c8:	4b39      	ldr	r3, [pc, #228]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4936      	ldr	r1, [pc, #216]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
 80046da:	e008      	b.n	80046ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2b80      	cmp	r3, #128	; 0x80
 80046e0:	d105      	bne.n	80046ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046e2:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	4a32      	ldr	r2, [pc, #200]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046ee:	4b2f      	ldr	r3, [pc, #188]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d21d      	bcs.n	8004738 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fc:	4b2b      	ldr	r3, [pc, #172]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 020f 	bic.w	r2, r3, #15
 8004704:	4929      	ldr	r1, [pc, #164]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	4313      	orrs	r3, r2
 800470a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800470c:	f7fd fd88 	bl	8002220 <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004712:	e00a      	b.n	800472a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004714:	f7fd fd84 	bl	8002220 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e03b      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b20      	ldr	r3, [pc, #128]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d1ed      	bne.n	8004714 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004744:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4917      	ldr	r1, [pc, #92]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004762:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	490f      	ldr	r1, [pc, #60]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004776:	f000 f825 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 800477a:	4602      	mov	r2, r0
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	490c      	ldr	r1, [pc, #48]	; (80047b8 <HAL_RCC_ClockConfig+0x26c>)
 8004788:	5ccb      	ldrb	r3, [r1, r3]
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	fa22 f303 	lsr.w	r3, r2, r3
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <HAL_RCC_ClockConfig+0x270>)
 8004794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <HAL_RCC_ClockConfig+0x274>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fd fcf4 	bl	8002188 <HAL_InitTick>
 80047a0:	4603      	mov	r3, r0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40022000 	.word	0x40022000
 80047b0:	40021000 	.word	0x40021000
 80047b4:	04c4b400 	.word	0x04c4b400
 80047b8:	0800a180 	.word	0x0800a180
 80047bc:	20000000 	.word	0x20000000
 80047c0:	20000004 	.word	0x20000004

080047c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047ca:	4b2c      	ldr	r3, [pc, #176]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d102      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047d6:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	e047      	b.n	800486c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047dc:	4b27      	ldr	r3, [pc, #156]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d102      	bne.n	80047ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047e8:	4b26      	ldr	r3, [pc, #152]	; (8004884 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	e03e      	b.n	800486c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047ee:	4b23      	ldr	r3, [pc, #140]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b0c      	cmp	r3, #12
 80047f8:	d136      	bne.n	8004868 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047fa:	4b20      	ldr	r3, [pc, #128]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004804:	4b1d      	ldr	r3, [pc, #116]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	3301      	adds	r3, #1
 8004810:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d10c      	bne.n	8004832 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004818:	4a1a      	ldr	r2, [pc, #104]	; (8004884 <HAL_RCC_GetSysClockFreq+0xc0>)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	4a16      	ldr	r2, [pc, #88]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004822:	68d2      	ldr	r2, [r2, #12]
 8004824:	0a12      	lsrs	r2, r2, #8
 8004826:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	617b      	str	r3, [r7, #20]
      break;
 8004830:	e00c      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004832:	4a13      	ldr	r2, [pc, #76]	; (8004880 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	fbb2 f3f3 	udiv	r3, r2, r3
 800483a:	4a10      	ldr	r2, [pc, #64]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 800483c:	68d2      	ldr	r2, [r2, #12]
 800483e:	0a12      	lsrs	r2, r2, #8
 8004840:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004844:	fb02 f303 	mul.w	r3, r2, r3
 8004848:	617b      	str	r3, [r7, #20]
      break;
 800484a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	0e5b      	lsrs	r3, r3, #25
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	3301      	adds	r3, #1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	e001      	b.n	800486c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800486c:	693b      	ldr	r3, [r7, #16]
}
 800486e:	4618      	mov	r0, r3
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000
 8004880:	00f42400 	.word	0x00f42400
 8004884:	007a1200 	.word	0x007a1200

08004888 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800488c:	4b03      	ldr	r3, [pc, #12]	; (800489c <HAL_RCC_GetHCLKFreq+0x14>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20000000 	.word	0x20000000

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048a4:	f7ff fff0 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	4904      	ldr	r1, [pc, #16]	; (80048c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048b6:	5ccb      	ldrb	r3, [r1, r3]
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40021000 	.word	0x40021000
 80048c8:	0800a190 	.word	0x0800a190

080048cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048d0:	f7ff ffda 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0adb      	lsrs	r3, r3, #11
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4904      	ldr	r1, [pc, #16]	; (80048f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048e2:	5ccb      	ldrb	r3, [r1, r3]
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021000 	.word	0x40021000
 80048f4:	0800a190 	.word	0x0800a190

080048f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048fe:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	3301      	adds	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b03      	cmp	r3, #3
 800491a:	d10c      	bne.n	8004936 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800491c:	4a17      	ldr	r2, [pc, #92]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a14      	ldr	r2, [pc, #80]	; (8004978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004926:	68d2      	ldr	r2, [r2, #12]
 8004928:	0a12      	lsrs	r2, r2, #8
 800492a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	617b      	str	r3, [r7, #20]
    break;
 8004934:	e00c      	b.n	8004950 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004936:	4a12      	ldr	r2, [pc, #72]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	fbb2 f3f3 	udiv	r3, r2, r3
 800493e:	4a0e      	ldr	r2, [pc, #56]	; (8004978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004940:	68d2      	ldr	r2, [r2, #12]
 8004942:	0a12      	lsrs	r2, r2, #8
 8004944:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004948:	fb02 f303 	mul.w	r3, r2, r3
 800494c:	617b      	str	r3, [r7, #20]
    break;
 800494e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	0e5b      	lsrs	r3, r3, #25
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	3301      	adds	r3, #1
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800496a:	687b      	ldr	r3, [r7, #4]
}
 800496c:	4618      	mov	r0, r3
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	40021000 	.word	0x40021000
 800497c:	007a1200 	.word	0x007a1200
 8004980:	00f42400 	.word	0x00f42400

08004984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800498c:	2300      	movs	r3, #0
 800498e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004990:	2300      	movs	r3, #0
 8004992:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8098 	beq.w	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a2:	2300      	movs	r3, #0
 80049a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a6:	4b43      	ldr	r3, [pc, #268]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10d      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b2:	4b40      	ldr	r3, [pc, #256]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b6:	4a3f      	ldr	r2, [pc, #252]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049bc:	6593      	str	r3, [r2, #88]	; 0x58
 80049be:	4b3d      	ldr	r3, [pc, #244]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ca:	2301      	movs	r3, #1
 80049cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ce:	4b3a      	ldr	r3, [pc, #232]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a39      	ldr	r2, [pc, #228]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049da:	f7fd fc21 	bl	8002220 <HAL_GetTick>
 80049de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049e0:	e009      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e2:	f7fd fc1d 	bl	8002220 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d902      	bls.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	74fb      	strb	r3, [r7, #19]
        break;
 80049f4:	e005      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049f6:	4b30      	ldr	r3, [pc, #192]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0ef      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d159      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a08:	4b2a      	ldr	r3, [pc, #168]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01e      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d019      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a24:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a30:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a40:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	4a1b      	ldr	r2, [pc, #108]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a50:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d016      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a62:	f7fd fbdd 	bl	8002220 <HAL_GetTick>
 8004a66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a68:	e00b      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6a:	f7fd fbd9 	bl	8002220 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d902      	bls.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a80:	e006      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a82:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0ec      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a96:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	4903      	ldr	r1, [pc, #12]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004aac:	e008      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004aae:	7cfb      	ldrb	r3, [r7, #19]
 8004ab0:	74bb      	strb	r3, [r7, #18]
 8004ab2:	e005      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	7cfb      	ldrb	r3, [r7, #19]
 8004abe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ac0:	7c7b      	ldrb	r3, [r7, #17]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d105      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac6:	4ba6      	ldr	r3, [pc, #664]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	4aa5      	ldr	r2, [pc, #660]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ade:	4ba0      	ldr	r3, [pc, #640]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f023 0203 	bic.w	r2, r3, #3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	499c      	ldr	r1, [pc, #624]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b00:	4b97      	ldr	r3, [pc, #604]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f023 020c 	bic.w	r2, r3, #12
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	4994      	ldr	r1, [pc, #592]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b22:	4b8f      	ldr	r3, [pc, #572]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	498b      	ldr	r1, [pc, #556]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b44:	4b86      	ldr	r3, [pc, #536]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	4983      	ldr	r1, [pc, #524]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b66:	4b7e      	ldr	r3, [pc, #504]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	497a      	ldr	r1, [pc, #488]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b88:	4b75      	ldr	r3, [pc, #468]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	4972      	ldr	r1, [pc, #456]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004baa:	4b6d      	ldr	r3, [pc, #436]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	4969      	ldr	r1, [pc, #420]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bcc:	4b64      	ldr	r3, [pc, #400]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	4961      	ldr	r1, [pc, #388]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bee:	4b5c      	ldr	r3, [pc, #368]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	4958      	ldr	r1, [pc, #352]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d015      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c10:	4b53      	ldr	r3, [pc, #332]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	4950      	ldr	r1, [pc, #320]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c2e:	d105      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c30:	4b4b      	ldr	r3, [pc, #300]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4a4a      	ldr	r2, [pc, #296]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d015      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c48:	4b45      	ldr	r3, [pc, #276]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	4942      	ldr	r1, [pc, #264]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c66:	d105      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c68:	4b3d      	ldr	r3, [pc, #244]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4a3c      	ldr	r2, [pc, #240]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c72:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d015      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c80:	4b37      	ldr	r3, [pc, #220]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	4934      	ldr	r1, [pc, #208]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c9e:	d105      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca0:	4b2f      	ldr	r3, [pc, #188]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4a2e      	ldr	r2, [pc, #184]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004caa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d015      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cb8:	4b29      	ldr	r3, [pc, #164]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc6:	4926      	ldr	r1, [pc, #152]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd8:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ce2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d015      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	4918      	ldr	r1, [pc, #96]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d0e:	d105      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d10:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	4a12      	ldr	r2, [pc, #72]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d015      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d28:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	490a      	ldr	r1, [pc, #40]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d46:	d105      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4a04      	ldr	r2, [pc, #16]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d54:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40021000 	.word	0x40021000

08004d64 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0aa      	b.n	8004ecc <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fc fc66 	bl	8001658 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0201 	bic.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dae:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695a      	ldr	r2, [r3, #20]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dbe:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695a      	ldr	r2, [r3, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004dce:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004dd8:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004de8:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d012      	beq.n	8004e18 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d107      	bne.n	8004e0a <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e06:	609a      	str	r2, [r3, #8]
 8004e08:	e006      	b.n	8004e18 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e16:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d104      	bne.n	8004e2a <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | (hsmbus->Init.OwnAddress2Masks << 8U));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	ea42 0103 	orr.w	r1, r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	021a      	lsls	r2, r3, #8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | hsmbus->Init.AnalogFilter);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a1a      	ldr	r2, [r3, #32]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	ea42 0103 	orr.w	r1, r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e84:	d110      	bne.n	8004ea8 <HAL_SMBUS_Init+0x144>
      && ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <HAL_SMBUS_Init+0x134>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e96:	d107      	bne.n	8004ea8 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ea6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004eea:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ef4:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8004ef6:	2180      	movs	r1, #128	; 0x80
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f805 	bl	8004f08 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f2e:	2b38      	cmp	r3, #56	; 0x38
 8004f30:	d103      	bne.n	8004f3a <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004f38:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004f40:	2bf2      	cmp	r3, #242	; 0xf2
 8004f42:	d103      	bne.n	8004f4c <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004f4a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 8004f52:	2bd4      	cmp	r3, #212	; 0xd4
 8004f54:	d103      	bne.n	8004f5e <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d001      	beq.n	8004f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e04a      	b.n	800502a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a21      	ldr	r2, [pc, #132]	; (8005038 <HAL_TIM_Base_Start_IT+0xbc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d018      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbe:	d013      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a1d      	ldr	r2, [pc, #116]	; (800503c <HAL_TIM_Base_Start_IT+0xc0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00e      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <HAL_TIM_Base_Start_IT+0xc4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1a      	ldr	r2, [pc, #104]	; (8005044 <HAL_TIM_Base_Start_IT+0xc8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0x6c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a19      	ldr	r2, [pc, #100]	; (8005048 <HAL_TIM_Base_Start_IT+0xcc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d115      	bne.n	8005014 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	4b17      	ldr	r3, [pc, #92]	; (800504c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b06      	cmp	r3, #6
 8004ff8:	d015      	beq.n	8005026 <HAL_TIM_Base_Start_IT+0xaa>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005000:	d011      	beq.n	8005026 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0201 	orr.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005012:	e008      	b.n	8005026 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e000      	b.n	8005028 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005026:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40012c00 	.word	0x40012c00
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800
 8005044:	40013400 	.word	0x40013400
 8005048:	40014000 	.word	0x40014000
 800504c:	00010007 	.word	0x00010007

08005050 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e049      	b.n	80050f6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f841 	bl	80050fe <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f000 fb1c 	bl	80056cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b082      	sub	sp, #8
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e049      	b.n	80051b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7fc fecb 	bl	8001ed4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3304      	adds	r3, #4
 800514e:	4619      	mov	r1, r3
 8005150:	4610      	mov	r0, r2
 8005152:	f000 fabb 	bl	80056cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d109      	bne.n	80051e4 <HAL_TIM_PWM_Start+0x24>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	bf14      	ite	ne
 80051dc:	2301      	movne	r3, #1
 80051de:	2300      	moveq	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	e03c      	b.n	800525e <HAL_TIM_PWM_Start+0x9e>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d109      	bne.n	80051fe <HAL_TIM_PWM_Start+0x3e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	bf14      	ite	ne
 80051f6:	2301      	movne	r3, #1
 80051f8:	2300      	moveq	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	e02f      	b.n	800525e <HAL_TIM_PWM_Start+0x9e>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b08      	cmp	r3, #8
 8005202:	d109      	bne.n	8005218 <HAL_TIM_PWM_Start+0x58>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	bf14      	ite	ne
 8005210:	2301      	movne	r3, #1
 8005212:	2300      	moveq	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	e022      	b.n	800525e <HAL_TIM_PWM_Start+0x9e>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b0c      	cmp	r3, #12
 800521c:	d109      	bne.n	8005232 <HAL_TIM_PWM_Start+0x72>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b01      	cmp	r3, #1
 8005228:	bf14      	ite	ne
 800522a:	2301      	movne	r3, #1
 800522c:	2300      	moveq	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	e015      	b.n	800525e <HAL_TIM_PWM_Start+0x9e>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b10      	cmp	r3, #16
 8005236:	d109      	bne.n	800524c <HAL_TIM_PWM_Start+0x8c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e008      	b.n	800525e <HAL_TIM_PWM_Start+0x9e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	bf14      	ite	ne
 8005258:	2301      	movne	r3, #1
 800525a:	2300      	moveq	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e097      	b.n	8005396 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_TIM_PWM_Start+0xb6>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005274:	e023      	b.n	80052be <HAL_TIM_PWM_Start+0xfe>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d104      	bne.n	8005286 <HAL_TIM_PWM_Start+0xc6>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005284:	e01b      	b.n	80052be <HAL_TIM_PWM_Start+0xfe>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d104      	bne.n	8005296 <HAL_TIM_PWM_Start+0xd6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005294:	e013      	b.n	80052be <HAL_TIM_PWM_Start+0xfe>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b0c      	cmp	r3, #12
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_PWM_Start+0xe6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052a4:	e00b      	b.n	80052be <HAL_TIM_PWM_Start+0xfe>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_PWM_Start+0xf6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b4:	e003      	b.n	80052be <HAL_TIM_PWM_Start+0xfe>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2201      	movs	r2, #1
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fd86 	bl	8005dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a33      	ldr	r2, [pc, #204]	; (80053a0 <HAL_TIM_PWM_Start+0x1e0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <HAL_TIM_PWM_Start+0x13e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a32      	ldr	r2, [pc, #200]	; (80053a4 <HAL_TIM_PWM_Start+0x1e4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00e      	beq.n	80052fe <HAL_TIM_PWM_Start+0x13e>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a30      	ldr	r2, [pc, #192]	; (80053a8 <HAL_TIM_PWM_Start+0x1e8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_TIM_PWM_Start+0x13e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2f      	ldr	r2, [pc, #188]	; (80053ac <HAL_TIM_PWM_Start+0x1ec>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_TIM_PWM_Start+0x13e>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a2d      	ldr	r2, [pc, #180]	; (80053b0 <HAL_TIM_PWM_Start+0x1f0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <HAL_TIM_PWM_Start+0x142>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_TIM_PWM_Start+0x144>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005316:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a20      	ldr	r2, [pc, #128]	; (80053a0 <HAL_TIM_PWM_Start+0x1e0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d018      	beq.n	8005354 <HAL_TIM_PWM_Start+0x194>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532a:	d013      	beq.n	8005354 <HAL_TIM_PWM_Start+0x194>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a20      	ldr	r2, [pc, #128]	; (80053b4 <HAL_TIM_PWM_Start+0x1f4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00e      	beq.n	8005354 <HAL_TIM_PWM_Start+0x194>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1f      	ldr	r2, [pc, #124]	; (80053b8 <HAL_TIM_PWM_Start+0x1f8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d009      	beq.n	8005354 <HAL_TIM_PWM_Start+0x194>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a17      	ldr	r2, [pc, #92]	; (80053a4 <HAL_TIM_PWM_Start+0x1e4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <HAL_TIM_PWM_Start+0x194>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a16      	ldr	r2, [pc, #88]	; (80053a8 <HAL_TIM_PWM_Start+0x1e8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d115      	bne.n	8005380 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	4b18      	ldr	r3, [pc, #96]	; (80053bc <HAL_TIM_PWM_Start+0x1fc>)
 800535c:	4013      	ands	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b06      	cmp	r3, #6
 8005364:	d015      	beq.n	8005392 <HAL_TIM_PWM_Start+0x1d2>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536c:	d011      	beq.n	8005392 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537e:	e008      	b.n	8005392 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	e000      	b.n	8005394 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005392:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40012c00 	.word	0x40012c00
 80053a4:	40013400 	.word	0x40013400
 80053a8:	40014000 	.word	0x40014000
 80053ac:	40014400 	.word	0x40014400
 80053b0:	40014800 	.word	0x40014800
 80053b4:	40000400 	.word	0x40000400
 80053b8:	40000800 	.word	0x40000800
 80053bc:	00010007 	.word	0x00010007

080053c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_TIM_OC_ConfigChannel+0x1a>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e064      	b.n	80054a4 <HAL_TIM_OC_ConfigChannel+0xe4>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b14      	cmp	r3, #20
 80053e6:	d857      	bhi.n	8005498 <HAL_TIM_OC_ConfigChannel+0xd8>
 80053e8:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80053ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ee:	bf00      	nop
 80053f0:	08005445 	.word	0x08005445
 80053f4:	08005499 	.word	0x08005499
 80053f8:	08005499 	.word	0x08005499
 80053fc:	08005499 	.word	0x08005499
 8005400:	08005453 	.word	0x08005453
 8005404:	08005499 	.word	0x08005499
 8005408:	08005499 	.word	0x08005499
 800540c:	08005499 	.word	0x08005499
 8005410:	08005461 	.word	0x08005461
 8005414:	08005499 	.word	0x08005499
 8005418:	08005499 	.word	0x08005499
 800541c:	08005499 	.word	0x08005499
 8005420:	0800546f 	.word	0x0800546f
 8005424:	08005499 	.word	0x08005499
 8005428:	08005499 	.word	0x08005499
 800542c:	08005499 	.word	0x08005499
 8005430:	0800547d 	.word	0x0800547d
 8005434:	08005499 	.word	0x08005499
 8005438:	08005499 	.word	0x08005499
 800543c:	08005499 	.word	0x08005499
 8005440:	0800548b 	.word	0x0800548b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 f9ce 	bl	80057ec <TIM_OC1_SetConfig>
      break;
 8005450:	e023      	b.n	800549a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fa57 	bl	800590c <TIM_OC2_SetConfig>
      break;
 800545e:	e01c      	b.n	800549a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fada 	bl	8005a20 <TIM_OC3_SetConfig>
      break;
 800546c:	e015      	b.n	800549a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fb5b 	bl	8005b30 <TIM_OC4_SetConfig>
      break;
 800547a:	e00e      	b.n	800549a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fbde 	bl	8005c44 <TIM_OC5_SetConfig>
      break;
 8005488:	e007      	b.n	800549a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fc3b 	bl	8005d0c <TIM_OC6_SetConfig>
      break;
 8005496:	e000      	b.n	800549a <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8005498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e0fd      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b14      	cmp	r3, #20
 80054d2:	f200 80f0 	bhi.w	80056b6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80054d6:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	08005531 	.word	0x08005531
 80054e0:	080056b7 	.word	0x080056b7
 80054e4:	080056b7 	.word	0x080056b7
 80054e8:	080056b7 	.word	0x080056b7
 80054ec:	08005571 	.word	0x08005571
 80054f0:	080056b7 	.word	0x080056b7
 80054f4:	080056b7 	.word	0x080056b7
 80054f8:	080056b7 	.word	0x080056b7
 80054fc:	080055b3 	.word	0x080055b3
 8005500:	080056b7 	.word	0x080056b7
 8005504:	080056b7 	.word	0x080056b7
 8005508:	080056b7 	.word	0x080056b7
 800550c:	080055f3 	.word	0x080055f3
 8005510:	080056b7 	.word	0x080056b7
 8005514:	080056b7 	.word	0x080056b7
 8005518:	080056b7 	.word	0x080056b7
 800551c:	08005635 	.word	0x08005635
 8005520:	080056b7 	.word	0x080056b7
 8005524:	080056b7 	.word	0x080056b7
 8005528:	080056b7 	.word	0x080056b7
 800552c:	08005675 	.word	0x08005675
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 f958 	bl	80057ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0208 	orr.w	r2, r2, #8
 800554a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0204 	bic.w	r2, r2, #4
 800555a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6999      	ldr	r1, [r3, #24]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	619a      	str	r2, [r3, #24]
      break;
 800556e:	e0a3      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 f9c8 	bl	800590c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800558a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6999      	ldr	r1, [r3, #24]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	021a      	lsls	r2, r3, #8
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	619a      	str	r2, [r3, #24]
      break;
 80055b0:	e082      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fa31 	bl	8005a20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0208 	orr.w	r2, r2, #8
 80055cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0204 	bic.w	r2, r2, #4
 80055dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69d9      	ldr	r1, [r3, #28]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	61da      	str	r2, [r3, #28]
      break;
 80055f0:	e062      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fa99 	bl	8005b30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69d9      	ldr	r1, [r3, #28]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	021a      	lsls	r2, r3, #8
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	61da      	str	r2, [r3, #28]
      break;
 8005632:	e041      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fb02 	bl	8005c44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0208 	orr.w	r2, r2, #8
 800564e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0204 	bic.w	r2, r2, #4
 800565e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005672:	e021      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fb46 	bl	8005d0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800568e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	021a      	lsls	r2, r3, #8
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80056b4:	e000      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80056b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop

080056cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a3c      	ldr	r2, [pc, #240]	; (80057d0 <TIM_Base_SetConfig+0x104>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00f      	beq.n	8005704 <TIM_Base_SetConfig+0x38>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ea:	d00b      	beq.n	8005704 <TIM_Base_SetConfig+0x38>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a39      	ldr	r2, [pc, #228]	; (80057d4 <TIM_Base_SetConfig+0x108>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d007      	beq.n	8005704 <TIM_Base_SetConfig+0x38>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a38      	ldr	r2, [pc, #224]	; (80057d8 <TIM_Base_SetConfig+0x10c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_Base_SetConfig+0x38>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a37      	ldr	r2, [pc, #220]	; (80057dc <TIM_Base_SetConfig+0x110>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d108      	bne.n	8005716 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2d      	ldr	r2, [pc, #180]	; (80057d0 <TIM_Base_SetConfig+0x104>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01b      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005724:	d017      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2a      	ldr	r2, [pc, #168]	; (80057d4 <TIM_Base_SetConfig+0x108>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a29      	ldr	r2, [pc, #164]	; (80057d8 <TIM_Base_SetConfig+0x10c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00f      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a28      	ldr	r2, [pc, #160]	; (80057dc <TIM_Base_SetConfig+0x110>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00b      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a27      	ldr	r2, [pc, #156]	; (80057e0 <TIM_Base_SetConfig+0x114>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d007      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a26      	ldr	r2, [pc, #152]	; (80057e4 <TIM_Base_SetConfig+0x118>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a25      	ldr	r2, [pc, #148]	; (80057e8 <TIM_Base_SetConfig+0x11c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d108      	bne.n	8005768 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a10      	ldr	r2, [pc, #64]	; (80057d0 <TIM_Base_SetConfig+0x104>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00f      	beq.n	80057b4 <TIM_Base_SetConfig+0xe8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a11      	ldr	r2, [pc, #68]	; (80057dc <TIM_Base_SetConfig+0x110>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00b      	beq.n	80057b4 <TIM_Base_SetConfig+0xe8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a10      	ldr	r2, [pc, #64]	; (80057e0 <TIM_Base_SetConfig+0x114>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d007      	beq.n	80057b4 <TIM_Base_SetConfig+0xe8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a0f      	ldr	r2, [pc, #60]	; (80057e4 <TIM_Base_SetConfig+0x118>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d003      	beq.n	80057b4 <TIM_Base_SetConfig+0xe8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a0e      	ldr	r2, [pc, #56]	; (80057e8 <TIM_Base_SetConfig+0x11c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d103      	bne.n	80057bc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	615a      	str	r2, [r3, #20]
}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40012c00 	.word	0x40012c00
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40013400 	.word	0x40013400
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400
 80057e8:	40014800 	.word	0x40014800

080057ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f023 0201 	bic.w	r2, r3, #1
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0303 	bic.w	r3, r3, #3
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f023 0302 	bic.w	r3, r3, #2
 8005838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a2c      	ldr	r2, [pc, #176]	; (80058f8 <TIM_OC1_SetConfig+0x10c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00f      	beq.n	800586c <TIM_OC1_SetConfig+0x80>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a2b      	ldr	r2, [pc, #172]	; (80058fc <TIM_OC1_SetConfig+0x110>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00b      	beq.n	800586c <TIM_OC1_SetConfig+0x80>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a2a      	ldr	r2, [pc, #168]	; (8005900 <TIM_OC1_SetConfig+0x114>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d007      	beq.n	800586c <TIM_OC1_SetConfig+0x80>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a29      	ldr	r2, [pc, #164]	; (8005904 <TIM_OC1_SetConfig+0x118>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_OC1_SetConfig+0x80>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a28      	ldr	r2, [pc, #160]	; (8005908 <TIM_OC1_SetConfig+0x11c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d10c      	bne.n	8005886 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f023 0308 	bic.w	r3, r3, #8
 8005872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f023 0304 	bic.w	r3, r3, #4
 8005884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <TIM_OC1_SetConfig+0x10c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00f      	beq.n	80058ae <TIM_OC1_SetConfig+0xc2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a1a      	ldr	r2, [pc, #104]	; (80058fc <TIM_OC1_SetConfig+0x110>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00b      	beq.n	80058ae <TIM_OC1_SetConfig+0xc2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a19      	ldr	r2, [pc, #100]	; (8005900 <TIM_OC1_SetConfig+0x114>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d007      	beq.n	80058ae <TIM_OC1_SetConfig+0xc2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a18      	ldr	r2, [pc, #96]	; (8005904 <TIM_OC1_SetConfig+0x118>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d003      	beq.n	80058ae <TIM_OC1_SetConfig+0xc2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a17      	ldr	r2, [pc, #92]	; (8005908 <TIM_OC1_SetConfig+0x11c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d111      	bne.n	80058d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	621a      	str	r2, [r3, #32]
}
 80058ec:	bf00      	nop
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40013400 	.word	0x40013400
 8005900:	40014000 	.word	0x40014000
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800

0800590c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f023 0210 	bic.w	r2, r3, #16
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f023 0320 	bic.w	r3, r3, #32
 800595a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a28      	ldr	r2, [pc, #160]	; (8005a0c <TIM_OC2_SetConfig+0x100>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_OC2_SetConfig+0x6c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a27      	ldr	r2, [pc, #156]	; (8005a10 <TIM_OC2_SetConfig+0x104>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d10d      	bne.n	8005994 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800597e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005992:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a1d      	ldr	r2, [pc, #116]	; (8005a0c <TIM_OC2_SetConfig+0x100>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00f      	beq.n	80059bc <TIM_OC2_SetConfig+0xb0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a1c      	ldr	r2, [pc, #112]	; (8005a10 <TIM_OC2_SetConfig+0x104>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00b      	beq.n	80059bc <TIM_OC2_SetConfig+0xb0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a1b      	ldr	r2, [pc, #108]	; (8005a14 <TIM_OC2_SetConfig+0x108>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <TIM_OC2_SetConfig+0xb0>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a1a      	ldr	r2, [pc, #104]	; (8005a18 <TIM_OC2_SetConfig+0x10c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC2_SetConfig+0xb0>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a19      	ldr	r2, [pc, #100]	; (8005a1c <TIM_OC2_SetConfig+0x110>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d113      	bne.n	80059e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40012c00 	.word	0x40012c00
 8005a10:	40013400 	.word	0x40013400
 8005a14:	40014000 	.word	0x40014000
 8005a18:	40014400 	.word	0x40014400
 8005a1c:	40014800 	.word	0x40014800

08005a20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0303 	bic.w	r3, r3, #3
 8005a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	021b      	lsls	r3, r3, #8
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a27      	ldr	r2, [pc, #156]	; (8005b1c <TIM_OC3_SetConfig+0xfc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d003      	beq.n	8005a8a <TIM_OC3_SetConfig+0x6a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a26      	ldr	r2, [pc, #152]	; (8005b20 <TIM_OC3_SetConfig+0x100>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d10d      	bne.n	8005aa6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a1c      	ldr	r2, [pc, #112]	; (8005b1c <TIM_OC3_SetConfig+0xfc>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00f      	beq.n	8005ace <TIM_OC3_SetConfig+0xae>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a1b      	ldr	r2, [pc, #108]	; (8005b20 <TIM_OC3_SetConfig+0x100>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00b      	beq.n	8005ace <TIM_OC3_SetConfig+0xae>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a1a      	ldr	r2, [pc, #104]	; (8005b24 <TIM_OC3_SetConfig+0x104>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d007      	beq.n	8005ace <TIM_OC3_SetConfig+0xae>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a19      	ldr	r2, [pc, #100]	; (8005b28 <TIM_OC3_SetConfig+0x108>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_OC3_SetConfig+0xae>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a18      	ldr	r2, [pc, #96]	; (8005b2c <TIM_OC3_SetConfig+0x10c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d113      	bne.n	8005af6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	621a      	str	r2, [r3, #32]
}
 8005b10:	bf00      	nop
 8005b12:	371c      	adds	r7, #28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	40012c00 	.word	0x40012c00
 8005b20:	40013400 	.word	0x40013400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	40014400 	.word	0x40014400
 8005b2c:	40014800 	.word	0x40014800

08005b30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	031b      	lsls	r3, r3, #12
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a28      	ldr	r2, [pc, #160]	; (8005c30 <TIM_OC4_SetConfig+0x100>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_OC4_SetConfig+0x6c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a27      	ldr	r2, [pc, #156]	; (8005c34 <TIM_OC4_SetConfig+0x104>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d10d      	bne.n	8005bb8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	031b      	lsls	r3, r3, #12
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a1d      	ldr	r2, [pc, #116]	; (8005c30 <TIM_OC4_SetConfig+0x100>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00f      	beq.n	8005be0 <TIM_OC4_SetConfig+0xb0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a1c      	ldr	r2, [pc, #112]	; (8005c34 <TIM_OC4_SetConfig+0x104>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00b      	beq.n	8005be0 <TIM_OC4_SetConfig+0xb0>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a1b      	ldr	r2, [pc, #108]	; (8005c38 <TIM_OC4_SetConfig+0x108>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d007      	beq.n	8005be0 <TIM_OC4_SetConfig+0xb0>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a1a      	ldr	r2, [pc, #104]	; (8005c3c <TIM_OC4_SetConfig+0x10c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC4_SetConfig+0xb0>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a19      	ldr	r2, [pc, #100]	; (8005c40 <TIM_OC4_SetConfig+0x110>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d113      	bne.n	8005c08 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	019b      	lsls	r3, r3, #6
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	019b      	lsls	r3, r3, #6
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40012c00 	.word	0x40012c00
 8005c34:	40013400 	.word	0x40013400
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	40014400 	.word	0x40014400
 8005c40:	40014800 	.word	0x40014800

08005c44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <TIM_OC5_SetConfig+0xb4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00f      	beq.n	8005cbe <TIM_OC5_SetConfig+0x7a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a16      	ldr	r2, [pc, #88]	; (8005cfc <TIM_OC5_SetConfig+0xb8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00b      	beq.n	8005cbe <TIM_OC5_SetConfig+0x7a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a15      	ldr	r2, [pc, #84]	; (8005d00 <TIM_OC5_SetConfig+0xbc>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d007      	beq.n	8005cbe <TIM_OC5_SetConfig+0x7a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a14      	ldr	r2, [pc, #80]	; (8005d04 <TIM_OC5_SetConfig+0xc0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_OC5_SetConfig+0x7a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a13      	ldr	r2, [pc, #76]	; (8005d08 <TIM_OC5_SetConfig+0xc4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d109      	bne.n	8005cd2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	621a      	str	r2, [r3, #32]
}
 8005cec:	bf00      	nop
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	40012c00 	.word	0x40012c00
 8005cfc:	40013400 	.word	0x40013400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800

08005d0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	051b      	lsls	r3, r3, #20
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a18      	ldr	r2, [pc, #96]	; (8005dc4 <TIM_OC6_SetConfig+0xb8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00f      	beq.n	8005d88 <TIM_OC6_SetConfig+0x7c>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a17      	ldr	r2, [pc, #92]	; (8005dc8 <TIM_OC6_SetConfig+0xbc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00b      	beq.n	8005d88 <TIM_OC6_SetConfig+0x7c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a16      	ldr	r2, [pc, #88]	; (8005dcc <TIM_OC6_SetConfig+0xc0>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d007      	beq.n	8005d88 <TIM_OC6_SetConfig+0x7c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <TIM_OC6_SetConfig+0xc4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_OC6_SetConfig+0x7c>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a14      	ldr	r2, [pc, #80]	; (8005dd4 <TIM_OC6_SetConfig+0xc8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d109      	bne.n	8005d9c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	029b      	lsls	r3, r3, #10
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	40013400 	.word	0x40013400
 8005dcc:	40014000 	.word	0x40014000
 8005dd0:	40014400 	.word	0x40014400
 8005dd4:	40014800 	.word	0x40014800

08005dd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	2201      	movs	r2, #1
 8005dec:	fa02 f303 	lsl.w	r3, r2, r3
 8005df0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1a      	ldr	r2, [r3, #32]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	401a      	ands	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1a      	ldr	r2, [r3, #32]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e10:	431a      	orrs	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e065      	b.n	8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a2c      	ldr	r2, [pc, #176]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a2b      	ldr	r2, [pc, #172]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d108      	bne.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1b      	ldr	r2, [pc, #108]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d018      	beq.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb2:	d013      	beq.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a17      	ldr	r2, [pc, #92]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a12      	ldr	r2, [pc, #72]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d10c      	bne.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40012c00 	.word	0x40012c00
 8005f18:	40013400 	.word	0x40013400
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40014000 	.word	0x40014000

08005f28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e087      	b.n	8006054 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	041b      	lsls	r3, r3, #16
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a27      	ldr	r2, [pc, #156]	; (8006060 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a25      	ldr	r2, [pc, #148]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d106      	bne.n	8005fe0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1e      	ldr	r2, [pc, #120]	; (8006060 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d004      	beq.n	8005ff4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1d      	ldr	r2, [pc, #116]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d126      	bne.n	8006042 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	051b      	lsls	r3, r3, #20
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a0e      	ldr	r2, [pc, #56]	; (8006060 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a0d      	ldr	r2, [pc, #52]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d106      	bne.n	8006042 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	40012c00 	.word	0x40012c00
 8006064:	40013400 	.word	0x40013400

08006068 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e042      	b.n	8006100 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006080:	2b00      	cmp	r3, #0
 8006082:	d106      	bne.n	8006092 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7fb ffe3 	bl	8002058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2224      	movs	r2, #36	; 0x24
 8006096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0201 	bic.w	r2, r2, #1
 80060a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f888 	bl	80061c0 <UART_SetConfig>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e022      	b.n	8006100 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fb1a 	bl	80066fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fba1 	bl	8006840 <UART_CheckIdleState>
 80060fe:	4603      	mov	r3, r0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	4613      	mov	r3, r2
 8006114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611c:	2b20      	cmp	r3, #32
 800611e:	d131      	bne.n	8006184 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <HAL_UART_Receive_IT+0x24>
 8006126:	88fb      	ldrh	r3, [r7, #6]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e02a      	b.n	8006186 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_UART_Receive_IT+0x36>
 800613a:	2302      	movs	r3, #2
 800613c:	e023      	b.n	8006186 <HAL_UART_Receive_IT+0x7e>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a0f      	ldr	r2, [pc, #60]	; (8006190 <HAL_UART_Receive_IT+0x88>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00e      	beq.n	8006174 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006172:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	461a      	mov	r2, r3
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 fc2c 	bl	80069d8 <UART_Start_Receive_IT>
 8006180:	4603      	mov	r3, r0
 8006182:	e000      	b.n	8006186 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006184:	2302      	movs	r3, #2
  }
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	40008000 	.word	0x40008000

08006194 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c0:	b5b0      	push	{r4, r5, r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	4baf      	ldr	r3, [pc, #700]	; (80064a8 <UART_SetConfig+0x2e8>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6812      	ldr	r2, [r2, #0]
 80061f2:	69f9      	ldr	r1, [r7, #28]
 80061f4:	430b      	orrs	r3, r1
 80061f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4aa4      	ldr	r2, [pc, #656]	; (80064ac <UART_SetConfig+0x2ec>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	4313      	orrs	r3, r2
 8006226:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006232:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6812      	ldr	r2, [r2, #0]
 800623a:	69f9      	ldr	r1, [r7, #28]
 800623c:	430b      	orrs	r3, r1
 800623e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	f023 010f 	bic.w	r1, r3, #15
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a95      	ldr	r2, [pc, #596]	; (80064b0 <UART_SetConfig+0x2f0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d120      	bne.n	80062a2 <UART_SetConfig+0xe2>
 8006260:	4b94      	ldr	r3, [pc, #592]	; (80064b4 <UART_SetConfig+0x2f4>)
 8006262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	2b03      	cmp	r3, #3
 800626c:	d816      	bhi.n	800629c <UART_SetConfig+0xdc>
 800626e:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <UART_SetConfig+0xb4>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	08006285 	.word	0x08006285
 8006278:	08006291 	.word	0x08006291
 800627c:	0800628b 	.word	0x0800628b
 8006280:	08006297 	.word	0x08006297
 8006284:	2301      	movs	r3, #1
 8006286:	76fb      	strb	r3, [r7, #27]
 8006288:	e0bc      	b.n	8006404 <UART_SetConfig+0x244>
 800628a:	2302      	movs	r3, #2
 800628c:	76fb      	strb	r3, [r7, #27]
 800628e:	e0b9      	b.n	8006404 <UART_SetConfig+0x244>
 8006290:	2304      	movs	r3, #4
 8006292:	76fb      	strb	r3, [r7, #27]
 8006294:	e0b6      	b.n	8006404 <UART_SetConfig+0x244>
 8006296:	2308      	movs	r3, #8
 8006298:	76fb      	strb	r3, [r7, #27]
 800629a:	e0b3      	b.n	8006404 <UART_SetConfig+0x244>
 800629c:	2310      	movs	r3, #16
 800629e:	76fb      	strb	r3, [r7, #27]
 80062a0:	e0b0      	b.n	8006404 <UART_SetConfig+0x244>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a84      	ldr	r2, [pc, #528]	; (80064b8 <UART_SetConfig+0x2f8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d132      	bne.n	8006312 <UART_SetConfig+0x152>
 80062ac:	4b81      	ldr	r3, [pc, #516]	; (80064b4 <UART_SetConfig+0x2f4>)
 80062ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b2:	f003 030c 	and.w	r3, r3, #12
 80062b6:	2b0c      	cmp	r3, #12
 80062b8:	d828      	bhi.n	800630c <UART_SetConfig+0x14c>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <UART_SetConfig+0x100>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062f5 	.word	0x080062f5
 80062c4:	0800630d 	.word	0x0800630d
 80062c8:	0800630d 	.word	0x0800630d
 80062cc:	0800630d 	.word	0x0800630d
 80062d0:	08006301 	.word	0x08006301
 80062d4:	0800630d 	.word	0x0800630d
 80062d8:	0800630d 	.word	0x0800630d
 80062dc:	0800630d 	.word	0x0800630d
 80062e0:	080062fb 	.word	0x080062fb
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	0800630d 	.word	0x0800630d
 80062ec:	0800630d 	.word	0x0800630d
 80062f0:	08006307 	.word	0x08006307
 80062f4:	2300      	movs	r3, #0
 80062f6:	76fb      	strb	r3, [r7, #27]
 80062f8:	e084      	b.n	8006404 <UART_SetConfig+0x244>
 80062fa:	2302      	movs	r3, #2
 80062fc:	76fb      	strb	r3, [r7, #27]
 80062fe:	e081      	b.n	8006404 <UART_SetConfig+0x244>
 8006300:	2304      	movs	r3, #4
 8006302:	76fb      	strb	r3, [r7, #27]
 8006304:	e07e      	b.n	8006404 <UART_SetConfig+0x244>
 8006306:	2308      	movs	r3, #8
 8006308:	76fb      	strb	r3, [r7, #27]
 800630a:	e07b      	b.n	8006404 <UART_SetConfig+0x244>
 800630c:	2310      	movs	r3, #16
 800630e:	76fb      	strb	r3, [r7, #27]
 8006310:	e078      	b.n	8006404 <UART_SetConfig+0x244>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a69      	ldr	r2, [pc, #420]	; (80064bc <UART_SetConfig+0x2fc>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d120      	bne.n	800635e <UART_SetConfig+0x19e>
 800631c:	4b65      	ldr	r3, [pc, #404]	; (80064b4 <UART_SetConfig+0x2f4>)
 800631e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006322:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006326:	2b30      	cmp	r3, #48	; 0x30
 8006328:	d013      	beq.n	8006352 <UART_SetConfig+0x192>
 800632a:	2b30      	cmp	r3, #48	; 0x30
 800632c:	d814      	bhi.n	8006358 <UART_SetConfig+0x198>
 800632e:	2b20      	cmp	r3, #32
 8006330:	d009      	beq.n	8006346 <UART_SetConfig+0x186>
 8006332:	2b20      	cmp	r3, #32
 8006334:	d810      	bhi.n	8006358 <UART_SetConfig+0x198>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <UART_SetConfig+0x180>
 800633a:	2b10      	cmp	r3, #16
 800633c:	d006      	beq.n	800634c <UART_SetConfig+0x18c>
 800633e:	e00b      	b.n	8006358 <UART_SetConfig+0x198>
 8006340:	2300      	movs	r3, #0
 8006342:	76fb      	strb	r3, [r7, #27]
 8006344:	e05e      	b.n	8006404 <UART_SetConfig+0x244>
 8006346:	2302      	movs	r3, #2
 8006348:	76fb      	strb	r3, [r7, #27]
 800634a:	e05b      	b.n	8006404 <UART_SetConfig+0x244>
 800634c:	2304      	movs	r3, #4
 800634e:	76fb      	strb	r3, [r7, #27]
 8006350:	e058      	b.n	8006404 <UART_SetConfig+0x244>
 8006352:	2308      	movs	r3, #8
 8006354:	76fb      	strb	r3, [r7, #27]
 8006356:	e055      	b.n	8006404 <UART_SetConfig+0x244>
 8006358:	2310      	movs	r3, #16
 800635a:	76fb      	strb	r3, [r7, #27]
 800635c:	e052      	b.n	8006404 <UART_SetConfig+0x244>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a57      	ldr	r2, [pc, #348]	; (80064c0 <UART_SetConfig+0x300>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d120      	bne.n	80063aa <UART_SetConfig+0x1ea>
 8006368:	4b52      	ldr	r3, [pc, #328]	; (80064b4 <UART_SetConfig+0x2f4>)
 800636a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006372:	2bc0      	cmp	r3, #192	; 0xc0
 8006374:	d013      	beq.n	800639e <UART_SetConfig+0x1de>
 8006376:	2bc0      	cmp	r3, #192	; 0xc0
 8006378:	d814      	bhi.n	80063a4 <UART_SetConfig+0x1e4>
 800637a:	2b80      	cmp	r3, #128	; 0x80
 800637c:	d009      	beq.n	8006392 <UART_SetConfig+0x1d2>
 800637e:	2b80      	cmp	r3, #128	; 0x80
 8006380:	d810      	bhi.n	80063a4 <UART_SetConfig+0x1e4>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <UART_SetConfig+0x1cc>
 8006386:	2b40      	cmp	r3, #64	; 0x40
 8006388:	d006      	beq.n	8006398 <UART_SetConfig+0x1d8>
 800638a:	e00b      	b.n	80063a4 <UART_SetConfig+0x1e4>
 800638c:	2300      	movs	r3, #0
 800638e:	76fb      	strb	r3, [r7, #27]
 8006390:	e038      	b.n	8006404 <UART_SetConfig+0x244>
 8006392:	2302      	movs	r3, #2
 8006394:	76fb      	strb	r3, [r7, #27]
 8006396:	e035      	b.n	8006404 <UART_SetConfig+0x244>
 8006398:	2304      	movs	r3, #4
 800639a:	76fb      	strb	r3, [r7, #27]
 800639c:	e032      	b.n	8006404 <UART_SetConfig+0x244>
 800639e:	2308      	movs	r3, #8
 80063a0:	76fb      	strb	r3, [r7, #27]
 80063a2:	e02f      	b.n	8006404 <UART_SetConfig+0x244>
 80063a4:	2310      	movs	r3, #16
 80063a6:	76fb      	strb	r3, [r7, #27]
 80063a8:	e02c      	b.n	8006404 <UART_SetConfig+0x244>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a3f      	ldr	r2, [pc, #252]	; (80064ac <UART_SetConfig+0x2ec>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d125      	bne.n	8006400 <UART_SetConfig+0x240>
 80063b4:	4b3f      	ldr	r3, [pc, #252]	; (80064b4 <UART_SetConfig+0x2f4>)
 80063b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063c2:	d017      	beq.n	80063f4 <UART_SetConfig+0x234>
 80063c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063c8:	d817      	bhi.n	80063fa <UART_SetConfig+0x23a>
 80063ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ce:	d00b      	beq.n	80063e8 <UART_SetConfig+0x228>
 80063d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d4:	d811      	bhi.n	80063fa <UART_SetConfig+0x23a>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <UART_SetConfig+0x222>
 80063da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063de:	d006      	beq.n	80063ee <UART_SetConfig+0x22e>
 80063e0:	e00b      	b.n	80063fa <UART_SetConfig+0x23a>
 80063e2:	2300      	movs	r3, #0
 80063e4:	76fb      	strb	r3, [r7, #27]
 80063e6:	e00d      	b.n	8006404 <UART_SetConfig+0x244>
 80063e8:	2302      	movs	r3, #2
 80063ea:	76fb      	strb	r3, [r7, #27]
 80063ec:	e00a      	b.n	8006404 <UART_SetConfig+0x244>
 80063ee:	2304      	movs	r3, #4
 80063f0:	76fb      	strb	r3, [r7, #27]
 80063f2:	e007      	b.n	8006404 <UART_SetConfig+0x244>
 80063f4:	2308      	movs	r3, #8
 80063f6:	76fb      	strb	r3, [r7, #27]
 80063f8:	e004      	b.n	8006404 <UART_SetConfig+0x244>
 80063fa:	2310      	movs	r3, #16
 80063fc:	76fb      	strb	r3, [r7, #27]
 80063fe:	e001      	b.n	8006404 <UART_SetConfig+0x244>
 8006400:	2310      	movs	r3, #16
 8006402:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a28      	ldr	r2, [pc, #160]	; (80064ac <UART_SetConfig+0x2ec>)
 800640a:	4293      	cmp	r3, r2
 800640c:	f040 809e 	bne.w	800654c <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006410:	7efb      	ldrb	r3, [r7, #27]
 8006412:	2b08      	cmp	r3, #8
 8006414:	d823      	bhi.n	800645e <UART_SetConfig+0x29e>
 8006416:	a201      	add	r2, pc, #4	; (adr r2, 800641c <UART_SetConfig+0x25c>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006441 	.word	0x08006441
 8006420:	0800645f 	.word	0x0800645f
 8006424:	08006449 	.word	0x08006449
 8006428:	0800645f 	.word	0x0800645f
 800642c:	0800644f 	.word	0x0800644f
 8006430:	0800645f 	.word	0x0800645f
 8006434:	0800645f 	.word	0x0800645f
 8006438:	0800645f 	.word	0x0800645f
 800643c:	08006457 	.word	0x08006457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006440:	f7fe fa2e 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8006444:	6178      	str	r0, [r7, #20]
        break;
 8006446:	e00f      	b.n	8006468 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006448:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <UART_SetConfig+0x304>)
 800644a:	617b      	str	r3, [r7, #20]
        break;
 800644c:	e00c      	b.n	8006468 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800644e:	f7fe f9b9 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 8006452:	6178      	str	r0, [r7, #20]
        break;
 8006454:	e008      	b.n	8006468 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645a:	617b      	str	r3, [r7, #20]
        break;
 800645c:	e004      	b.n	8006468 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	76bb      	strb	r3, [r7, #26]
        break;
 8006466:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 812e 	beq.w	80066cc <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	4a14      	ldr	r2, [pc, #80]	; (80064c8 <UART_SetConfig+0x308>)
 8006476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800647a:	461a      	mov	r2, r3
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006482:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	4613      	mov	r3, r2
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	4413      	add	r3, r2
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	429a      	cmp	r2, r3
 8006492:	d305      	bcc.n	80064a0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	429a      	cmp	r2, r3
 800649e:	d915      	bls.n	80064cc <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	76bb      	strb	r3, [r7, #26]
 80064a4:	e112      	b.n	80066cc <UART_SetConfig+0x50c>
 80064a6:	bf00      	nop
 80064a8:	cfff69f3 	.word	0xcfff69f3
 80064ac:	40008000 	.word	0x40008000
 80064b0:	40013800 	.word	0x40013800
 80064b4:	40021000 	.word	0x40021000
 80064b8:	40004400 	.word	0x40004400
 80064bc:	40004800 	.word	0x40004800
 80064c0:	40004c00 	.word	0x40004c00
 80064c4:	00f42400 	.word	0x00f42400
 80064c8:	0800a198 	.word	0x0800a198
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f04f 0100 	mov.w	r1, #0
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	4a86      	ldr	r2, [pc, #536]	; (80066f4 <UART_SetConfig+0x534>)
 80064da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064de:	b29a      	uxth	r2, r3
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	f7fa fbd8 	bl	8000c98 <__aeabi_uldivmod>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4610      	mov	r0, r2
 80064ee:	4619      	mov	r1, r3
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	020b      	lsls	r3, r1, #8
 80064fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064fe:	0202      	lsls	r2, r0, #8
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	6849      	ldr	r1, [r1, #4]
 8006504:	0849      	lsrs	r1, r1, #1
 8006506:	4608      	mov	r0, r1
 8006508:	f04f 0100 	mov.w	r1, #0
 800650c:	1814      	adds	r4, r2, r0
 800650e:	eb43 0501 	adc.w	r5, r3, r1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	461a      	mov	r2, r3
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	4620      	mov	r0, r4
 800651e:	4629      	mov	r1, r5
 8006520:	f7fa fbba 	bl	8000c98 <__aeabi_uldivmod>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4613      	mov	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006532:	d308      	bcc.n	8006546 <UART_SetConfig+0x386>
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800653a:	d204      	bcs.n	8006546 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	60da      	str	r2, [r3, #12]
 8006544:	e0c2      	b.n	80066cc <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	76bb      	strb	r3, [r7, #26]
 800654a:	e0bf      	b.n	80066cc <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006554:	d165      	bne.n	8006622 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8006556:	7efb      	ldrb	r3, [r7, #27]
 8006558:	2b08      	cmp	r3, #8
 800655a:	d828      	bhi.n	80065ae <UART_SetConfig+0x3ee>
 800655c:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0x3a4>)
 800655e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006562:	bf00      	nop
 8006564:	08006589 	.word	0x08006589
 8006568:	08006591 	.word	0x08006591
 800656c:	08006599 	.word	0x08006599
 8006570:	080065af 	.word	0x080065af
 8006574:	0800659f 	.word	0x0800659f
 8006578:	080065af 	.word	0x080065af
 800657c:	080065af 	.word	0x080065af
 8006580:	080065af 	.word	0x080065af
 8006584:	080065a7 	.word	0x080065a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006588:	f7fe f98a 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 800658c:	6178      	str	r0, [r7, #20]
        break;
 800658e:	e013      	b.n	80065b8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006590:	f7fe f99c 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 8006594:	6178      	str	r0, [r7, #20]
        break;
 8006596:	e00f      	b.n	80065b8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006598:	4b57      	ldr	r3, [pc, #348]	; (80066f8 <UART_SetConfig+0x538>)
 800659a:	617b      	str	r3, [r7, #20]
        break;
 800659c:	e00c      	b.n	80065b8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659e:	f7fe f911 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 80065a2:	6178      	str	r0, [r7, #20]
        break;
 80065a4:	e008      	b.n	80065b8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065aa:	617b      	str	r3, [r7, #20]
        break;
 80065ac:	e004      	b.n	80065b8 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	76bb      	strb	r3, [r7, #26]
        break;
 80065b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 8086 	beq.w	80066cc <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	4a4b      	ldr	r2, [pc, #300]	; (80066f4 <UART_SetConfig+0x534>)
 80065c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065ca:	461a      	mov	r2, r3
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d2:	005a      	lsls	r2, r3, #1
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	441a      	add	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	d916      	bls.n	800661c <UART_SetConfig+0x45c>
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f4:	d212      	bcs.n	800661c <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f023 030f 	bic.w	r3, r3, #15
 80065fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	b29b      	uxth	r3, r3
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	b29a      	uxth	r2, r3
 800660c:	89fb      	ldrh	r3, [r7, #14]
 800660e:	4313      	orrs	r3, r2
 8006610:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	89fa      	ldrh	r2, [r7, #14]
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	e057      	b.n	80066cc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	76bb      	strb	r3, [r7, #26]
 8006620:	e054      	b.n	80066cc <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006622:	7efb      	ldrb	r3, [r7, #27]
 8006624:	2b08      	cmp	r3, #8
 8006626:	d828      	bhi.n	800667a <UART_SetConfig+0x4ba>
 8006628:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <UART_SetConfig+0x470>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006655 	.word	0x08006655
 8006634:	0800665d 	.word	0x0800665d
 8006638:	08006665 	.word	0x08006665
 800663c:	0800667b 	.word	0x0800667b
 8006640:	0800666b 	.word	0x0800666b
 8006644:	0800667b 	.word	0x0800667b
 8006648:	0800667b 	.word	0x0800667b
 800664c:	0800667b 	.word	0x0800667b
 8006650:	08006673 	.word	0x08006673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006654:	f7fe f924 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8006658:	6178      	str	r0, [r7, #20]
        break;
 800665a:	e013      	b.n	8006684 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800665c:	f7fe f936 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 8006660:	6178      	str	r0, [r7, #20]
        break;
 8006662:	e00f      	b.n	8006684 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006664:	4b24      	ldr	r3, [pc, #144]	; (80066f8 <UART_SetConfig+0x538>)
 8006666:	617b      	str	r3, [r7, #20]
        break;
 8006668:	e00c      	b.n	8006684 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666a:	f7fe f8ab 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 800666e:	6178      	str	r0, [r7, #20]
        break;
 8006670:	e008      	b.n	8006684 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006676:	617b      	str	r3, [r7, #20]
        break;
 8006678:	e004      	b.n	8006684 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	76bb      	strb	r3, [r7, #26]
        break;
 8006682:	bf00      	nop
    }

    if (pclk != 0U)
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d020      	beq.n	80066cc <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <UART_SetConfig+0x534>)
 8006690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006694:	461a      	mov	r2, r3
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	fbb3 f2f2 	udiv	r2, r3, r2
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	085b      	lsrs	r3, r3, #1
 80066a2:	441a      	add	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	2b0f      	cmp	r3, #15
 80066b4:	d908      	bls.n	80066c8 <UART_SetConfig+0x508>
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066bc:	d204      	bcs.n	80066c8 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	60da      	str	r2, [r3, #12]
 80066c6:	e001      	b.n	80066cc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80066e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3720      	adds	r7, #32
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bdb0      	pop	{r4, r5, r7, pc}
 80066f2:	bf00      	nop
 80066f4:	0800a198 	.word	0x0800a198
 80066f8:	00f42400 	.word	0x00f42400

080066fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00a      	beq.n	800676a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	430a      	orrs	r2, r1
 800678a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006790:	f003 0310 	and.w	r3, r3, #16
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01a      	beq.n	8006812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067fa:	d10a      	bne.n	8006812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	605a      	str	r2, [r3, #4]
  }
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af02      	add	r7, sp, #8
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006850:	f7fb fce6 	bl	8002220 <HAL_GetTick>
 8006854:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b08      	cmp	r3, #8
 8006862:	d10e      	bne.n	8006882 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f82f 	bl	80068d6 <UART_WaitOnFlagUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e025      	b.n	80068ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0304 	and.w	r3, r3, #4
 800688c:	2b04      	cmp	r3, #4
 800688e:	d10e      	bne.n	80068ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f819 	bl	80068d6 <UART_WaitOnFlagUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e00f      	b.n	80068ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	603b      	str	r3, [r7, #0]
 80068e2:	4613      	mov	r3, r2
 80068e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e6:	e062      	b.n	80069ae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ee:	d05e      	beq.n	80069ae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f0:	f7fb fc96 	bl	8002220 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d302      	bcc.n	8006906 <UART_WaitOnFlagUntilTimeout+0x30>
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d11d      	bne.n	8006942 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006914:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0201 	bic.w	r2, r2, #1
 8006924:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2220      	movs	r2, #32
 800692a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e045      	b.n	80069ce <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b00      	cmp	r3, #0
 800694e:	d02e      	beq.n	80069ae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800695a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800695e:	d126      	bne.n	80069ae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006968:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006978:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0201 	bic.w	r2, r2, #1
 8006988:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2220      	movs	r2, #32
 8006996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e00f      	b.n	80069ce <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69da      	ldr	r2, [r3, #28]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	4013      	ands	r3, r2
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	bf0c      	ite	eq
 80069be:	2301      	moveq	r3, #1
 80069c0:	2300      	movne	r3, #0
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d08d      	beq.n	80068e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	4613      	mov	r3, r2
 80069e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	88fa      	ldrh	r2, [r7, #6]
 80069f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	88fa      	ldrh	r2, [r7, #6]
 80069f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0a:	d10e      	bne.n	8006a2a <UART_Start_Receive_IT+0x52>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <UART_Start_Receive_IT+0x48>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a1e:	e02d      	b.n	8006a7c <UART_Start_Receive_IT+0xa4>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	22ff      	movs	r2, #255	; 0xff
 8006a24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a28:	e028      	b.n	8006a7c <UART_Start_Receive_IT+0xa4>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10d      	bne.n	8006a4e <UART_Start_Receive_IT+0x76>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d104      	bne.n	8006a44 <UART_Start_Receive_IT+0x6c>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	22ff      	movs	r2, #255	; 0xff
 8006a3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a42:	e01b      	b.n	8006a7c <UART_Start_Receive_IT+0xa4>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	227f      	movs	r2, #127	; 0x7f
 8006a48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a4c:	e016      	b.n	8006a7c <UART_Start_Receive_IT+0xa4>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a56:	d10d      	bne.n	8006a74 <UART_Start_Receive_IT+0x9c>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d104      	bne.n	8006a6a <UART_Start_Receive_IT+0x92>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	227f      	movs	r2, #127	; 0x7f
 8006a64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a68:	e008      	b.n	8006a7c <UART_Start_Receive_IT+0xa4>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	223f      	movs	r2, #63	; 0x3f
 8006a6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a72:	e003      	b.n	8006a7c <UART_Start_Receive_IT+0xa4>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2222      	movs	r2, #34	; 0x22
 8006a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689a      	ldr	r2, [r3, #8]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0201 	orr.w	r2, r2, #1
 8006a9a:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa4:	d12a      	bne.n	8006afc <UART_Start_Receive_IT+0x124>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006aac:	88fa      	ldrh	r2, [r7, #6]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d324      	bcc.n	8006afc <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aba:	d107      	bne.n	8006acc <UART_Start_Receive_IT+0xf4>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d103      	bne.n	8006acc <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4a1f      	ldr	r2, [pc, #124]	; (8006b44 <UART_Start_Receive_IT+0x16c>)
 8006ac8:	671a      	str	r2, [r3, #112]	; 0x70
 8006aca:	e002      	b.n	8006ad2 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a1e      	ldr	r2, [pc, #120]	; (8006b48 <UART_Start_Receive_IT+0x170>)
 8006ad0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ae8:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006af8:	609a      	str	r2, [r3, #8]
 8006afa:	e01b      	b.n	8006b34 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b04:	d107      	bne.n	8006b16 <UART_Start_Receive_IT+0x13e>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d103      	bne.n	8006b16 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4a0e      	ldr	r2, [pc, #56]	; (8006b4c <UART_Start_Receive_IT+0x174>)
 8006b12:	671a      	str	r2, [r3, #112]	; 0x70
 8006b14:	e002      	b.n	8006b1c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4a0d      	ldr	r2, [pc, #52]	; (8006b50 <UART_Start_Receive_IT+0x178>)
 8006b1a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006b32:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	08006f09 	.word	0x08006f09
 8006b48:	08006d05 	.word	0x08006d05
 8006b4c:	08006c2d 	.word	0x08006c2d
 8006b50:	08006b55 	.word	0x08006b55

08006b54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b62:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6a:	2b22      	cmp	r3, #34	; 0x22
 8006b6c:	d152      	bne.n	8006c14 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b76:	89bb      	ldrh	r3, [r7, #12]
 8006b78:	b2d9      	uxtb	r1, r3
 8006b7a:	89fb      	ldrh	r3, [r7, #14]
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b82:	400a      	ands	r2, r1
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d139      	bne.n	8006c24 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bbe:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689a      	ldr	r2, [r3, #8]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0201 	bic.w	r2, r2, #1
 8006bce:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d10f      	bne.n	8006c06 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0210 	bic.w	r2, r2, #16
 8006bf4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff fad2 	bl	80061a8 <HAL_UARTEx_RxEventCallback>
 8006c04:	e002      	b.n	8006c0c <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7fb fa6a 	bl	80020e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c12:	e007      	b.n	8006c24 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0208 	orr.w	r2, r2, #8
 8006c22:	619a      	str	r2, [r3, #24]
}
 8006c24:	bf00      	nop
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c3a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c42:	2b22      	cmp	r3, #34	; 0x22
 8006c44:	d152      	bne.n	8006cec <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c52:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c54:	89ba      	ldrh	r2, [r7, #12]
 8006c56:	89fb      	ldrh	r3, [r7, #14]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c64:	1c9a      	adds	r2, r3, #2
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b01      	subs	r3, #1
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d139      	bne.n	8006cfc <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c96:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0201 	bic.w	r2, r2, #1
 8006ca6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d10f      	bne.n	8006cde <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0210 	bic.w	r2, r2, #16
 8006ccc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff fa66 	bl	80061a8 <HAL_UARTEx_RxEventCallback>
 8006cdc:	e002      	b.n	8006ce4 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f7fb f9fe 	bl	80020e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cea:	e007      	b.n	8006cfc <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699a      	ldr	r2, [r3, #24]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0208 	orr.w	r2, r2, #8
 8006cfa:	619a      	str	r2, [r3, #24]
}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d12:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d32:	2b22      	cmp	r3, #34	; 0x22
 8006d34:	f040 80da 	bne.w	8006eec <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d3e:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d40:	e0aa      	b.n	8006e98 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d4a:	89bb      	ldrh	r3, [r7, #12]
 8006d4c:	b2d9      	uxtb	r1, r3
 8006d4e:	8b7b      	ldrh	r3, [r7, #26]
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d56:	400a      	ands	r2, r1
 8006d58:	b2d2      	uxtb	r2, r2
 8006d5a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d04d      	beq.n	8006e26 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d010      	beq.n	8006db6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2201      	movs	r2, #1
 8006da4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dac:	f043 0201 	orr.w	r2, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d010      	beq.n	8006de2 <UART_RxISR_8BIT_FIFOEN+0xde>
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00b      	beq.n	8006de2 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dd8:	f043 0204 	orr.w	r2, r3, #4
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d010      	beq.n	8006e0e <UART_RxISR_8BIT_FIFOEN+0x10a>
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00b      	beq.n	8006e0e <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2204      	movs	r2, #4
 8006dfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e04:	f043 0202 	orr.w	r2, r3, #2
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d006      	beq.n	8006e26 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff f9bb 	bl	8006194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d132      	bne.n	8006e98 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e40:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6812      	ldr	r2, [r2, #0]
 8006e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e50:	f023 0301 	bic.w	r3, r3, #1
 8006e54:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d10f      	bne.n	8006e8c <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0210 	bic.w	r2, r2, #16
 8006e7a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff f98f 	bl	80061a8 <HAL_UARTEx_RxEventCallback>
 8006e8a:	e002      	b.n	8006e92 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7fb f927 	bl	80020e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e98:	89fb      	ldrh	r3, [r7, #14]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	f003 0320 	and.w	r3, r3, #32
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f47f af4c 	bne.w	8006d42 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006eb0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006eb2:	897b      	ldrh	r3, [r7, #10]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d021      	beq.n	8006efc <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ebe:	897a      	ldrh	r2, [r7, #10]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d21b      	bcs.n	8006efc <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006ed2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a0b      	ldr	r2, [pc, #44]	; (8006f04 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8006ed8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0220 	orr.w	r2, r2, #32
 8006ee8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006eea:	e007      	b.n	8006efc <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0208 	orr.w	r2, r2, #8
 8006efa:	619a      	str	r2, [r3, #24]
}
 8006efc:	bf00      	nop
 8006efe:	3720      	adds	r7, #32
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	08006b55 	.word	0x08006b55

08006f08 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	; 0x28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f16:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f36:	2b22      	cmp	r3, #34	; 0x22
 8006f38:	f040 80da 	bne.w	80070f0 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f42:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f44:	e0aa      	b.n	800709c <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f52:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006f54:	8aba      	ldrh	r2, [r7, #20]
 8006f56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f58:	4013      	ands	r3, r2
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f64:	1c9a      	adds	r2, r3, #2
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d04d      	beq.n	800702a <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d010      	beq.n	8006fba <UART_RxISR_16BIT_FIFOEN+0xb2>
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00b      	beq.n	8006fba <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb0:	f043 0201 	orr.w	r2, r3, #1
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d010      	beq.n	8006fe6 <UART_RxISR_16BIT_FIFOEN+0xde>
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00b      	beq.n	8006fe6 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fdc:	f043 0204 	orr.w	r2, r3, #4
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d010      	beq.n	8007012 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00b      	beq.n	8007012 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2204      	movs	r2, #4
 8007000:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007008:	f043 0202 	orr.w	r2, r3, #2
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d006      	beq.n	800702a <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff f8b9 	bl	8006194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d132      	bne.n	800709c <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007044:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6812      	ldr	r2, [r2, #0]
 8007050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007054:	f023 0301 	bic.w	r3, r3, #1
 8007058:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800706c:	2b01      	cmp	r3, #1
 800706e:	d10f      	bne.n	8007090 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0210 	bic.w	r2, r2, #16
 800707e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff f88d 	bl	80061a8 <HAL_UARTEx_RxEventCallback>
 800708e:	e002      	b.n	8007096 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7fb f825 	bl	80020e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800709c:	8afb      	ldrh	r3, [r7, #22]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d005      	beq.n	80070ae <UART_RxISR_16BIT_FIFOEN+0x1a6>
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f47f af4c 	bne.w	8006f46 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070b4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80070b6:	89fb      	ldrh	r3, [r7, #14]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d021      	beq.n	8007100 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070c2:	89fa      	ldrh	r2, [r7, #14]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d21b      	bcs.n	8007100 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80070d6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a0b      	ldr	r2, [pc, #44]	; (8007108 <UART_RxISR_16BIT_FIFOEN+0x200>)
 80070dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f042 0220 	orr.w	r2, r2, #32
 80070ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070ee:	e007      	b.n	8007100 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0208 	orr.w	r2, r2, #8
 80070fe:	619a      	str	r2, [r3, #24]
}
 8007100:	bf00      	nop
 8007102:	3728      	adds	r7, #40	; 0x28
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	08006c2d 	.word	0x08006c2d

0800710c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800711a:	2b01      	cmp	r3, #1
 800711c:	d101      	bne.n	8007122 <HAL_UARTEx_DisableFifoMode+0x16>
 800711e:	2302      	movs	r3, #2
 8007120:	e027      	b.n	8007172 <HAL_UARTEx_DisableFifoMode+0x66>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2224      	movs	r2, #36	; 0x24
 800712e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0201 	bic.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007150:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2220      	movs	r2, #32
 8007164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800718e:	2b01      	cmp	r3, #1
 8007190:	d101      	bne.n	8007196 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007192:	2302      	movs	r3, #2
 8007194:	e02d      	b.n	80071f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2224      	movs	r2, #36	; 0x24
 80071a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0201 	bic.w	r2, r2, #1
 80071bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f850 	bl	8007278 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2220      	movs	r2, #32
 80071e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800720e:	2302      	movs	r3, #2
 8007210:	e02d      	b.n	800726e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2224      	movs	r2, #36	; 0x24
 800721e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0201 	bic.w	r2, r2, #1
 8007238:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f812 	bl	8007278 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2220      	movs	r2, #32
 8007260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
	...

08007278 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007284:	2b00      	cmp	r3, #0
 8007286:	d108      	bne.n	800729a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007298:	e031      	b.n	80072fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800729a:	2308      	movs	r3, #8
 800729c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800729e:	2308      	movs	r3, #8
 80072a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	0e5b      	lsrs	r3, r3, #25
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	0f5b      	lsrs	r3, r3, #29
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	7b3a      	ldrb	r2, [r7, #12]
 80072c6:	4911      	ldr	r1, [pc, #68]	; (800730c <UARTEx_SetNbDataToProcess+0x94>)
 80072c8:	5c8a      	ldrb	r2, [r1, r2]
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072ce:	7b3a      	ldrb	r2, [r7, #12]
 80072d0:	490f      	ldr	r1, [pc, #60]	; (8007310 <UARTEx_SetNbDataToProcess+0x98>)
 80072d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80072d8:	b29a      	uxth	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	7b7a      	ldrb	r2, [r7, #13]
 80072e4:	4909      	ldr	r1, [pc, #36]	; (800730c <UARTEx_SetNbDataToProcess+0x94>)
 80072e6:	5c8a      	ldrb	r2, [r1, r2]
 80072e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072ec:	7b7a      	ldrb	r2, [r7, #13]
 80072ee:	4908      	ldr	r1, [pc, #32]	; (8007310 <UARTEx_SetNbDataToProcess+0x98>)
 80072f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80072fe:	bf00      	nop
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	0800a1b0 	.word	0x0800a1b0
 8007310:	0800a1b8 	.word	0x0800a1b8
 8007314:	00000000 	.word	0x00000000

08007318 <exp>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	ed2d 8b02 	vpush	{d8}
 800731e:	ec55 4b10 	vmov	r4, r5, d0
 8007322:	f000 f849 	bl	80073b8 <__ieee754_exp>
 8007326:	4b22      	ldr	r3, [pc, #136]	; (80073b0 <exp+0x98>)
 8007328:	eeb0 8a40 	vmov.f32	s16, s0
 800732c:	eef0 8a60 	vmov.f32	s17, s1
 8007330:	f993 3000 	ldrsb.w	r3, [r3]
 8007334:	3301      	adds	r3, #1
 8007336:	d012      	beq.n	800735e <exp+0x46>
 8007338:	ec45 4b10 	vmov	d0, r4, r5
 800733c:	f000 f9b6 	bl	80076ac <finite>
 8007340:	b168      	cbz	r0, 800735e <exp+0x46>
 8007342:	a313      	add	r3, pc, #76	; (adr r3, 8007390 <exp+0x78>)
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	4620      	mov	r0, r4
 800734a:	4629      	mov	r1, r5
 800734c:	f7f9 fc0c 	bl	8000b68 <__aeabi_dcmpgt>
 8007350:	b160      	cbz	r0, 800736c <exp+0x54>
 8007352:	f000 f9b7 	bl	80076c4 <__errno>
 8007356:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8007398 <exp+0x80>
 800735a:	2322      	movs	r3, #34	; 0x22
 800735c:	6003      	str	r3, [r0, #0]
 800735e:	eeb0 0a48 	vmov.f32	s0, s16
 8007362:	eef0 0a68 	vmov.f32	s1, s17
 8007366:	ecbd 8b02 	vpop	{d8}
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	a30c      	add	r3, pc, #48	; (adr r3, 80073a0 <exp+0x88>)
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	4620      	mov	r0, r4
 8007374:	4629      	mov	r1, r5
 8007376:	f7f9 fbd9 	bl	8000b2c <__aeabi_dcmplt>
 800737a:	2800      	cmp	r0, #0
 800737c:	d0ef      	beq.n	800735e <exp+0x46>
 800737e:	f000 f9a1 	bl	80076c4 <__errno>
 8007382:	2322      	movs	r3, #34	; 0x22
 8007384:	ed9f 8b08 	vldr	d8, [pc, #32]	; 80073a8 <exp+0x90>
 8007388:	6003      	str	r3, [r0, #0]
 800738a:	e7e8      	b.n	800735e <exp+0x46>
 800738c:	f3af 8000 	nop.w
 8007390:	fefa39ef 	.word	0xfefa39ef
 8007394:	40862e42 	.word	0x40862e42
 8007398:	00000000 	.word	0x00000000
 800739c:	7ff00000 	.word	0x7ff00000
 80073a0:	d52d3051 	.word	0xd52d3051
 80073a4:	c0874910 	.word	0xc0874910
	...
 80073b0:	2000000c 	.word	0x2000000c
 80073b4:	00000000 	.word	0x00000000

080073b8 <__ieee754_exp>:
 80073b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073bc:	ec55 4b10 	vmov	r4, r5, d0
 80073c0:	49b1      	ldr	r1, [pc, #708]	; (8007688 <__ieee754_exp+0x2d0>)
 80073c2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80073c6:	428b      	cmp	r3, r1
 80073c8:	ed2d 8b04 	vpush	{d8-d9}
 80073cc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80073d0:	d937      	bls.n	8007442 <__ieee754_exp+0x8a>
 80073d2:	49ae      	ldr	r1, [pc, #696]	; (800768c <__ieee754_exp+0x2d4>)
 80073d4:	428b      	cmp	r3, r1
 80073d6:	d916      	bls.n	8007406 <__ieee754_exp+0x4e>
 80073d8:	ee10 3a10 	vmov	r3, s0
 80073dc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80073e0:	4313      	orrs	r3, r2
 80073e2:	d009      	beq.n	80073f8 <__ieee754_exp+0x40>
 80073e4:	ee10 2a10 	vmov	r2, s0
 80073e8:	462b      	mov	r3, r5
 80073ea:	4620      	mov	r0, r4
 80073ec:	4629      	mov	r1, r5
 80073ee:	f7f8 ff75 	bl	80002dc <__adddf3>
 80073f2:	4604      	mov	r4, r0
 80073f4:	460d      	mov	r5, r1
 80073f6:	e000      	b.n	80073fa <__ieee754_exp+0x42>
 80073f8:	bb06      	cbnz	r6, 800743c <__ieee754_exp+0x84>
 80073fa:	ecbd 8b04 	vpop	{d8-d9}
 80073fe:	ec45 4b10 	vmov	d0, r4, r5
 8007402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007406:	a38a      	add	r3, pc, #552	; (adr r3, 8007630 <__ieee754_exp+0x278>)
 8007408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740c:	ee10 0a10 	vmov	r0, s0
 8007410:	4629      	mov	r1, r5
 8007412:	f7f9 fba9 	bl	8000b68 <__aeabi_dcmpgt>
 8007416:	b138      	cbz	r0, 8007428 <__ieee754_exp+0x70>
 8007418:	a387      	add	r3, pc, #540	; (adr r3, 8007638 <__ieee754_exp+0x280>)
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	4610      	mov	r0, r2
 8007420:	4619      	mov	r1, r3
 8007422:	f7f9 f911 	bl	8000648 <__aeabi_dmul>
 8007426:	e7e4      	b.n	80073f2 <__ieee754_exp+0x3a>
 8007428:	a385      	add	r3, pc, #532	; (adr r3, 8007640 <__ieee754_exp+0x288>)
 800742a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742e:	4620      	mov	r0, r4
 8007430:	4629      	mov	r1, r5
 8007432:	f7f9 fb7b 	bl	8000b2c <__aeabi_dcmplt>
 8007436:	2800      	cmp	r0, #0
 8007438:	f000 8087 	beq.w	800754a <__ieee754_exp+0x192>
 800743c:	2400      	movs	r4, #0
 800743e:	2500      	movs	r5, #0
 8007440:	e7db      	b.n	80073fa <__ieee754_exp+0x42>
 8007442:	4a93      	ldr	r2, [pc, #588]	; (8007690 <__ieee754_exp+0x2d8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	f240 80ac 	bls.w	80075a2 <__ieee754_exp+0x1ea>
 800744a:	4a92      	ldr	r2, [pc, #584]	; (8007694 <__ieee754_exp+0x2dc>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d87c      	bhi.n	800754a <__ieee754_exp+0x192>
 8007450:	4b91      	ldr	r3, [pc, #580]	; (8007698 <__ieee754_exp+0x2e0>)
 8007452:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	ee10 0a10 	vmov	r0, s0
 800745e:	4629      	mov	r1, r5
 8007460:	f7f8 ff3a 	bl	80002d8 <__aeabi_dsub>
 8007464:	4b8d      	ldr	r3, [pc, #564]	; (800769c <__ieee754_exp+0x2e4>)
 8007466:	00f7      	lsls	r7, r6, #3
 8007468:	443b      	add	r3, r7
 800746a:	ed93 7b00 	vldr	d7, [r3]
 800746e:	f1c6 0a01 	rsb	sl, r6, #1
 8007472:	4680      	mov	r8, r0
 8007474:	4689      	mov	r9, r1
 8007476:	ebaa 0a06 	sub.w	sl, sl, r6
 800747a:	eeb0 8a47 	vmov.f32	s16, s14
 800747e:	eef0 8a67 	vmov.f32	s17, s15
 8007482:	ec53 2b18 	vmov	r2, r3, d8
 8007486:	4640      	mov	r0, r8
 8007488:	4649      	mov	r1, r9
 800748a:	f7f8 ff25 	bl	80002d8 <__aeabi_dsub>
 800748e:	4604      	mov	r4, r0
 8007490:	460d      	mov	r5, r1
 8007492:	4622      	mov	r2, r4
 8007494:	462b      	mov	r3, r5
 8007496:	4620      	mov	r0, r4
 8007498:	4629      	mov	r1, r5
 800749a:	f7f9 f8d5 	bl	8000648 <__aeabi_dmul>
 800749e:	a36a      	add	r3, pc, #424	; (adr r3, 8007648 <__ieee754_exp+0x290>)
 80074a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a4:	4606      	mov	r6, r0
 80074a6:	460f      	mov	r7, r1
 80074a8:	f7f9 f8ce 	bl	8000648 <__aeabi_dmul>
 80074ac:	a368      	add	r3, pc, #416	; (adr r3, 8007650 <__ieee754_exp+0x298>)
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	f7f8 ff11 	bl	80002d8 <__aeabi_dsub>
 80074b6:	4632      	mov	r2, r6
 80074b8:	463b      	mov	r3, r7
 80074ba:	f7f9 f8c5 	bl	8000648 <__aeabi_dmul>
 80074be:	a366      	add	r3, pc, #408	; (adr r3, 8007658 <__ieee754_exp+0x2a0>)
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f7f8 ff0a 	bl	80002dc <__adddf3>
 80074c8:	4632      	mov	r2, r6
 80074ca:	463b      	mov	r3, r7
 80074cc:	f7f9 f8bc 	bl	8000648 <__aeabi_dmul>
 80074d0:	a363      	add	r3, pc, #396	; (adr r3, 8007660 <__ieee754_exp+0x2a8>)
 80074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d6:	f7f8 feff 	bl	80002d8 <__aeabi_dsub>
 80074da:	4632      	mov	r2, r6
 80074dc:	463b      	mov	r3, r7
 80074de:	f7f9 f8b3 	bl	8000648 <__aeabi_dmul>
 80074e2:	a361      	add	r3, pc, #388	; (adr r3, 8007668 <__ieee754_exp+0x2b0>)
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	f7f8 fef8 	bl	80002dc <__adddf3>
 80074ec:	4632      	mov	r2, r6
 80074ee:	463b      	mov	r3, r7
 80074f0:	f7f9 f8aa 	bl	8000648 <__aeabi_dmul>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	4620      	mov	r0, r4
 80074fa:	4629      	mov	r1, r5
 80074fc:	f7f8 feec 	bl	80002d8 <__aeabi_dsub>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4606      	mov	r6, r0
 8007506:	460f      	mov	r7, r1
 8007508:	4620      	mov	r0, r4
 800750a:	4629      	mov	r1, r5
 800750c:	f7f9 f89c 	bl	8000648 <__aeabi_dmul>
 8007510:	ec41 0b19 	vmov	d9, r0, r1
 8007514:	f1ba 0f00 	cmp.w	sl, #0
 8007518:	d15d      	bne.n	80075d6 <__ieee754_exp+0x21e>
 800751a:	2200      	movs	r2, #0
 800751c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007520:	4630      	mov	r0, r6
 8007522:	4639      	mov	r1, r7
 8007524:	f7f8 fed8 	bl	80002d8 <__aeabi_dsub>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	ec51 0b19 	vmov	r0, r1, d9
 8007530:	f7f9 f9b4 	bl	800089c <__aeabi_ddiv>
 8007534:	4622      	mov	r2, r4
 8007536:	462b      	mov	r3, r5
 8007538:	f7f8 fece 	bl	80002d8 <__aeabi_dsub>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	2000      	movs	r0, #0
 8007542:	4957      	ldr	r1, [pc, #348]	; (80076a0 <__ieee754_exp+0x2e8>)
 8007544:	f7f8 fec8 	bl	80002d8 <__aeabi_dsub>
 8007548:	e753      	b.n	80073f2 <__ieee754_exp+0x3a>
 800754a:	4856      	ldr	r0, [pc, #344]	; (80076a4 <__ieee754_exp+0x2ec>)
 800754c:	a348      	add	r3, pc, #288	; (adr r3, 8007670 <__ieee754_exp+0x2b8>)
 800754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007552:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8007556:	4629      	mov	r1, r5
 8007558:	4620      	mov	r0, r4
 800755a:	f7f9 f875 	bl	8000648 <__aeabi_dmul>
 800755e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007562:	f7f8 febb 	bl	80002dc <__adddf3>
 8007566:	f7f9 fb1f 	bl	8000ba8 <__aeabi_d2iz>
 800756a:	4682      	mov	sl, r0
 800756c:	f7f9 f802 	bl	8000574 <__aeabi_i2d>
 8007570:	a341      	add	r3, pc, #260	; (adr r3, 8007678 <__ieee754_exp+0x2c0>)
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	4606      	mov	r6, r0
 8007578:	460f      	mov	r7, r1
 800757a:	f7f9 f865 	bl	8000648 <__aeabi_dmul>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	f7f8 fea7 	bl	80002d8 <__aeabi_dsub>
 800758a:	a33d      	add	r3, pc, #244	; (adr r3, 8007680 <__ieee754_exp+0x2c8>)
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	4680      	mov	r8, r0
 8007592:	4689      	mov	r9, r1
 8007594:	4630      	mov	r0, r6
 8007596:	4639      	mov	r1, r7
 8007598:	f7f9 f856 	bl	8000648 <__aeabi_dmul>
 800759c:	ec41 0b18 	vmov	d8, r0, r1
 80075a0:	e76f      	b.n	8007482 <__ieee754_exp+0xca>
 80075a2:	4a41      	ldr	r2, [pc, #260]	; (80076a8 <__ieee754_exp+0x2f0>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d811      	bhi.n	80075cc <__ieee754_exp+0x214>
 80075a8:	a323      	add	r3, pc, #140	; (adr r3, 8007638 <__ieee754_exp+0x280>)
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	ee10 0a10 	vmov	r0, s0
 80075b2:	4629      	mov	r1, r5
 80075b4:	f7f8 fe92 	bl	80002dc <__adddf3>
 80075b8:	4b39      	ldr	r3, [pc, #228]	; (80076a0 <__ieee754_exp+0x2e8>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	f7f9 fad4 	bl	8000b68 <__aeabi_dcmpgt>
 80075c0:	b138      	cbz	r0, 80075d2 <__ieee754_exp+0x21a>
 80075c2:	4b37      	ldr	r3, [pc, #220]	; (80076a0 <__ieee754_exp+0x2e8>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	4620      	mov	r0, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	e710      	b.n	80073ee <__ieee754_exp+0x36>
 80075cc:	f04f 0a00 	mov.w	sl, #0
 80075d0:	e75f      	b.n	8007492 <__ieee754_exp+0xda>
 80075d2:	4682      	mov	sl, r0
 80075d4:	e75d      	b.n	8007492 <__ieee754_exp+0xda>
 80075d6:	4632      	mov	r2, r6
 80075d8:	463b      	mov	r3, r7
 80075da:	2000      	movs	r0, #0
 80075dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80075e0:	f7f8 fe7a 	bl	80002d8 <__aeabi_dsub>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	ec51 0b19 	vmov	r0, r1, d9
 80075ec:	f7f9 f956 	bl	800089c <__aeabi_ddiv>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	ec51 0b18 	vmov	r0, r1, d8
 80075f8:	f7f8 fe6e 	bl	80002d8 <__aeabi_dsub>
 80075fc:	4642      	mov	r2, r8
 80075fe:	464b      	mov	r3, r9
 8007600:	f7f8 fe6a 	bl	80002d8 <__aeabi_dsub>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	2000      	movs	r0, #0
 800760a:	4925      	ldr	r1, [pc, #148]	; (80076a0 <__ieee754_exp+0x2e8>)
 800760c:	f7f8 fe64 	bl	80002d8 <__aeabi_dsub>
 8007610:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8007614:	4592      	cmp	sl, r2
 8007616:	db02      	blt.n	800761e <__ieee754_exp+0x266>
 8007618:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800761c:	e6e9      	b.n	80073f2 <__ieee754_exp+0x3a>
 800761e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8007622:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007626:	2200      	movs	r2, #0
 8007628:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800762c:	e6f9      	b.n	8007422 <__ieee754_exp+0x6a>
 800762e:	bf00      	nop
 8007630:	fefa39ef 	.word	0xfefa39ef
 8007634:	40862e42 	.word	0x40862e42
 8007638:	8800759c 	.word	0x8800759c
 800763c:	7e37e43c 	.word	0x7e37e43c
 8007640:	d52d3051 	.word	0xd52d3051
 8007644:	c0874910 	.word	0xc0874910
 8007648:	72bea4d0 	.word	0x72bea4d0
 800764c:	3e663769 	.word	0x3e663769
 8007650:	c5d26bf1 	.word	0xc5d26bf1
 8007654:	3ebbbd41 	.word	0x3ebbbd41
 8007658:	af25de2c 	.word	0xaf25de2c
 800765c:	3f11566a 	.word	0x3f11566a
 8007660:	16bebd93 	.word	0x16bebd93
 8007664:	3f66c16c 	.word	0x3f66c16c
 8007668:	5555553e 	.word	0x5555553e
 800766c:	3fc55555 	.word	0x3fc55555
 8007670:	652b82fe 	.word	0x652b82fe
 8007674:	3ff71547 	.word	0x3ff71547
 8007678:	fee00000 	.word	0xfee00000
 800767c:	3fe62e42 	.word	0x3fe62e42
 8007680:	35793c76 	.word	0x35793c76
 8007684:	3dea39ef 	.word	0x3dea39ef
 8007688:	40862e41 	.word	0x40862e41
 800768c:	7fefffff 	.word	0x7fefffff
 8007690:	3fd62e42 	.word	0x3fd62e42
 8007694:	3ff0a2b1 	.word	0x3ff0a2b1
 8007698:	0800a1d0 	.word	0x0800a1d0
 800769c:	0800a1e0 	.word	0x0800a1e0
 80076a0:	3ff00000 	.word	0x3ff00000
 80076a4:	0800a1c0 	.word	0x0800a1c0
 80076a8:	3e2fffff 	.word	0x3e2fffff

080076ac <finite>:
 80076ac:	b082      	sub	sp, #8
 80076ae:	ed8d 0b00 	vstr	d0, [sp]
 80076b2:	9801      	ldr	r0, [sp, #4]
 80076b4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80076b8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80076bc:	0fc0      	lsrs	r0, r0, #31
 80076be:	b002      	add	sp, #8
 80076c0:	4770      	bx	lr
	...

080076c4 <__errno>:
 80076c4:	4b01      	ldr	r3, [pc, #4]	; (80076cc <__errno+0x8>)
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	20000010 	.word	0x20000010

080076d0 <__libc_init_array>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	4d0d      	ldr	r5, [pc, #52]	; (8007708 <__libc_init_array+0x38>)
 80076d4:	4c0d      	ldr	r4, [pc, #52]	; (800770c <__libc_init_array+0x3c>)
 80076d6:	1b64      	subs	r4, r4, r5
 80076d8:	10a4      	asrs	r4, r4, #2
 80076da:	2600      	movs	r6, #0
 80076dc:	42a6      	cmp	r6, r4
 80076de:	d109      	bne.n	80076f4 <__libc_init_array+0x24>
 80076e0:	4d0b      	ldr	r5, [pc, #44]	; (8007710 <__libc_init_array+0x40>)
 80076e2:	4c0c      	ldr	r4, [pc, #48]	; (8007714 <__libc_init_array+0x44>)
 80076e4:	f002 fd40 	bl	800a168 <_init>
 80076e8:	1b64      	subs	r4, r4, r5
 80076ea:	10a4      	asrs	r4, r4, #2
 80076ec:	2600      	movs	r6, #0
 80076ee:	42a6      	cmp	r6, r4
 80076f0:	d105      	bne.n	80076fe <__libc_init_array+0x2e>
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f8:	4798      	blx	r3
 80076fa:	3601      	adds	r6, #1
 80076fc:	e7ee      	b.n	80076dc <__libc_init_array+0xc>
 80076fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007702:	4798      	blx	r3
 8007704:	3601      	adds	r6, #1
 8007706:	e7f2      	b.n	80076ee <__libc_init_array+0x1e>
 8007708:	0800a5e4 	.word	0x0800a5e4
 800770c:	0800a5e4 	.word	0x0800a5e4
 8007710:	0800a5e4 	.word	0x0800a5e4
 8007714:	0800a5e8 	.word	0x0800a5e8

08007718 <memcpy>:
 8007718:	440a      	add	r2, r1
 800771a:	4291      	cmp	r1, r2
 800771c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007720:	d100      	bne.n	8007724 <memcpy+0xc>
 8007722:	4770      	bx	lr
 8007724:	b510      	push	{r4, lr}
 8007726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800772a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800772e:	4291      	cmp	r1, r2
 8007730:	d1f9      	bne.n	8007726 <memcpy+0xe>
 8007732:	bd10      	pop	{r4, pc}

08007734 <memset>:
 8007734:	4402      	add	r2, r0
 8007736:	4603      	mov	r3, r0
 8007738:	4293      	cmp	r3, r2
 800773a:	d100      	bne.n	800773e <memset+0xa>
 800773c:	4770      	bx	lr
 800773e:	f803 1b01 	strb.w	r1, [r3], #1
 8007742:	e7f9      	b.n	8007738 <memset+0x4>

08007744 <__cvt>:
 8007744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007748:	ec55 4b10 	vmov	r4, r5, d0
 800774c:	2d00      	cmp	r5, #0
 800774e:	460e      	mov	r6, r1
 8007750:	4619      	mov	r1, r3
 8007752:	462b      	mov	r3, r5
 8007754:	bfbb      	ittet	lt
 8007756:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800775a:	461d      	movlt	r5, r3
 800775c:	2300      	movge	r3, #0
 800775e:	232d      	movlt	r3, #45	; 0x2d
 8007760:	700b      	strb	r3, [r1, #0]
 8007762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007764:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007768:	4691      	mov	r9, r2
 800776a:	f023 0820 	bic.w	r8, r3, #32
 800776e:	bfbc      	itt	lt
 8007770:	4622      	movlt	r2, r4
 8007772:	4614      	movlt	r4, r2
 8007774:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007778:	d005      	beq.n	8007786 <__cvt+0x42>
 800777a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800777e:	d100      	bne.n	8007782 <__cvt+0x3e>
 8007780:	3601      	adds	r6, #1
 8007782:	2102      	movs	r1, #2
 8007784:	e000      	b.n	8007788 <__cvt+0x44>
 8007786:	2103      	movs	r1, #3
 8007788:	ab03      	add	r3, sp, #12
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	ab02      	add	r3, sp, #8
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	ec45 4b10 	vmov	d0, r4, r5
 8007794:	4653      	mov	r3, sl
 8007796:	4632      	mov	r2, r6
 8007798:	f000 fd8a 	bl	80082b0 <_dtoa_r>
 800779c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077a0:	4607      	mov	r7, r0
 80077a2:	d102      	bne.n	80077aa <__cvt+0x66>
 80077a4:	f019 0f01 	tst.w	r9, #1
 80077a8:	d022      	beq.n	80077f0 <__cvt+0xac>
 80077aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077ae:	eb07 0906 	add.w	r9, r7, r6
 80077b2:	d110      	bne.n	80077d6 <__cvt+0x92>
 80077b4:	783b      	ldrb	r3, [r7, #0]
 80077b6:	2b30      	cmp	r3, #48	; 0x30
 80077b8:	d10a      	bne.n	80077d0 <__cvt+0x8c>
 80077ba:	2200      	movs	r2, #0
 80077bc:	2300      	movs	r3, #0
 80077be:	4620      	mov	r0, r4
 80077c0:	4629      	mov	r1, r5
 80077c2:	f7f9 f9a9 	bl	8000b18 <__aeabi_dcmpeq>
 80077c6:	b918      	cbnz	r0, 80077d0 <__cvt+0x8c>
 80077c8:	f1c6 0601 	rsb	r6, r6, #1
 80077cc:	f8ca 6000 	str.w	r6, [sl]
 80077d0:	f8da 3000 	ldr.w	r3, [sl]
 80077d4:	4499      	add	r9, r3
 80077d6:	2200      	movs	r2, #0
 80077d8:	2300      	movs	r3, #0
 80077da:	4620      	mov	r0, r4
 80077dc:	4629      	mov	r1, r5
 80077de:	f7f9 f99b 	bl	8000b18 <__aeabi_dcmpeq>
 80077e2:	b108      	cbz	r0, 80077e8 <__cvt+0xa4>
 80077e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80077e8:	2230      	movs	r2, #48	; 0x30
 80077ea:	9b03      	ldr	r3, [sp, #12]
 80077ec:	454b      	cmp	r3, r9
 80077ee:	d307      	bcc.n	8007800 <__cvt+0xbc>
 80077f0:	9b03      	ldr	r3, [sp, #12]
 80077f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077f4:	1bdb      	subs	r3, r3, r7
 80077f6:	4638      	mov	r0, r7
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	b004      	add	sp, #16
 80077fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007800:	1c59      	adds	r1, r3, #1
 8007802:	9103      	str	r1, [sp, #12]
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	e7f0      	b.n	80077ea <__cvt+0xa6>

08007808 <__exponent>:
 8007808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800780a:	4603      	mov	r3, r0
 800780c:	2900      	cmp	r1, #0
 800780e:	bfb8      	it	lt
 8007810:	4249      	neglt	r1, r1
 8007812:	f803 2b02 	strb.w	r2, [r3], #2
 8007816:	bfb4      	ite	lt
 8007818:	222d      	movlt	r2, #45	; 0x2d
 800781a:	222b      	movge	r2, #43	; 0x2b
 800781c:	2909      	cmp	r1, #9
 800781e:	7042      	strb	r2, [r0, #1]
 8007820:	dd2a      	ble.n	8007878 <__exponent+0x70>
 8007822:	f10d 0407 	add.w	r4, sp, #7
 8007826:	46a4      	mov	ip, r4
 8007828:	270a      	movs	r7, #10
 800782a:	46a6      	mov	lr, r4
 800782c:	460a      	mov	r2, r1
 800782e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007832:	fb07 1516 	mls	r5, r7, r6, r1
 8007836:	3530      	adds	r5, #48	; 0x30
 8007838:	2a63      	cmp	r2, #99	; 0x63
 800783a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800783e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007842:	4631      	mov	r1, r6
 8007844:	dcf1      	bgt.n	800782a <__exponent+0x22>
 8007846:	3130      	adds	r1, #48	; 0x30
 8007848:	f1ae 0502 	sub.w	r5, lr, #2
 800784c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007850:	1c44      	adds	r4, r0, #1
 8007852:	4629      	mov	r1, r5
 8007854:	4561      	cmp	r1, ip
 8007856:	d30a      	bcc.n	800786e <__exponent+0x66>
 8007858:	f10d 0209 	add.w	r2, sp, #9
 800785c:	eba2 020e 	sub.w	r2, r2, lr
 8007860:	4565      	cmp	r5, ip
 8007862:	bf88      	it	hi
 8007864:	2200      	movhi	r2, #0
 8007866:	4413      	add	r3, r2
 8007868:	1a18      	subs	r0, r3, r0
 800786a:	b003      	add	sp, #12
 800786c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800786e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007872:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007876:	e7ed      	b.n	8007854 <__exponent+0x4c>
 8007878:	2330      	movs	r3, #48	; 0x30
 800787a:	3130      	adds	r1, #48	; 0x30
 800787c:	7083      	strb	r3, [r0, #2]
 800787e:	70c1      	strb	r1, [r0, #3]
 8007880:	1d03      	adds	r3, r0, #4
 8007882:	e7f1      	b.n	8007868 <__exponent+0x60>

08007884 <_printf_float>:
 8007884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007888:	ed2d 8b02 	vpush	{d8}
 800788c:	b08d      	sub	sp, #52	; 0x34
 800788e:	460c      	mov	r4, r1
 8007890:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007894:	4616      	mov	r6, r2
 8007896:	461f      	mov	r7, r3
 8007898:	4605      	mov	r5, r0
 800789a:	f001 fcad 	bl	80091f8 <_localeconv_r>
 800789e:	f8d0 a000 	ldr.w	sl, [r0]
 80078a2:	4650      	mov	r0, sl
 80078a4:	f7f8 fcbc 	bl	8000220 <strlen>
 80078a8:	2300      	movs	r3, #0
 80078aa:	930a      	str	r3, [sp, #40]	; 0x28
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	9305      	str	r3, [sp, #20]
 80078b0:	f8d8 3000 	ldr.w	r3, [r8]
 80078b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80078b8:	3307      	adds	r3, #7
 80078ba:	f023 0307 	bic.w	r3, r3, #7
 80078be:	f103 0208 	add.w	r2, r3, #8
 80078c2:	f8c8 2000 	str.w	r2, [r8]
 80078c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80078ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80078d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078d6:	9307      	str	r3, [sp, #28]
 80078d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80078dc:	ee08 0a10 	vmov	s16, r0
 80078e0:	4b9f      	ldr	r3, [pc, #636]	; (8007b60 <_printf_float+0x2dc>)
 80078e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078ea:	f7f9 f947 	bl	8000b7c <__aeabi_dcmpun>
 80078ee:	bb88      	cbnz	r0, 8007954 <_printf_float+0xd0>
 80078f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078f4:	4b9a      	ldr	r3, [pc, #616]	; (8007b60 <_printf_float+0x2dc>)
 80078f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078fa:	f7f9 f921 	bl	8000b40 <__aeabi_dcmple>
 80078fe:	bb48      	cbnz	r0, 8007954 <_printf_float+0xd0>
 8007900:	2200      	movs	r2, #0
 8007902:	2300      	movs	r3, #0
 8007904:	4640      	mov	r0, r8
 8007906:	4649      	mov	r1, r9
 8007908:	f7f9 f910 	bl	8000b2c <__aeabi_dcmplt>
 800790c:	b110      	cbz	r0, 8007914 <_printf_float+0x90>
 800790e:	232d      	movs	r3, #45	; 0x2d
 8007910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007914:	4b93      	ldr	r3, [pc, #588]	; (8007b64 <_printf_float+0x2e0>)
 8007916:	4894      	ldr	r0, [pc, #592]	; (8007b68 <_printf_float+0x2e4>)
 8007918:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800791c:	bf94      	ite	ls
 800791e:	4698      	movls	r8, r3
 8007920:	4680      	movhi	r8, r0
 8007922:	2303      	movs	r3, #3
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	9b05      	ldr	r3, [sp, #20]
 8007928:	f023 0204 	bic.w	r2, r3, #4
 800792c:	6022      	str	r2, [r4, #0]
 800792e:	f04f 0900 	mov.w	r9, #0
 8007932:	9700      	str	r7, [sp, #0]
 8007934:	4633      	mov	r3, r6
 8007936:	aa0b      	add	r2, sp, #44	; 0x2c
 8007938:	4621      	mov	r1, r4
 800793a:	4628      	mov	r0, r5
 800793c:	f000 f9d8 	bl	8007cf0 <_printf_common>
 8007940:	3001      	adds	r0, #1
 8007942:	f040 8090 	bne.w	8007a66 <_printf_float+0x1e2>
 8007946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800794a:	b00d      	add	sp, #52	; 0x34
 800794c:	ecbd 8b02 	vpop	{d8}
 8007950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007954:	4642      	mov	r2, r8
 8007956:	464b      	mov	r3, r9
 8007958:	4640      	mov	r0, r8
 800795a:	4649      	mov	r1, r9
 800795c:	f7f9 f90e 	bl	8000b7c <__aeabi_dcmpun>
 8007960:	b140      	cbz	r0, 8007974 <_printf_float+0xf0>
 8007962:	464b      	mov	r3, r9
 8007964:	2b00      	cmp	r3, #0
 8007966:	bfbc      	itt	lt
 8007968:	232d      	movlt	r3, #45	; 0x2d
 800796a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800796e:	487f      	ldr	r0, [pc, #508]	; (8007b6c <_printf_float+0x2e8>)
 8007970:	4b7f      	ldr	r3, [pc, #508]	; (8007b70 <_printf_float+0x2ec>)
 8007972:	e7d1      	b.n	8007918 <_printf_float+0x94>
 8007974:	6863      	ldr	r3, [r4, #4]
 8007976:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800797a:	9206      	str	r2, [sp, #24]
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	d13f      	bne.n	8007a00 <_printf_float+0x17c>
 8007980:	2306      	movs	r3, #6
 8007982:	6063      	str	r3, [r4, #4]
 8007984:	9b05      	ldr	r3, [sp, #20]
 8007986:	6861      	ldr	r1, [r4, #4]
 8007988:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800798c:	2300      	movs	r3, #0
 800798e:	9303      	str	r3, [sp, #12]
 8007990:	ab0a      	add	r3, sp, #40	; 0x28
 8007992:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007996:	ab09      	add	r3, sp, #36	; 0x24
 8007998:	ec49 8b10 	vmov	d0, r8, r9
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	6022      	str	r2, [r4, #0]
 80079a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079a4:	4628      	mov	r0, r5
 80079a6:	f7ff fecd 	bl	8007744 <__cvt>
 80079aa:	9b06      	ldr	r3, [sp, #24]
 80079ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079ae:	2b47      	cmp	r3, #71	; 0x47
 80079b0:	4680      	mov	r8, r0
 80079b2:	d108      	bne.n	80079c6 <_printf_float+0x142>
 80079b4:	1cc8      	adds	r0, r1, #3
 80079b6:	db02      	blt.n	80079be <_printf_float+0x13a>
 80079b8:	6863      	ldr	r3, [r4, #4]
 80079ba:	4299      	cmp	r1, r3
 80079bc:	dd41      	ble.n	8007a42 <_printf_float+0x1be>
 80079be:	f1ab 0b02 	sub.w	fp, fp, #2
 80079c2:	fa5f fb8b 	uxtb.w	fp, fp
 80079c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079ca:	d820      	bhi.n	8007a0e <_printf_float+0x18a>
 80079cc:	3901      	subs	r1, #1
 80079ce:	465a      	mov	r2, fp
 80079d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079d4:	9109      	str	r1, [sp, #36]	; 0x24
 80079d6:	f7ff ff17 	bl	8007808 <__exponent>
 80079da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079dc:	1813      	adds	r3, r2, r0
 80079de:	2a01      	cmp	r2, #1
 80079e0:	4681      	mov	r9, r0
 80079e2:	6123      	str	r3, [r4, #16]
 80079e4:	dc02      	bgt.n	80079ec <_printf_float+0x168>
 80079e6:	6822      	ldr	r2, [r4, #0]
 80079e8:	07d2      	lsls	r2, r2, #31
 80079ea:	d501      	bpl.n	80079f0 <_printf_float+0x16c>
 80079ec:	3301      	adds	r3, #1
 80079ee:	6123      	str	r3, [r4, #16]
 80079f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d09c      	beq.n	8007932 <_printf_float+0xae>
 80079f8:	232d      	movs	r3, #45	; 0x2d
 80079fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079fe:	e798      	b.n	8007932 <_printf_float+0xae>
 8007a00:	9a06      	ldr	r2, [sp, #24]
 8007a02:	2a47      	cmp	r2, #71	; 0x47
 8007a04:	d1be      	bne.n	8007984 <_printf_float+0x100>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1bc      	bne.n	8007984 <_printf_float+0x100>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e7b9      	b.n	8007982 <_printf_float+0xfe>
 8007a0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a12:	d118      	bne.n	8007a46 <_printf_float+0x1c2>
 8007a14:	2900      	cmp	r1, #0
 8007a16:	6863      	ldr	r3, [r4, #4]
 8007a18:	dd0b      	ble.n	8007a32 <_printf_float+0x1ae>
 8007a1a:	6121      	str	r1, [r4, #16]
 8007a1c:	b913      	cbnz	r3, 8007a24 <_printf_float+0x1a0>
 8007a1e:	6822      	ldr	r2, [r4, #0]
 8007a20:	07d0      	lsls	r0, r2, #31
 8007a22:	d502      	bpl.n	8007a2a <_printf_float+0x1a6>
 8007a24:	3301      	adds	r3, #1
 8007a26:	440b      	add	r3, r1
 8007a28:	6123      	str	r3, [r4, #16]
 8007a2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a2c:	f04f 0900 	mov.w	r9, #0
 8007a30:	e7de      	b.n	80079f0 <_printf_float+0x16c>
 8007a32:	b913      	cbnz	r3, 8007a3a <_printf_float+0x1b6>
 8007a34:	6822      	ldr	r2, [r4, #0]
 8007a36:	07d2      	lsls	r2, r2, #31
 8007a38:	d501      	bpl.n	8007a3e <_printf_float+0x1ba>
 8007a3a:	3302      	adds	r3, #2
 8007a3c:	e7f4      	b.n	8007a28 <_printf_float+0x1a4>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e7f2      	b.n	8007a28 <_printf_float+0x1a4>
 8007a42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a48:	4299      	cmp	r1, r3
 8007a4a:	db05      	blt.n	8007a58 <_printf_float+0x1d4>
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	6121      	str	r1, [r4, #16]
 8007a50:	07d8      	lsls	r0, r3, #31
 8007a52:	d5ea      	bpl.n	8007a2a <_printf_float+0x1a6>
 8007a54:	1c4b      	adds	r3, r1, #1
 8007a56:	e7e7      	b.n	8007a28 <_printf_float+0x1a4>
 8007a58:	2900      	cmp	r1, #0
 8007a5a:	bfd4      	ite	le
 8007a5c:	f1c1 0202 	rsble	r2, r1, #2
 8007a60:	2201      	movgt	r2, #1
 8007a62:	4413      	add	r3, r2
 8007a64:	e7e0      	b.n	8007a28 <_printf_float+0x1a4>
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	055a      	lsls	r2, r3, #21
 8007a6a:	d407      	bmi.n	8007a7c <_printf_float+0x1f8>
 8007a6c:	6923      	ldr	r3, [r4, #16]
 8007a6e:	4642      	mov	r2, r8
 8007a70:	4631      	mov	r1, r6
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b8      	blx	r7
 8007a76:	3001      	adds	r0, #1
 8007a78:	d12c      	bne.n	8007ad4 <_printf_float+0x250>
 8007a7a:	e764      	b.n	8007946 <_printf_float+0xc2>
 8007a7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a80:	f240 80e0 	bls.w	8007c44 <_printf_float+0x3c0>
 8007a84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f7f9 f844 	bl	8000b18 <__aeabi_dcmpeq>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d034      	beq.n	8007afe <_printf_float+0x27a>
 8007a94:	4a37      	ldr	r2, [pc, #220]	; (8007b74 <_printf_float+0x2f0>)
 8007a96:	2301      	movs	r3, #1
 8007a98:	4631      	mov	r1, r6
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	47b8      	blx	r7
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	f43f af51 	beq.w	8007946 <_printf_float+0xc2>
 8007aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	db02      	blt.n	8007ab2 <_printf_float+0x22e>
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	07d8      	lsls	r0, r3, #31
 8007ab0:	d510      	bpl.n	8007ad4 <_printf_float+0x250>
 8007ab2:	ee18 3a10 	vmov	r3, s16
 8007ab6:	4652      	mov	r2, sl
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b8      	blx	r7
 8007abe:	3001      	adds	r0, #1
 8007ac0:	f43f af41 	beq.w	8007946 <_printf_float+0xc2>
 8007ac4:	f04f 0800 	mov.w	r8, #0
 8007ac8:	f104 091a 	add.w	r9, r4, #26
 8007acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	4543      	cmp	r3, r8
 8007ad2:	dc09      	bgt.n	8007ae8 <_printf_float+0x264>
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	079b      	lsls	r3, r3, #30
 8007ad8:	f100 8105 	bmi.w	8007ce6 <_printf_float+0x462>
 8007adc:	68e0      	ldr	r0, [r4, #12]
 8007ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae0:	4298      	cmp	r0, r3
 8007ae2:	bfb8      	it	lt
 8007ae4:	4618      	movlt	r0, r3
 8007ae6:	e730      	b.n	800794a <_printf_float+0xc6>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	464a      	mov	r2, r9
 8007aec:	4631      	mov	r1, r6
 8007aee:	4628      	mov	r0, r5
 8007af0:	47b8      	blx	r7
 8007af2:	3001      	adds	r0, #1
 8007af4:	f43f af27 	beq.w	8007946 <_printf_float+0xc2>
 8007af8:	f108 0801 	add.w	r8, r8, #1
 8007afc:	e7e6      	b.n	8007acc <_printf_float+0x248>
 8007afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	dc39      	bgt.n	8007b78 <_printf_float+0x2f4>
 8007b04:	4a1b      	ldr	r2, [pc, #108]	; (8007b74 <_printf_float+0x2f0>)
 8007b06:	2301      	movs	r3, #1
 8007b08:	4631      	mov	r1, r6
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	47b8      	blx	r7
 8007b0e:	3001      	adds	r0, #1
 8007b10:	f43f af19 	beq.w	8007946 <_printf_float+0xc2>
 8007b14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	d102      	bne.n	8007b22 <_printf_float+0x29e>
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	07d9      	lsls	r1, r3, #31
 8007b20:	d5d8      	bpl.n	8007ad4 <_printf_float+0x250>
 8007b22:	ee18 3a10 	vmov	r3, s16
 8007b26:	4652      	mov	r2, sl
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b8      	blx	r7
 8007b2e:	3001      	adds	r0, #1
 8007b30:	f43f af09 	beq.w	8007946 <_printf_float+0xc2>
 8007b34:	f04f 0900 	mov.w	r9, #0
 8007b38:	f104 0a1a 	add.w	sl, r4, #26
 8007b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b3e:	425b      	negs	r3, r3
 8007b40:	454b      	cmp	r3, r9
 8007b42:	dc01      	bgt.n	8007b48 <_printf_float+0x2c4>
 8007b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b46:	e792      	b.n	8007a6e <_printf_float+0x1ea>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	4652      	mov	r2, sl
 8007b4c:	4631      	mov	r1, r6
 8007b4e:	4628      	mov	r0, r5
 8007b50:	47b8      	blx	r7
 8007b52:	3001      	adds	r0, #1
 8007b54:	f43f aef7 	beq.w	8007946 <_printf_float+0xc2>
 8007b58:	f109 0901 	add.w	r9, r9, #1
 8007b5c:	e7ee      	b.n	8007b3c <_printf_float+0x2b8>
 8007b5e:	bf00      	nop
 8007b60:	7fefffff 	.word	0x7fefffff
 8007b64:	0800a1f4 	.word	0x0800a1f4
 8007b68:	0800a1f8 	.word	0x0800a1f8
 8007b6c:	0800a200 	.word	0x0800a200
 8007b70:	0800a1fc 	.word	0x0800a1fc
 8007b74:	0800a204 	.word	0x0800a204
 8007b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	bfa8      	it	ge
 8007b80:	461a      	movge	r2, r3
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	4691      	mov	r9, r2
 8007b86:	dc37      	bgt.n	8007bf8 <_printf_float+0x374>
 8007b88:	f04f 0b00 	mov.w	fp, #0
 8007b8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b90:	f104 021a 	add.w	r2, r4, #26
 8007b94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b96:	9305      	str	r3, [sp, #20]
 8007b98:	eba3 0309 	sub.w	r3, r3, r9
 8007b9c:	455b      	cmp	r3, fp
 8007b9e:	dc33      	bgt.n	8007c08 <_printf_float+0x384>
 8007ba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	db3b      	blt.n	8007c20 <_printf_float+0x39c>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	07da      	lsls	r2, r3, #31
 8007bac:	d438      	bmi.n	8007c20 <_printf_float+0x39c>
 8007bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bb0:	9b05      	ldr	r3, [sp, #20]
 8007bb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	eba2 0901 	sub.w	r9, r2, r1
 8007bba:	4599      	cmp	r9, r3
 8007bbc:	bfa8      	it	ge
 8007bbe:	4699      	movge	r9, r3
 8007bc0:	f1b9 0f00 	cmp.w	r9, #0
 8007bc4:	dc35      	bgt.n	8007c32 <_printf_float+0x3ae>
 8007bc6:	f04f 0800 	mov.w	r8, #0
 8007bca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bce:	f104 0a1a 	add.w	sl, r4, #26
 8007bd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bd6:	1a9b      	subs	r3, r3, r2
 8007bd8:	eba3 0309 	sub.w	r3, r3, r9
 8007bdc:	4543      	cmp	r3, r8
 8007bde:	f77f af79 	ble.w	8007ad4 <_printf_float+0x250>
 8007be2:	2301      	movs	r3, #1
 8007be4:	4652      	mov	r2, sl
 8007be6:	4631      	mov	r1, r6
 8007be8:	4628      	mov	r0, r5
 8007bea:	47b8      	blx	r7
 8007bec:	3001      	adds	r0, #1
 8007bee:	f43f aeaa 	beq.w	8007946 <_printf_float+0xc2>
 8007bf2:	f108 0801 	add.w	r8, r8, #1
 8007bf6:	e7ec      	b.n	8007bd2 <_printf_float+0x34e>
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4642      	mov	r2, r8
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b8      	blx	r7
 8007c02:	3001      	adds	r0, #1
 8007c04:	d1c0      	bne.n	8007b88 <_printf_float+0x304>
 8007c06:	e69e      	b.n	8007946 <_printf_float+0xc2>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	9205      	str	r2, [sp, #20]
 8007c10:	47b8      	blx	r7
 8007c12:	3001      	adds	r0, #1
 8007c14:	f43f ae97 	beq.w	8007946 <_printf_float+0xc2>
 8007c18:	9a05      	ldr	r2, [sp, #20]
 8007c1a:	f10b 0b01 	add.w	fp, fp, #1
 8007c1e:	e7b9      	b.n	8007b94 <_printf_float+0x310>
 8007c20:	ee18 3a10 	vmov	r3, s16
 8007c24:	4652      	mov	r2, sl
 8007c26:	4631      	mov	r1, r6
 8007c28:	4628      	mov	r0, r5
 8007c2a:	47b8      	blx	r7
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	d1be      	bne.n	8007bae <_printf_float+0x32a>
 8007c30:	e689      	b.n	8007946 <_printf_float+0xc2>
 8007c32:	9a05      	ldr	r2, [sp, #20]
 8007c34:	464b      	mov	r3, r9
 8007c36:	4442      	add	r2, r8
 8007c38:	4631      	mov	r1, r6
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	47b8      	blx	r7
 8007c3e:	3001      	adds	r0, #1
 8007c40:	d1c1      	bne.n	8007bc6 <_printf_float+0x342>
 8007c42:	e680      	b.n	8007946 <_printf_float+0xc2>
 8007c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c46:	2a01      	cmp	r2, #1
 8007c48:	dc01      	bgt.n	8007c4e <_printf_float+0x3ca>
 8007c4a:	07db      	lsls	r3, r3, #31
 8007c4c:	d538      	bpl.n	8007cc0 <_printf_float+0x43c>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	4642      	mov	r2, r8
 8007c52:	4631      	mov	r1, r6
 8007c54:	4628      	mov	r0, r5
 8007c56:	47b8      	blx	r7
 8007c58:	3001      	adds	r0, #1
 8007c5a:	f43f ae74 	beq.w	8007946 <_printf_float+0xc2>
 8007c5e:	ee18 3a10 	vmov	r3, s16
 8007c62:	4652      	mov	r2, sl
 8007c64:	4631      	mov	r1, r6
 8007c66:	4628      	mov	r0, r5
 8007c68:	47b8      	blx	r7
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	f43f ae6b 	beq.w	8007946 <_printf_float+0xc2>
 8007c70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c74:	2200      	movs	r2, #0
 8007c76:	2300      	movs	r3, #0
 8007c78:	f7f8 ff4e 	bl	8000b18 <__aeabi_dcmpeq>
 8007c7c:	b9d8      	cbnz	r0, 8007cb6 <_printf_float+0x432>
 8007c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c80:	f108 0201 	add.w	r2, r8, #1
 8007c84:	3b01      	subs	r3, #1
 8007c86:	4631      	mov	r1, r6
 8007c88:	4628      	mov	r0, r5
 8007c8a:	47b8      	blx	r7
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d10e      	bne.n	8007cae <_printf_float+0x42a>
 8007c90:	e659      	b.n	8007946 <_printf_float+0xc2>
 8007c92:	2301      	movs	r3, #1
 8007c94:	4652      	mov	r2, sl
 8007c96:	4631      	mov	r1, r6
 8007c98:	4628      	mov	r0, r5
 8007c9a:	47b8      	blx	r7
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	f43f ae52 	beq.w	8007946 <_printf_float+0xc2>
 8007ca2:	f108 0801 	add.w	r8, r8, #1
 8007ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	4543      	cmp	r3, r8
 8007cac:	dcf1      	bgt.n	8007c92 <_printf_float+0x40e>
 8007cae:	464b      	mov	r3, r9
 8007cb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cb4:	e6dc      	b.n	8007a70 <_printf_float+0x1ec>
 8007cb6:	f04f 0800 	mov.w	r8, #0
 8007cba:	f104 0a1a 	add.w	sl, r4, #26
 8007cbe:	e7f2      	b.n	8007ca6 <_printf_float+0x422>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	4642      	mov	r2, r8
 8007cc4:	e7df      	b.n	8007c86 <_printf_float+0x402>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	464a      	mov	r2, r9
 8007cca:	4631      	mov	r1, r6
 8007ccc:	4628      	mov	r0, r5
 8007cce:	47b8      	blx	r7
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	f43f ae38 	beq.w	8007946 <_printf_float+0xc2>
 8007cd6:	f108 0801 	add.w	r8, r8, #1
 8007cda:	68e3      	ldr	r3, [r4, #12]
 8007cdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cde:	1a5b      	subs	r3, r3, r1
 8007ce0:	4543      	cmp	r3, r8
 8007ce2:	dcf0      	bgt.n	8007cc6 <_printf_float+0x442>
 8007ce4:	e6fa      	b.n	8007adc <_printf_float+0x258>
 8007ce6:	f04f 0800 	mov.w	r8, #0
 8007cea:	f104 0919 	add.w	r9, r4, #25
 8007cee:	e7f4      	b.n	8007cda <_printf_float+0x456>

08007cf0 <_printf_common>:
 8007cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	4699      	mov	r9, r3
 8007cf8:	688a      	ldr	r2, [r1, #8]
 8007cfa:	690b      	ldr	r3, [r1, #16]
 8007cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d00:	4293      	cmp	r3, r2
 8007d02:	bfb8      	it	lt
 8007d04:	4613      	movlt	r3, r2
 8007d06:	6033      	str	r3, [r6, #0]
 8007d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d0c:	4607      	mov	r7, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	b10a      	cbz	r2, 8007d16 <_printf_common+0x26>
 8007d12:	3301      	adds	r3, #1
 8007d14:	6033      	str	r3, [r6, #0]
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	0699      	lsls	r1, r3, #26
 8007d1a:	bf42      	ittt	mi
 8007d1c:	6833      	ldrmi	r3, [r6, #0]
 8007d1e:	3302      	addmi	r3, #2
 8007d20:	6033      	strmi	r3, [r6, #0]
 8007d22:	6825      	ldr	r5, [r4, #0]
 8007d24:	f015 0506 	ands.w	r5, r5, #6
 8007d28:	d106      	bne.n	8007d38 <_printf_common+0x48>
 8007d2a:	f104 0a19 	add.w	sl, r4, #25
 8007d2e:	68e3      	ldr	r3, [r4, #12]
 8007d30:	6832      	ldr	r2, [r6, #0]
 8007d32:	1a9b      	subs	r3, r3, r2
 8007d34:	42ab      	cmp	r3, r5
 8007d36:	dc26      	bgt.n	8007d86 <_printf_common+0x96>
 8007d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d3c:	1e13      	subs	r3, r2, #0
 8007d3e:	6822      	ldr	r2, [r4, #0]
 8007d40:	bf18      	it	ne
 8007d42:	2301      	movne	r3, #1
 8007d44:	0692      	lsls	r2, r2, #26
 8007d46:	d42b      	bmi.n	8007da0 <_printf_common+0xb0>
 8007d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	4638      	mov	r0, r7
 8007d50:	47c0      	blx	r8
 8007d52:	3001      	adds	r0, #1
 8007d54:	d01e      	beq.n	8007d94 <_printf_common+0xa4>
 8007d56:	6823      	ldr	r3, [r4, #0]
 8007d58:	68e5      	ldr	r5, [r4, #12]
 8007d5a:	6832      	ldr	r2, [r6, #0]
 8007d5c:	f003 0306 	and.w	r3, r3, #6
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	bf08      	it	eq
 8007d64:	1aad      	subeq	r5, r5, r2
 8007d66:	68a3      	ldr	r3, [r4, #8]
 8007d68:	6922      	ldr	r2, [r4, #16]
 8007d6a:	bf0c      	ite	eq
 8007d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d70:	2500      	movne	r5, #0
 8007d72:	4293      	cmp	r3, r2
 8007d74:	bfc4      	itt	gt
 8007d76:	1a9b      	subgt	r3, r3, r2
 8007d78:	18ed      	addgt	r5, r5, r3
 8007d7a:	2600      	movs	r6, #0
 8007d7c:	341a      	adds	r4, #26
 8007d7e:	42b5      	cmp	r5, r6
 8007d80:	d11a      	bne.n	8007db8 <_printf_common+0xc8>
 8007d82:	2000      	movs	r0, #0
 8007d84:	e008      	b.n	8007d98 <_printf_common+0xa8>
 8007d86:	2301      	movs	r3, #1
 8007d88:	4652      	mov	r2, sl
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	47c0      	blx	r8
 8007d90:	3001      	adds	r0, #1
 8007d92:	d103      	bne.n	8007d9c <_printf_common+0xac>
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9c:	3501      	adds	r5, #1
 8007d9e:	e7c6      	b.n	8007d2e <_printf_common+0x3e>
 8007da0:	18e1      	adds	r1, r4, r3
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	2030      	movs	r0, #48	; 0x30
 8007da6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007daa:	4422      	add	r2, r4
 8007dac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007db4:	3302      	adds	r3, #2
 8007db6:	e7c7      	b.n	8007d48 <_printf_common+0x58>
 8007db8:	2301      	movs	r3, #1
 8007dba:	4622      	mov	r2, r4
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	47c0      	blx	r8
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	d0e6      	beq.n	8007d94 <_printf_common+0xa4>
 8007dc6:	3601      	adds	r6, #1
 8007dc8:	e7d9      	b.n	8007d7e <_printf_common+0x8e>
	...

08007dcc <_printf_i>:
 8007dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	4691      	mov	r9, r2
 8007dd4:	7e27      	ldrb	r7, [r4, #24]
 8007dd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007dd8:	2f78      	cmp	r7, #120	; 0x78
 8007dda:	4680      	mov	r8, r0
 8007ddc:	469a      	mov	sl, r3
 8007dde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007de2:	d807      	bhi.n	8007df4 <_printf_i+0x28>
 8007de4:	2f62      	cmp	r7, #98	; 0x62
 8007de6:	d80a      	bhi.n	8007dfe <_printf_i+0x32>
 8007de8:	2f00      	cmp	r7, #0
 8007dea:	f000 80d8 	beq.w	8007f9e <_printf_i+0x1d2>
 8007dee:	2f58      	cmp	r7, #88	; 0x58
 8007df0:	f000 80a3 	beq.w	8007f3a <_printf_i+0x16e>
 8007df4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007dfc:	e03a      	b.n	8007e74 <_printf_i+0xa8>
 8007dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e02:	2b15      	cmp	r3, #21
 8007e04:	d8f6      	bhi.n	8007df4 <_printf_i+0x28>
 8007e06:	a001      	add	r0, pc, #4	; (adr r0, 8007e0c <_printf_i+0x40>)
 8007e08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e0c:	08007e65 	.word	0x08007e65
 8007e10:	08007e79 	.word	0x08007e79
 8007e14:	08007df5 	.word	0x08007df5
 8007e18:	08007df5 	.word	0x08007df5
 8007e1c:	08007df5 	.word	0x08007df5
 8007e20:	08007df5 	.word	0x08007df5
 8007e24:	08007e79 	.word	0x08007e79
 8007e28:	08007df5 	.word	0x08007df5
 8007e2c:	08007df5 	.word	0x08007df5
 8007e30:	08007df5 	.word	0x08007df5
 8007e34:	08007df5 	.word	0x08007df5
 8007e38:	08007f85 	.word	0x08007f85
 8007e3c:	08007ea9 	.word	0x08007ea9
 8007e40:	08007f67 	.word	0x08007f67
 8007e44:	08007df5 	.word	0x08007df5
 8007e48:	08007df5 	.word	0x08007df5
 8007e4c:	08007fa7 	.word	0x08007fa7
 8007e50:	08007df5 	.word	0x08007df5
 8007e54:	08007ea9 	.word	0x08007ea9
 8007e58:	08007df5 	.word	0x08007df5
 8007e5c:	08007df5 	.word	0x08007df5
 8007e60:	08007f6f 	.word	0x08007f6f
 8007e64:	680b      	ldr	r3, [r1, #0]
 8007e66:	1d1a      	adds	r2, r3, #4
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	600a      	str	r2, [r1, #0]
 8007e6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e74:	2301      	movs	r3, #1
 8007e76:	e0a3      	b.n	8007fc0 <_printf_i+0x1f4>
 8007e78:	6825      	ldr	r5, [r4, #0]
 8007e7a:	6808      	ldr	r0, [r1, #0]
 8007e7c:	062e      	lsls	r6, r5, #24
 8007e7e:	f100 0304 	add.w	r3, r0, #4
 8007e82:	d50a      	bpl.n	8007e9a <_printf_i+0xce>
 8007e84:	6805      	ldr	r5, [r0, #0]
 8007e86:	600b      	str	r3, [r1, #0]
 8007e88:	2d00      	cmp	r5, #0
 8007e8a:	da03      	bge.n	8007e94 <_printf_i+0xc8>
 8007e8c:	232d      	movs	r3, #45	; 0x2d
 8007e8e:	426d      	negs	r5, r5
 8007e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e94:	485e      	ldr	r0, [pc, #376]	; (8008010 <_printf_i+0x244>)
 8007e96:	230a      	movs	r3, #10
 8007e98:	e019      	b.n	8007ece <_printf_i+0x102>
 8007e9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e9e:	6805      	ldr	r5, [r0, #0]
 8007ea0:	600b      	str	r3, [r1, #0]
 8007ea2:	bf18      	it	ne
 8007ea4:	b22d      	sxthne	r5, r5
 8007ea6:	e7ef      	b.n	8007e88 <_printf_i+0xbc>
 8007ea8:	680b      	ldr	r3, [r1, #0]
 8007eaa:	6825      	ldr	r5, [r4, #0]
 8007eac:	1d18      	adds	r0, r3, #4
 8007eae:	6008      	str	r0, [r1, #0]
 8007eb0:	0628      	lsls	r0, r5, #24
 8007eb2:	d501      	bpl.n	8007eb8 <_printf_i+0xec>
 8007eb4:	681d      	ldr	r5, [r3, #0]
 8007eb6:	e002      	b.n	8007ebe <_printf_i+0xf2>
 8007eb8:	0669      	lsls	r1, r5, #25
 8007eba:	d5fb      	bpl.n	8007eb4 <_printf_i+0xe8>
 8007ebc:	881d      	ldrh	r5, [r3, #0]
 8007ebe:	4854      	ldr	r0, [pc, #336]	; (8008010 <_printf_i+0x244>)
 8007ec0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ec2:	bf0c      	ite	eq
 8007ec4:	2308      	moveq	r3, #8
 8007ec6:	230a      	movne	r3, #10
 8007ec8:	2100      	movs	r1, #0
 8007eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ece:	6866      	ldr	r6, [r4, #4]
 8007ed0:	60a6      	str	r6, [r4, #8]
 8007ed2:	2e00      	cmp	r6, #0
 8007ed4:	bfa2      	ittt	ge
 8007ed6:	6821      	ldrge	r1, [r4, #0]
 8007ed8:	f021 0104 	bicge.w	r1, r1, #4
 8007edc:	6021      	strge	r1, [r4, #0]
 8007ede:	b90d      	cbnz	r5, 8007ee4 <_printf_i+0x118>
 8007ee0:	2e00      	cmp	r6, #0
 8007ee2:	d04d      	beq.n	8007f80 <_printf_i+0x1b4>
 8007ee4:	4616      	mov	r6, r2
 8007ee6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007eea:	fb03 5711 	mls	r7, r3, r1, r5
 8007eee:	5dc7      	ldrb	r7, [r0, r7]
 8007ef0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ef4:	462f      	mov	r7, r5
 8007ef6:	42bb      	cmp	r3, r7
 8007ef8:	460d      	mov	r5, r1
 8007efa:	d9f4      	bls.n	8007ee6 <_printf_i+0x11a>
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d10b      	bne.n	8007f18 <_printf_i+0x14c>
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	07df      	lsls	r7, r3, #31
 8007f04:	d508      	bpl.n	8007f18 <_printf_i+0x14c>
 8007f06:	6923      	ldr	r3, [r4, #16]
 8007f08:	6861      	ldr	r1, [r4, #4]
 8007f0a:	4299      	cmp	r1, r3
 8007f0c:	bfde      	ittt	le
 8007f0e:	2330      	movle	r3, #48	; 0x30
 8007f10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f14:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007f18:	1b92      	subs	r2, r2, r6
 8007f1a:	6122      	str	r2, [r4, #16]
 8007f1c:	f8cd a000 	str.w	sl, [sp]
 8007f20:	464b      	mov	r3, r9
 8007f22:	aa03      	add	r2, sp, #12
 8007f24:	4621      	mov	r1, r4
 8007f26:	4640      	mov	r0, r8
 8007f28:	f7ff fee2 	bl	8007cf0 <_printf_common>
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d14c      	bne.n	8007fca <_printf_i+0x1fe>
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f34:	b004      	add	sp, #16
 8007f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3a:	4835      	ldr	r0, [pc, #212]	; (8008010 <_printf_i+0x244>)
 8007f3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	680e      	ldr	r6, [r1, #0]
 8007f44:	061f      	lsls	r7, r3, #24
 8007f46:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f4a:	600e      	str	r6, [r1, #0]
 8007f4c:	d514      	bpl.n	8007f78 <_printf_i+0x1ac>
 8007f4e:	07d9      	lsls	r1, r3, #31
 8007f50:	bf44      	itt	mi
 8007f52:	f043 0320 	orrmi.w	r3, r3, #32
 8007f56:	6023      	strmi	r3, [r4, #0]
 8007f58:	b91d      	cbnz	r5, 8007f62 <_printf_i+0x196>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	f023 0320 	bic.w	r3, r3, #32
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	2310      	movs	r3, #16
 8007f64:	e7b0      	b.n	8007ec8 <_printf_i+0xfc>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	f043 0320 	orr.w	r3, r3, #32
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	2378      	movs	r3, #120	; 0x78
 8007f70:	4828      	ldr	r0, [pc, #160]	; (8008014 <_printf_i+0x248>)
 8007f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f76:	e7e3      	b.n	8007f40 <_printf_i+0x174>
 8007f78:	065e      	lsls	r6, r3, #25
 8007f7a:	bf48      	it	mi
 8007f7c:	b2ad      	uxthmi	r5, r5
 8007f7e:	e7e6      	b.n	8007f4e <_printf_i+0x182>
 8007f80:	4616      	mov	r6, r2
 8007f82:	e7bb      	b.n	8007efc <_printf_i+0x130>
 8007f84:	680b      	ldr	r3, [r1, #0]
 8007f86:	6826      	ldr	r6, [r4, #0]
 8007f88:	6960      	ldr	r0, [r4, #20]
 8007f8a:	1d1d      	adds	r5, r3, #4
 8007f8c:	600d      	str	r5, [r1, #0]
 8007f8e:	0635      	lsls	r5, r6, #24
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	d501      	bpl.n	8007f98 <_printf_i+0x1cc>
 8007f94:	6018      	str	r0, [r3, #0]
 8007f96:	e002      	b.n	8007f9e <_printf_i+0x1d2>
 8007f98:	0671      	lsls	r1, r6, #25
 8007f9a:	d5fb      	bpl.n	8007f94 <_printf_i+0x1c8>
 8007f9c:	8018      	strh	r0, [r3, #0]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	6123      	str	r3, [r4, #16]
 8007fa2:	4616      	mov	r6, r2
 8007fa4:	e7ba      	b.n	8007f1c <_printf_i+0x150>
 8007fa6:	680b      	ldr	r3, [r1, #0]
 8007fa8:	1d1a      	adds	r2, r3, #4
 8007faa:	600a      	str	r2, [r1, #0]
 8007fac:	681e      	ldr	r6, [r3, #0]
 8007fae:	6862      	ldr	r2, [r4, #4]
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f7f8 f93c 	bl	8000230 <memchr>
 8007fb8:	b108      	cbz	r0, 8007fbe <_printf_i+0x1f2>
 8007fba:	1b80      	subs	r0, r0, r6
 8007fbc:	6060      	str	r0, [r4, #4]
 8007fbe:	6863      	ldr	r3, [r4, #4]
 8007fc0:	6123      	str	r3, [r4, #16]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc8:	e7a8      	b.n	8007f1c <_printf_i+0x150>
 8007fca:	6923      	ldr	r3, [r4, #16]
 8007fcc:	4632      	mov	r2, r6
 8007fce:	4649      	mov	r1, r9
 8007fd0:	4640      	mov	r0, r8
 8007fd2:	47d0      	blx	sl
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d0ab      	beq.n	8007f30 <_printf_i+0x164>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	079b      	lsls	r3, r3, #30
 8007fdc:	d413      	bmi.n	8008006 <_printf_i+0x23a>
 8007fde:	68e0      	ldr	r0, [r4, #12]
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	4298      	cmp	r0, r3
 8007fe4:	bfb8      	it	lt
 8007fe6:	4618      	movlt	r0, r3
 8007fe8:	e7a4      	b.n	8007f34 <_printf_i+0x168>
 8007fea:	2301      	movs	r3, #1
 8007fec:	4632      	mov	r2, r6
 8007fee:	4649      	mov	r1, r9
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	47d0      	blx	sl
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d09b      	beq.n	8007f30 <_printf_i+0x164>
 8007ff8:	3501      	adds	r5, #1
 8007ffa:	68e3      	ldr	r3, [r4, #12]
 8007ffc:	9903      	ldr	r1, [sp, #12]
 8007ffe:	1a5b      	subs	r3, r3, r1
 8008000:	42ab      	cmp	r3, r5
 8008002:	dcf2      	bgt.n	8007fea <_printf_i+0x21e>
 8008004:	e7eb      	b.n	8007fde <_printf_i+0x212>
 8008006:	2500      	movs	r5, #0
 8008008:	f104 0619 	add.w	r6, r4, #25
 800800c:	e7f5      	b.n	8007ffa <_printf_i+0x22e>
 800800e:	bf00      	nop
 8008010:	0800a206 	.word	0x0800a206
 8008014:	0800a217 	.word	0x0800a217

08008018 <__swbuf_r>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	460e      	mov	r6, r1
 800801c:	4614      	mov	r4, r2
 800801e:	4605      	mov	r5, r0
 8008020:	b118      	cbz	r0, 800802a <__swbuf_r+0x12>
 8008022:	6983      	ldr	r3, [r0, #24]
 8008024:	b90b      	cbnz	r3, 800802a <__swbuf_r+0x12>
 8008026:	f001 f849 	bl	80090bc <__sinit>
 800802a:	4b21      	ldr	r3, [pc, #132]	; (80080b0 <__swbuf_r+0x98>)
 800802c:	429c      	cmp	r4, r3
 800802e:	d12b      	bne.n	8008088 <__swbuf_r+0x70>
 8008030:	686c      	ldr	r4, [r5, #4]
 8008032:	69a3      	ldr	r3, [r4, #24]
 8008034:	60a3      	str	r3, [r4, #8]
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	071a      	lsls	r2, r3, #28
 800803a:	d52f      	bpl.n	800809c <__swbuf_r+0x84>
 800803c:	6923      	ldr	r3, [r4, #16]
 800803e:	b36b      	cbz	r3, 800809c <__swbuf_r+0x84>
 8008040:	6923      	ldr	r3, [r4, #16]
 8008042:	6820      	ldr	r0, [r4, #0]
 8008044:	1ac0      	subs	r0, r0, r3
 8008046:	6963      	ldr	r3, [r4, #20]
 8008048:	b2f6      	uxtb	r6, r6
 800804a:	4283      	cmp	r3, r0
 800804c:	4637      	mov	r7, r6
 800804e:	dc04      	bgt.n	800805a <__swbuf_r+0x42>
 8008050:	4621      	mov	r1, r4
 8008052:	4628      	mov	r0, r5
 8008054:	f000 ff9e 	bl	8008f94 <_fflush_r>
 8008058:	bb30      	cbnz	r0, 80080a8 <__swbuf_r+0x90>
 800805a:	68a3      	ldr	r3, [r4, #8]
 800805c:	3b01      	subs	r3, #1
 800805e:	60a3      	str	r3, [r4, #8]
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	6022      	str	r2, [r4, #0]
 8008066:	701e      	strb	r6, [r3, #0]
 8008068:	6963      	ldr	r3, [r4, #20]
 800806a:	3001      	adds	r0, #1
 800806c:	4283      	cmp	r3, r0
 800806e:	d004      	beq.n	800807a <__swbuf_r+0x62>
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	07db      	lsls	r3, r3, #31
 8008074:	d506      	bpl.n	8008084 <__swbuf_r+0x6c>
 8008076:	2e0a      	cmp	r6, #10
 8008078:	d104      	bne.n	8008084 <__swbuf_r+0x6c>
 800807a:	4621      	mov	r1, r4
 800807c:	4628      	mov	r0, r5
 800807e:	f000 ff89 	bl	8008f94 <_fflush_r>
 8008082:	b988      	cbnz	r0, 80080a8 <__swbuf_r+0x90>
 8008084:	4638      	mov	r0, r7
 8008086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008088:	4b0a      	ldr	r3, [pc, #40]	; (80080b4 <__swbuf_r+0x9c>)
 800808a:	429c      	cmp	r4, r3
 800808c:	d101      	bne.n	8008092 <__swbuf_r+0x7a>
 800808e:	68ac      	ldr	r4, [r5, #8]
 8008090:	e7cf      	b.n	8008032 <__swbuf_r+0x1a>
 8008092:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <__swbuf_r+0xa0>)
 8008094:	429c      	cmp	r4, r3
 8008096:	bf08      	it	eq
 8008098:	68ec      	ldreq	r4, [r5, #12]
 800809a:	e7ca      	b.n	8008032 <__swbuf_r+0x1a>
 800809c:	4621      	mov	r1, r4
 800809e:	4628      	mov	r0, r5
 80080a0:	f000 f80c 	bl	80080bc <__swsetup_r>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d0cb      	beq.n	8008040 <__swbuf_r+0x28>
 80080a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80080ac:	e7ea      	b.n	8008084 <__swbuf_r+0x6c>
 80080ae:	bf00      	nop
 80080b0:	0800a3e0 	.word	0x0800a3e0
 80080b4:	0800a400 	.word	0x0800a400
 80080b8:	0800a3c0 	.word	0x0800a3c0

080080bc <__swsetup_r>:
 80080bc:	4b32      	ldr	r3, [pc, #200]	; (8008188 <__swsetup_r+0xcc>)
 80080be:	b570      	push	{r4, r5, r6, lr}
 80080c0:	681d      	ldr	r5, [r3, #0]
 80080c2:	4606      	mov	r6, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	b125      	cbz	r5, 80080d2 <__swsetup_r+0x16>
 80080c8:	69ab      	ldr	r3, [r5, #24]
 80080ca:	b913      	cbnz	r3, 80080d2 <__swsetup_r+0x16>
 80080cc:	4628      	mov	r0, r5
 80080ce:	f000 fff5 	bl	80090bc <__sinit>
 80080d2:	4b2e      	ldr	r3, [pc, #184]	; (800818c <__swsetup_r+0xd0>)
 80080d4:	429c      	cmp	r4, r3
 80080d6:	d10f      	bne.n	80080f8 <__swsetup_r+0x3c>
 80080d8:	686c      	ldr	r4, [r5, #4]
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080e0:	0719      	lsls	r1, r3, #28
 80080e2:	d42c      	bmi.n	800813e <__swsetup_r+0x82>
 80080e4:	06dd      	lsls	r5, r3, #27
 80080e6:	d411      	bmi.n	800810c <__swsetup_r+0x50>
 80080e8:	2309      	movs	r3, #9
 80080ea:	6033      	str	r3, [r6, #0]
 80080ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080f0:	81a3      	strh	r3, [r4, #12]
 80080f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080f6:	e03e      	b.n	8008176 <__swsetup_r+0xba>
 80080f8:	4b25      	ldr	r3, [pc, #148]	; (8008190 <__swsetup_r+0xd4>)
 80080fa:	429c      	cmp	r4, r3
 80080fc:	d101      	bne.n	8008102 <__swsetup_r+0x46>
 80080fe:	68ac      	ldr	r4, [r5, #8]
 8008100:	e7eb      	b.n	80080da <__swsetup_r+0x1e>
 8008102:	4b24      	ldr	r3, [pc, #144]	; (8008194 <__swsetup_r+0xd8>)
 8008104:	429c      	cmp	r4, r3
 8008106:	bf08      	it	eq
 8008108:	68ec      	ldreq	r4, [r5, #12]
 800810a:	e7e6      	b.n	80080da <__swsetup_r+0x1e>
 800810c:	0758      	lsls	r0, r3, #29
 800810e:	d512      	bpl.n	8008136 <__swsetup_r+0x7a>
 8008110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008112:	b141      	cbz	r1, 8008126 <__swsetup_r+0x6a>
 8008114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008118:	4299      	cmp	r1, r3
 800811a:	d002      	beq.n	8008122 <__swsetup_r+0x66>
 800811c:	4630      	mov	r0, r6
 800811e:	f001 fc7f 	bl	8009a20 <_free_r>
 8008122:	2300      	movs	r3, #0
 8008124:	6363      	str	r3, [r4, #52]	; 0x34
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800812c:	81a3      	strh	r3, [r4, #12]
 800812e:	2300      	movs	r3, #0
 8008130:	6063      	str	r3, [r4, #4]
 8008132:	6923      	ldr	r3, [r4, #16]
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	f043 0308 	orr.w	r3, r3, #8
 800813c:	81a3      	strh	r3, [r4, #12]
 800813e:	6923      	ldr	r3, [r4, #16]
 8008140:	b94b      	cbnz	r3, 8008156 <__swsetup_r+0x9a>
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800814c:	d003      	beq.n	8008156 <__swsetup_r+0x9a>
 800814e:	4621      	mov	r1, r4
 8008150:	4630      	mov	r0, r6
 8008152:	f001 f87d 	bl	8009250 <__smakebuf_r>
 8008156:	89a0      	ldrh	r0, [r4, #12]
 8008158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800815c:	f010 0301 	ands.w	r3, r0, #1
 8008160:	d00a      	beq.n	8008178 <__swsetup_r+0xbc>
 8008162:	2300      	movs	r3, #0
 8008164:	60a3      	str	r3, [r4, #8]
 8008166:	6963      	ldr	r3, [r4, #20]
 8008168:	425b      	negs	r3, r3
 800816a:	61a3      	str	r3, [r4, #24]
 800816c:	6923      	ldr	r3, [r4, #16]
 800816e:	b943      	cbnz	r3, 8008182 <__swsetup_r+0xc6>
 8008170:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008174:	d1ba      	bne.n	80080ec <__swsetup_r+0x30>
 8008176:	bd70      	pop	{r4, r5, r6, pc}
 8008178:	0781      	lsls	r1, r0, #30
 800817a:	bf58      	it	pl
 800817c:	6963      	ldrpl	r3, [r4, #20]
 800817e:	60a3      	str	r3, [r4, #8]
 8008180:	e7f4      	b.n	800816c <__swsetup_r+0xb0>
 8008182:	2000      	movs	r0, #0
 8008184:	e7f7      	b.n	8008176 <__swsetup_r+0xba>
 8008186:	bf00      	nop
 8008188:	20000010 	.word	0x20000010
 800818c:	0800a3e0 	.word	0x0800a3e0
 8008190:	0800a400 	.word	0x0800a400
 8008194:	0800a3c0 	.word	0x0800a3c0

08008198 <quorem>:
 8008198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819c:	6903      	ldr	r3, [r0, #16]
 800819e:	690c      	ldr	r4, [r1, #16]
 80081a0:	42a3      	cmp	r3, r4
 80081a2:	4607      	mov	r7, r0
 80081a4:	f2c0 8081 	blt.w	80082aa <quorem+0x112>
 80081a8:	3c01      	subs	r4, #1
 80081aa:	f101 0814 	add.w	r8, r1, #20
 80081ae:	f100 0514 	add.w	r5, r0, #20
 80081b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081c0:	3301      	adds	r3, #1
 80081c2:	429a      	cmp	r2, r3
 80081c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80081d0:	d331      	bcc.n	8008236 <quorem+0x9e>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	4640      	mov	r0, r8
 80081d8:	46ac      	mov	ip, r5
 80081da:	46f2      	mov	sl, lr
 80081dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80081e0:	b293      	uxth	r3, r2
 80081e2:	fb06 e303 	mla	r3, r6, r3, lr
 80081e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	ebaa 0303 	sub.w	r3, sl, r3
 80081f0:	0c12      	lsrs	r2, r2, #16
 80081f2:	f8dc a000 	ldr.w	sl, [ip]
 80081f6:	fb06 e202 	mla	r2, r6, r2, lr
 80081fa:	fa13 f38a 	uxtah	r3, r3, sl
 80081fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008202:	fa1f fa82 	uxth.w	sl, r2
 8008206:	f8dc 2000 	ldr.w	r2, [ip]
 800820a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800820e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008212:	b29b      	uxth	r3, r3
 8008214:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008218:	4581      	cmp	r9, r0
 800821a:	f84c 3b04 	str.w	r3, [ip], #4
 800821e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008222:	d2db      	bcs.n	80081dc <quorem+0x44>
 8008224:	f855 300b 	ldr.w	r3, [r5, fp]
 8008228:	b92b      	cbnz	r3, 8008236 <quorem+0x9e>
 800822a:	9b01      	ldr	r3, [sp, #4]
 800822c:	3b04      	subs	r3, #4
 800822e:	429d      	cmp	r5, r3
 8008230:	461a      	mov	r2, r3
 8008232:	d32e      	bcc.n	8008292 <quorem+0xfa>
 8008234:	613c      	str	r4, [r7, #16]
 8008236:	4638      	mov	r0, r7
 8008238:	f001 fae2 	bl	8009800 <__mcmp>
 800823c:	2800      	cmp	r0, #0
 800823e:	db24      	blt.n	800828a <quorem+0xf2>
 8008240:	3601      	adds	r6, #1
 8008242:	4628      	mov	r0, r5
 8008244:	f04f 0c00 	mov.w	ip, #0
 8008248:	f858 2b04 	ldr.w	r2, [r8], #4
 800824c:	f8d0 e000 	ldr.w	lr, [r0]
 8008250:	b293      	uxth	r3, r2
 8008252:	ebac 0303 	sub.w	r3, ip, r3
 8008256:	0c12      	lsrs	r2, r2, #16
 8008258:	fa13 f38e 	uxtah	r3, r3, lr
 800825c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008264:	b29b      	uxth	r3, r3
 8008266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800826a:	45c1      	cmp	r9, r8
 800826c:	f840 3b04 	str.w	r3, [r0], #4
 8008270:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008274:	d2e8      	bcs.n	8008248 <quorem+0xb0>
 8008276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800827a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800827e:	b922      	cbnz	r2, 800828a <quorem+0xf2>
 8008280:	3b04      	subs	r3, #4
 8008282:	429d      	cmp	r5, r3
 8008284:	461a      	mov	r2, r3
 8008286:	d30a      	bcc.n	800829e <quorem+0x106>
 8008288:	613c      	str	r4, [r7, #16]
 800828a:	4630      	mov	r0, r6
 800828c:	b003      	add	sp, #12
 800828e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008292:	6812      	ldr	r2, [r2, #0]
 8008294:	3b04      	subs	r3, #4
 8008296:	2a00      	cmp	r2, #0
 8008298:	d1cc      	bne.n	8008234 <quorem+0x9c>
 800829a:	3c01      	subs	r4, #1
 800829c:	e7c7      	b.n	800822e <quorem+0x96>
 800829e:	6812      	ldr	r2, [r2, #0]
 80082a0:	3b04      	subs	r3, #4
 80082a2:	2a00      	cmp	r2, #0
 80082a4:	d1f0      	bne.n	8008288 <quorem+0xf0>
 80082a6:	3c01      	subs	r4, #1
 80082a8:	e7eb      	b.n	8008282 <quorem+0xea>
 80082aa:	2000      	movs	r0, #0
 80082ac:	e7ee      	b.n	800828c <quorem+0xf4>
	...

080082b0 <_dtoa_r>:
 80082b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	ed2d 8b02 	vpush	{d8}
 80082b8:	ec57 6b10 	vmov	r6, r7, d0
 80082bc:	b095      	sub	sp, #84	; 0x54
 80082be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082c4:	9105      	str	r1, [sp, #20]
 80082c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80082ca:	4604      	mov	r4, r0
 80082cc:	9209      	str	r2, [sp, #36]	; 0x24
 80082ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80082d0:	b975      	cbnz	r5, 80082f0 <_dtoa_r+0x40>
 80082d2:	2010      	movs	r0, #16
 80082d4:	f000 fffc 	bl	80092d0 <malloc>
 80082d8:	4602      	mov	r2, r0
 80082da:	6260      	str	r0, [r4, #36]	; 0x24
 80082dc:	b920      	cbnz	r0, 80082e8 <_dtoa_r+0x38>
 80082de:	4bb2      	ldr	r3, [pc, #712]	; (80085a8 <_dtoa_r+0x2f8>)
 80082e0:	21ea      	movs	r1, #234	; 0xea
 80082e2:	48b2      	ldr	r0, [pc, #712]	; (80085ac <_dtoa_r+0x2fc>)
 80082e4:	f001 fe12 	bl	8009f0c <__assert_func>
 80082e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082ec:	6005      	str	r5, [r0, #0]
 80082ee:	60c5      	str	r5, [r0, #12]
 80082f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082f2:	6819      	ldr	r1, [r3, #0]
 80082f4:	b151      	cbz	r1, 800830c <_dtoa_r+0x5c>
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	604a      	str	r2, [r1, #4]
 80082fa:	2301      	movs	r3, #1
 80082fc:	4093      	lsls	r3, r2
 80082fe:	608b      	str	r3, [r1, #8]
 8008300:	4620      	mov	r0, r4
 8008302:	f001 f83f 	bl	8009384 <_Bfree>
 8008306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	1e3b      	subs	r3, r7, #0
 800830e:	bfb9      	ittee	lt
 8008310:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008314:	9303      	strlt	r3, [sp, #12]
 8008316:	2300      	movge	r3, #0
 8008318:	f8c8 3000 	strge.w	r3, [r8]
 800831c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008320:	4ba3      	ldr	r3, [pc, #652]	; (80085b0 <_dtoa_r+0x300>)
 8008322:	bfbc      	itt	lt
 8008324:	2201      	movlt	r2, #1
 8008326:	f8c8 2000 	strlt.w	r2, [r8]
 800832a:	ea33 0309 	bics.w	r3, r3, r9
 800832e:	d11b      	bne.n	8008368 <_dtoa_r+0xb8>
 8008330:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008332:	f242 730f 	movw	r3, #9999	; 0x270f
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800833c:	4333      	orrs	r3, r6
 800833e:	f000 857a 	beq.w	8008e36 <_dtoa_r+0xb86>
 8008342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008344:	b963      	cbnz	r3, 8008360 <_dtoa_r+0xb0>
 8008346:	4b9b      	ldr	r3, [pc, #620]	; (80085b4 <_dtoa_r+0x304>)
 8008348:	e024      	b.n	8008394 <_dtoa_r+0xe4>
 800834a:	4b9b      	ldr	r3, [pc, #620]	; (80085b8 <_dtoa_r+0x308>)
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	3308      	adds	r3, #8
 8008350:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	9800      	ldr	r0, [sp, #0]
 8008356:	b015      	add	sp, #84	; 0x54
 8008358:	ecbd 8b02 	vpop	{d8}
 800835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008360:	4b94      	ldr	r3, [pc, #592]	; (80085b4 <_dtoa_r+0x304>)
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	3303      	adds	r3, #3
 8008366:	e7f3      	b.n	8008350 <_dtoa_r+0xa0>
 8008368:	ed9d 7b02 	vldr	d7, [sp, #8]
 800836c:	2200      	movs	r2, #0
 800836e:	ec51 0b17 	vmov	r0, r1, d7
 8008372:	2300      	movs	r3, #0
 8008374:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008378:	f7f8 fbce 	bl	8000b18 <__aeabi_dcmpeq>
 800837c:	4680      	mov	r8, r0
 800837e:	b158      	cbz	r0, 8008398 <_dtoa_r+0xe8>
 8008380:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008382:	2301      	movs	r3, #1
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 8551 	beq.w	8008e30 <_dtoa_r+0xb80>
 800838e:	488b      	ldr	r0, [pc, #556]	; (80085bc <_dtoa_r+0x30c>)
 8008390:	6018      	str	r0, [r3, #0]
 8008392:	1e43      	subs	r3, r0, #1
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	e7dd      	b.n	8008354 <_dtoa_r+0xa4>
 8008398:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800839c:	aa12      	add	r2, sp, #72	; 0x48
 800839e:	a913      	add	r1, sp, #76	; 0x4c
 80083a0:	4620      	mov	r0, r4
 80083a2:	f001 fad1 	bl	8009948 <__d2b>
 80083a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083aa:	4683      	mov	fp, r0
 80083ac:	2d00      	cmp	r5, #0
 80083ae:	d07c      	beq.n	80084aa <_dtoa_r+0x1fa>
 80083b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80083b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80083be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083ca:	4b7d      	ldr	r3, [pc, #500]	; (80085c0 <_dtoa_r+0x310>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	4630      	mov	r0, r6
 80083d0:	4639      	mov	r1, r7
 80083d2:	f7f7 ff81 	bl	80002d8 <__aeabi_dsub>
 80083d6:	a36e      	add	r3, pc, #440	; (adr r3, 8008590 <_dtoa_r+0x2e0>)
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	f7f8 f934 	bl	8000648 <__aeabi_dmul>
 80083e0:	a36d      	add	r3, pc, #436	; (adr r3, 8008598 <_dtoa_r+0x2e8>)
 80083e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e6:	f7f7 ff79 	bl	80002dc <__adddf3>
 80083ea:	4606      	mov	r6, r0
 80083ec:	4628      	mov	r0, r5
 80083ee:	460f      	mov	r7, r1
 80083f0:	f7f8 f8c0 	bl	8000574 <__aeabi_i2d>
 80083f4:	a36a      	add	r3, pc, #424	; (adr r3, 80085a0 <_dtoa_r+0x2f0>)
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	f7f8 f925 	bl	8000648 <__aeabi_dmul>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4630      	mov	r0, r6
 8008404:	4639      	mov	r1, r7
 8008406:	f7f7 ff69 	bl	80002dc <__adddf3>
 800840a:	4606      	mov	r6, r0
 800840c:	460f      	mov	r7, r1
 800840e:	f7f8 fbcb 	bl	8000ba8 <__aeabi_d2iz>
 8008412:	2200      	movs	r2, #0
 8008414:	4682      	mov	sl, r0
 8008416:	2300      	movs	r3, #0
 8008418:	4630      	mov	r0, r6
 800841a:	4639      	mov	r1, r7
 800841c:	f7f8 fb86 	bl	8000b2c <__aeabi_dcmplt>
 8008420:	b148      	cbz	r0, 8008436 <_dtoa_r+0x186>
 8008422:	4650      	mov	r0, sl
 8008424:	f7f8 f8a6 	bl	8000574 <__aeabi_i2d>
 8008428:	4632      	mov	r2, r6
 800842a:	463b      	mov	r3, r7
 800842c:	f7f8 fb74 	bl	8000b18 <__aeabi_dcmpeq>
 8008430:	b908      	cbnz	r0, 8008436 <_dtoa_r+0x186>
 8008432:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008436:	f1ba 0f16 	cmp.w	sl, #22
 800843a:	d854      	bhi.n	80084e6 <_dtoa_r+0x236>
 800843c:	4b61      	ldr	r3, [pc, #388]	; (80085c4 <_dtoa_r+0x314>)
 800843e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800844a:	f7f8 fb6f 	bl	8000b2c <__aeabi_dcmplt>
 800844e:	2800      	cmp	r0, #0
 8008450:	d04b      	beq.n	80084ea <_dtoa_r+0x23a>
 8008452:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008456:	2300      	movs	r3, #0
 8008458:	930e      	str	r3, [sp, #56]	; 0x38
 800845a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800845c:	1b5d      	subs	r5, r3, r5
 800845e:	1e6b      	subs	r3, r5, #1
 8008460:	9304      	str	r3, [sp, #16]
 8008462:	bf43      	ittte	mi
 8008464:	2300      	movmi	r3, #0
 8008466:	f1c5 0801 	rsbmi	r8, r5, #1
 800846a:	9304      	strmi	r3, [sp, #16]
 800846c:	f04f 0800 	movpl.w	r8, #0
 8008470:	f1ba 0f00 	cmp.w	sl, #0
 8008474:	db3b      	blt.n	80084ee <_dtoa_r+0x23e>
 8008476:	9b04      	ldr	r3, [sp, #16]
 8008478:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800847c:	4453      	add	r3, sl
 800847e:	9304      	str	r3, [sp, #16]
 8008480:	2300      	movs	r3, #0
 8008482:	9306      	str	r3, [sp, #24]
 8008484:	9b05      	ldr	r3, [sp, #20]
 8008486:	2b09      	cmp	r3, #9
 8008488:	d869      	bhi.n	800855e <_dtoa_r+0x2ae>
 800848a:	2b05      	cmp	r3, #5
 800848c:	bfc4      	itt	gt
 800848e:	3b04      	subgt	r3, #4
 8008490:	9305      	strgt	r3, [sp, #20]
 8008492:	9b05      	ldr	r3, [sp, #20]
 8008494:	f1a3 0302 	sub.w	r3, r3, #2
 8008498:	bfcc      	ite	gt
 800849a:	2500      	movgt	r5, #0
 800849c:	2501      	movle	r5, #1
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d869      	bhi.n	8008576 <_dtoa_r+0x2c6>
 80084a2:	e8df f003 	tbb	[pc, r3]
 80084a6:	4e2c      	.short	0x4e2c
 80084a8:	5a4c      	.short	0x5a4c
 80084aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80084ae:	441d      	add	r5, r3
 80084b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084b4:	2b20      	cmp	r3, #32
 80084b6:	bfc1      	itttt	gt
 80084b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80084c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80084c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80084c8:	bfda      	itte	le
 80084ca:	f1c3 0320 	rsble	r3, r3, #32
 80084ce:	fa06 f003 	lslle.w	r0, r6, r3
 80084d2:	4318      	orrgt	r0, r3
 80084d4:	f7f8 f83e 	bl	8000554 <__aeabi_ui2d>
 80084d8:	2301      	movs	r3, #1
 80084da:	4606      	mov	r6, r0
 80084dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80084e0:	3d01      	subs	r5, #1
 80084e2:	9310      	str	r3, [sp, #64]	; 0x40
 80084e4:	e771      	b.n	80083ca <_dtoa_r+0x11a>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e7b6      	b.n	8008458 <_dtoa_r+0x1a8>
 80084ea:	900e      	str	r0, [sp, #56]	; 0x38
 80084ec:	e7b5      	b.n	800845a <_dtoa_r+0x1aa>
 80084ee:	f1ca 0300 	rsb	r3, sl, #0
 80084f2:	9306      	str	r3, [sp, #24]
 80084f4:	2300      	movs	r3, #0
 80084f6:	eba8 080a 	sub.w	r8, r8, sl
 80084fa:	930d      	str	r3, [sp, #52]	; 0x34
 80084fc:	e7c2      	b.n	8008484 <_dtoa_r+0x1d4>
 80084fe:	2300      	movs	r3, #0
 8008500:	9308      	str	r3, [sp, #32]
 8008502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008504:	2b00      	cmp	r3, #0
 8008506:	dc39      	bgt.n	800857c <_dtoa_r+0x2cc>
 8008508:	f04f 0901 	mov.w	r9, #1
 800850c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008510:	464b      	mov	r3, r9
 8008512:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008516:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008518:	2200      	movs	r2, #0
 800851a:	6042      	str	r2, [r0, #4]
 800851c:	2204      	movs	r2, #4
 800851e:	f102 0614 	add.w	r6, r2, #20
 8008522:	429e      	cmp	r6, r3
 8008524:	6841      	ldr	r1, [r0, #4]
 8008526:	d92f      	bls.n	8008588 <_dtoa_r+0x2d8>
 8008528:	4620      	mov	r0, r4
 800852a:	f000 feeb 	bl	8009304 <_Balloc>
 800852e:	9000      	str	r0, [sp, #0]
 8008530:	2800      	cmp	r0, #0
 8008532:	d14b      	bne.n	80085cc <_dtoa_r+0x31c>
 8008534:	4b24      	ldr	r3, [pc, #144]	; (80085c8 <_dtoa_r+0x318>)
 8008536:	4602      	mov	r2, r0
 8008538:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800853c:	e6d1      	b.n	80082e2 <_dtoa_r+0x32>
 800853e:	2301      	movs	r3, #1
 8008540:	e7de      	b.n	8008500 <_dtoa_r+0x250>
 8008542:	2300      	movs	r3, #0
 8008544:	9308      	str	r3, [sp, #32]
 8008546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008548:	eb0a 0903 	add.w	r9, sl, r3
 800854c:	f109 0301 	add.w	r3, r9, #1
 8008550:	2b01      	cmp	r3, #1
 8008552:	9301      	str	r3, [sp, #4]
 8008554:	bfb8      	it	lt
 8008556:	2301      	movlt	r3, #1
 8008558:	e7dd      	b.n	8008516 <_dtoa_r+0x266>
 800855a:	2301      	movs	r3, #1
 800855c:	e7f2      	b.n	8008544 <_dtoa_r+0x294>
 800855e:	2501      	movs	r5, #1
 8008560:	2300      	movs	r3, #0
 8008562:	9305      	str	r3, [sp, #20]
 8008564:	9508      	str	r5, [sp, #32]
 8008566:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800856a:	2200      	movs	r2, #0
 800856c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008570:	2312      	movs	r3, #18
 8008572:	9209      	str	r2, [sp, #36]	; 0x24
 8008574:	e7cf      	b.n	8008516 <_dtoa_r+0x266>
 8008576:	2301      	movs	r3, #1
 8008578:	9308      	str	r3, [sp, #32]
 800857a:	e7f4      	b.n	8008566 <_dtoa_r+0x2b6>
 800857c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008580:	f8cd 9004 	str.w	r9, [sp, #4]
 8008584:	464b      	mov	r3, r9
 8008586:	e7c6      	b.n	8008516 <_dtoa_r+0x266>
 8008588:	3101      	adds	r1, #1
 800858a:	6041      	str	r1, [r0, #4]
 800858c:	0052      	lsls	r2, r2, #1
 800858e:	e7c6      	b.n	800851e <_dtoa_r+0x26e>
 8008590:	636f4361 	.word	0x636f4361
 8008594:	3fd287a7 	.word	0x3fd287a7
 8008598:	8b60c8b3 	.word	0x8b60c8b3
 800859c:	3fc68a28 	.word	0x3fc68a28
 80085a0:	509f79fb 	.word	0x509f79fb
 80085a4:	3fd34413 	.word	0x3fd34413
 80085a8:	0800a336 	.word	0x0800a336
 80085ac:	0800a34d 	.word	0x0800a34d
 80085b0:	7ff00000 	.word	0x7ff00000
 80085b4:	0800a332 	.word	0x0800a332
 80085b8:	0800a329 	.word	0x0800a329
 80085bc:	0800a205 	.word	0x0800a205
 80085c0:	3ff80000 	.word	0x3ff80000
 80085c4:	0800a4b8 	.word	0x0800a4b8
 80085c8:	0800a3ac 	.word	0x0800a3ac
 80085cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085ce:	9a00      	ldr	r2, [sp, #0]
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	9b01      	ldr	r3, [sp, #4]
 80085d4:	2b0e      	cmp	r3, #14
 80085d6:	f200 80ad 	bhi.w	8008734 <_dtoa_r+0x484>
 80085da:	2d00      	cmp	r5, #0
 80085dc:	f000 80aa 	beq.w	8008734 <_dtoa_r+0x484>
 80085e0:	f1ba 0f00 	cmp.w	sl, #0
 80085e4:	dd36      	ble.n	8008654 <_dtoa_r+0x3a4>
 80085e6:	4ac3      	ldr	r2, [pc, #780]	; (80088f4 <_dtoa_r+0x644>)
 80085e8:	f00a 030f 	and.w	r3, sl, #15
 80085ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80085f0:	ed93 7b00 	vldr	d7, [r3]
 80085f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80085f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80085fc:	eeb0 8a47 	vmov.f32	s16, s14
 8008600:	eef0 8a67 	vmov.f32	s17, s15
 8008604:	d016      	beq.n	8008634 <_dtoa_r+0x384>
 8008606:	4bbc      	ldr	r3, [pc, #752]	; (80088f8 <_dtoa_r+0x648>)
 8008608:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800860c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008610:	f7f8 f944 	bl	800089c <__aeabi_ddiv>
 8008614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008618:	f007 070f 	and.w	r7, r7, #15
 800861c:	2503      	movs	r5, #3
 800861e:	4eb6      	ldr	r6, [pc, #728]	; (80088f8 <_dtoa_r+0x648>)
 8008620:	b957      	cbnz	r7, 8008638 <_dtoa_r+0x388>
 8008622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008626:	ec53 2b18 	vmov	r2, r3, d8
 800862a:	f7f8 f937 	bl	800089c <__aeabi_ddiv>
 800862e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008632:	e029      	b.n	8008688 <_dtoa_r+0x3d8>
 8008634:	2502      	movs	r5, #2
 8008636:	e7f2      	b.n	800861e <_dtoa_r+0x36e>
 8008638:	07f9      	lsls	r1, r7, #31
 800863a:	d508      	bpl.n	800864e <_dtoa_r+0x39e>
 800863c:	ec51 0b18 	vmov	r0, r1, d8
 8008640:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008644:	f7f8 f800 	bl	8000648 <__aeabi_dmul>
 8008648:	ec41 0b18 	vmov	d8, r0, r1
 800864c:	3501      	adds	r5, #1
 800864e:	107f      	asrs	r7, r7, #1
 8008650:	3608      	adds	r6, #8
 8008652:	e7e5      	b.n	8008620 <_dtoa_r+0x370>
 8008654:	f000 80a6 	beq.w	80087a4 <_dtoa_r+0x4f4>
 8008658:	f1ca 0600 	rsb	r6, sl, #0
 800865c:	4ba5      	ldr	r3, [pc, #660]	; (80088f4 <_dtoa_r+0x644>)
 800865e:	4fa6      	ldr	r7, [pc, #664]	; (80088f8 <_dtoa_r+0x648>)
 8008660:	f006 020f 	and.w	r2, r6, #15
 8008664:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008670:	f7f7 ffea 	bl	8000648 <__aeabi_dmul>
 8008674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008678:	1136      	asrs	r6, r6, #4
 800867a:	2300      	movs	r3, #0
 800867c:	2502      	movs	r5, #2
 800867e:	2e00      	cmp	r6, #0
 8008680:	f040 8085 	bne.w	800878e <_dtoa_r+0x4de>
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1d2      	bne.n	800862e <_dtoa_r+0x37e>
 8008688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 808c 	beq.w	80087a8 <_dtoa_r+0x4f8>
 8008690:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008694:	4b99      	ldr	r3, [pc, #612]	; (80088fc <_dtoa_r+0x64c>)
 8008696:	2200      	movs	r2, #0
 8008698:	4630      	mov	r0, r6
 800869a:	4639      	mov	r1, r7
 800869c:	f7f8 fa46 	bl	8000b2c <__aeabi_dcmplt>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	f000 8081 	beq.w	80087a8 <_dtoa_r+0x4f8>
 80086a6:	9b01      	ldr	r3, [sp, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d07d      	beq.n	80087a8 <_dtoa_r+0x4f8>
 80086ac:	f1b9 0f00 	cmp.w	r9, #0
 80086b0:	dd3c      	ble.n	800872c <_dtoa_r+0x47c>
 80086b2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80086b6:	9307      	str	r3, [sp, #28]
 80086b8:	2200      	movs	r2, #0
 80086ba:	4b91      	ldr	r3, [pc, #580]	; (8008900 <_dtoa_r+0x650>)
 80086bc:	4630      	mov	r0, r6
 80086be:	4639      	mov	r1, r7
 80086c0:	f7f7 ffc2 	bl	8000648 <__aeabi_dmul>
 80086c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086c8:	3501      	adds	r5, #1
 80086ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80086ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80086d2:	4628      	mov	r0, r5
 80086d4:	f7f7 ff4e 	bl	8000574 <__aeabi_i2d>
 80086d8:	4632      	mov	r2, r6
 80086da:	463b      	mov	r3, r7
 80086dc:	f7f7 ffb4 	bl	8000648 <__aeabi_dmul>
 80086e0:	4b88      	ldr	r3, [pc, #544]	; (8008904 <_dtoa_r+0x654>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	f7f7 fdfa 	bl	80002dc <__adddf3>
 80086e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80086ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086f0:	9303      	str	r3, [sp, #12]
 80086f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d15c      	bne.n	80087b2 <_dtoa_r+0x502>
 80086f8:	4b83      	ldr	r3, [pc, #524]	; (8008908 <_dtoa_r+0x658>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	4630      	mov	r0, r6
 80086fe:	4639      	mov	r1, r7
 8008700:	f7f7 fdea 	bl	80002d8 <__aeabi_dsub>
 8008704:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008708:	4606      	mov	r6, r0
 800870a:	460f      	mov	r7, r1
 800870c:	f7f8 fa2c 	bl	8000b68 <__aeabi_dcmpgt>
 8008710:	2800      	cmp	r0, #0
 8008712:	f040 8296 	bne.w	8008c42 <_dtoa_r+0x992>
 8008716:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800871a:	4630      	mov	r0, r6
 800871c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008720:	4639      	mov	r1, r7
 8008722:	f7f8 fa03 	bl	8000b2c <__aeabi_dcmplt>
 8008726:	2800      	cmp	r0, #0
 8008728:	f040 8288 	bne.w	8008c3c <_dtoa_r+0x98c>
 800872c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008730:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008734:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008736:	2b00      	cmp	r3, #0
 8008738:	f2c0 8158 	blt.w	80089ec <_dtoa_r+0x73c>
 800873c:	f1ba 0f0e 	cmp.w	sl, #14
 8008740:	f300 8154 	bgt.w	80089ec <_dtoa_r+0x73c>
 8008744:	4b6b      	ldr	r3, [pc, #428]	; (80088f4 <_dtoa_r+0x644>)
 8008746:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800874a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800874e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008750:	2b00      	cmp	r3, #0
 8008752:	f280 80e3 	bge.w	800891c <_dtoa_r+0x66c>
 8008756:	9b01      	ldr	r3, [sp, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	f300 80df 	bgt.w	800891c <_dtoa_r+0x66c>
 800875e:	f040 826d 	bne.w	8008c3c <_dtoa_r+0x98c>
 8008762:	4b69      	ldr	r3, [pc, #420]	; (8008908 <_dtoa_r+0x658>)
 8008764:	2200      	movs	r2, #0
 8008766:	4640      	mov	r0, r8
 8008768:	4649      	mov	r1, r9
 800876a:	f7f7 ff6d 	bl	8000648 <__aeabi_dmul>
 800876e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008772:	f7f8 f9ef 	bl	8000b54 <__aeabi_dcmpge>
 8008776:	9e01      	ldr	r6, [sp, #4]
 8008778:	4637      	mov	r7, r6
 800877a:	2800      	cmp	r0, #0
 800877c:	f040 8243 	bne.w	8008c06 <_dtoa_r+0x956>
 8008780:	9d00      	ldr	r5, [sp, #0]
 8008782:	2331      	movs	r3, #49	; 0x31
 8008784:	f805 3b01 	strb.w	r3, [r5], #1
 8008788:	f10a 0a01 	add.w	sl, sl, #1
 800878c:	e23f      	b.n	8008c0e <_dtoa_r+0x95e>
 800878e:	07f2      	lsls	r2, r6, #31
 8008790:	d505      	bpl.n	800879e <_dtoa_r+0x4ee>
 8008792:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008796:	f7f7 ff57 	bl	8000648 <__aeabi_dmul>
 800879a:	3501      	adds	r5, #1
 800879c:	2301      	movs	r3, #1
 800879e:	1076      	asrs	r6, r6, #1
 80087a0:	3708      	adds	r7, #8
 80087a2:	e76c      	b.n	800867e <_dtoa_r+0x3ce>
 80087a4:	2502      	movs	r5, #2
 80087a6:	e76f      	b.n	8008688 <_dtoa_r+0x3d8>
 80087a8:	9b01      	ldr	r3, [sp, #4]
 80087aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80087ae:	930c      	str	r3, [sp, #48]	; 0x30
 80087b0:	e78d      	b.n	80086ce <_dtoa_r+0x41e>
 80087b2:	9900      	ldr	r1, [sp, #0]
 80087b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80087b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087b8:	4b4e      	ldr	r3, [pc, #312]	; (80088f4 <_dtoa_r+0x644>)
 80087ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087be:	4401      	add	r1, r0
 80087c0:	9102      	str	r1, [sp, #8]
 80087c2:	9908      	ldr	r1, [sp, #32]
 80087c4:	eeb0 8a47 	vmov.f32	s16, s14
 80087c8:	eef0 8a67 	vmov.f32	s17, s15
 80087cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087d4:	2900      	cmp	r1, #0
 80087d6:	d045      	beq.n	8008864 <_dtoa_r+0x5b4>
 80087d8:	494c      	ldr	r1, [pc, #304]	; (800890c <_dtoa_r+0x65c>)
 80087da:	2000      	movs	r0, #0
 80087dc:	f7f8 f85e 	bl	800089c <__aeabi_ddiv>
 80087e0:	ec53 2b18 	vmov	r2, r3, d8
 80087e4:	f7f7 fd78 	bl	80002d8 <__aeabi_dsub>
 80087e8:	9d00      	ldr	r5, [sp, #0]
 80087ea:	ec41 0b18 	vmov	d8, r0, r1
 80087ee:	4639      	mov	r1, r7
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7f8 f9d9 	bl	8000ba8 <__aeabi_d2iz>
 80087f6:	900c      	str	r0, [sp, #48]	; 0x30
 80087f8:	f7f7 febc 	bl	8000574 <__aeabi_i2d>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4630      	mov	r0, r6
 8008802:	4639      	mov	r1, r7
 8008804:	f7f7 fd68 	bl	80002d8 <__aeabi_dsub>
 8008808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800880a:	3330      	adds	r3, #48	; 0x30
 800880c:	f805 3b01 	strb.w	r3, [r5], #1
 8008810:	ec53 2b18 	vmov	r2, r3, d8
 8008814:	4606      	mov	r6, r0
 8008816:	460f      	mov	r7, r1
 8008818:	f7f8 f988 	bl	8000b2c <__aeabi_dcmplt>
 800881c:	2800      	cmp	r0, #0
 800881e:	d165      	bne.n	80088ec <_dtoa_r+0x63c>
 8008820:	4632      	mov	r2, r6
 8008822:	463b      	mov	r3, r7
 8008824:	4935      	ldr	r1, [pc, #212]	; (80088fc <_dtoa_r+0x64c>)
 8008826:	2000      	movs	r0, #0
 8008828:	f7f7 fd56 	bl	80002d8 <__aeabi_dsub>
 800882c:	ec53 2b18 	vmov	r2, r3, d8
 8008830:	f7f8 f97c 	bl	8000b2c <__aeabi_dcmplt>
 8008834:	2800      	cmp	r0, #0
 8008836:	f040 80b9 	bne.w	80089ac <_dtoa_r+0x6fc>
 800883a:	9b02      	ldr	r3, [sp, #8]
 800883c:	429d      	cmp	r5, r3
 800883e:	f43f af75 	beq.w	800872c <_dtoa_r+0x47c>
 8008842:	4b2f      	ldr	r3, [pc, #188]	; (8008900 <_dtoa_r+0x650>)
 8008844:	ec51 0b18 	vmov	r0, r1, d8
 8008848:	2200      	movs	r2, #0
 800884a:	f7f7 fefd 	bl	8000648 <__aeabi_dmul>
 800884e:	4b2c      	ldr	r3, [pc, #176]	; (8008900 <_dtoa_r+0x650>)
 8008850:	ec41 0b18 	vmov	d8, r0, r1
 8008854:	2200      	movs	r2, #0
 8008856:	4630      	mov	r0, r6
 8008858:	4639      	mov	r1, r7
 800885a:	f7f7 fef5 	bl	8000648 <__aeabi_dmul>
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	e7c4      	b.n	80087ee <_dtoa_r+0x53e>
 8008864:	ec51 0b17 	vmov	r0, r1, d7
 8008868:	f7f7 feee 	bl	8000648 <__aeabi_dmul>
 800886c:	9b02      	ldr	r3, [sp, #8]
 800886e:	9d00      	ldr	r5, [sp, #0]
 8008870:	930c      	str	r3, [sp, #48]	; 0x30
 8008872:	ec41 0b18 	vmov	d8, r0, r1
 8008876:	4639      	mov	r1, r7
 8008878:	4630      	mov	r0, r6
 800887a:	f7f8 f995 	bl	8000ba8 <__aeabi_d2iz>
 800887e:	9011      	str	r0, [sp, #68]	; 0x44
 8008880:	f7f7 fe78 	bl	8000574 <__aeabi_i2d>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4630      	mov	r0, r6
 800888a:	4639      	mov	r1, r7
 800888c:	f7f7 fd24 	bl	80002d8 <__aeabi_dsub>
 8008890:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008892:	3330      	adds	r3, #48	; 0x30
 8008894:	f805 3b01 	strb.w	r3, [r5], #1
 8008898:	9b02      	ldr	r3, [sp, #8]
 800889a:	429d      	cmp	r5, r3
 800889c:	4606      	mov	r6, r0
 800889e:	460f      	mov	r7, r1
 80088a0:	f04f 0200 	mov.w	r2, #0
 80088a4:	d134      	bne.n	8008910 <_dtoa_r+0x660>
 80088a6:	4b19      	ldr	r3, [pc, #100]	; (800890c <_dtoa_r+0x65c>)
 80088a8:	ec51 0b18 	vmov	r0, r1, d8
 80088ac:	f7f7 fd16 	bl	80002dc <__adddf3>
 80088b0:	4602      	mov	r2, r0
 80088b2:	460b      	mov	r3, r1
 80088b4:	4630      	mov	r0, r6
 80088b6:	4639      	mov	r1, r7
 80088b8:	f7f8 f956 	bl	8000b68 <__aeabi_dcmpgt>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d175      	bne.n	80089ac <_dtoa_r+0x6fc>
 80088c0:	ec53 2b18 	vmov	r2, r3, d8
 80088c4:	4911      	ldr	r1, [pc, #68]	; (800890c <_dtoa_r+0x65c>)
 80088c6:	2000      	movs	r0, #0
 80088c8:	f7f7 fd06 	bl	80002d8 <__aeabi_dsub>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4630      	mov	r0, r6
 80088d2:	4639      	mov	r1, r7
 80088d4:	f7f8 f92a 	bl	8000b2c <__aeabi_dcmplt>
 80088d8:	2800      	cmp	r0, #0
 80088da:	f43f af27 	beq.w	800872c <_dtoa_r+0x47c>
 80088de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088e0:	1e6b      	subs	r3, r5, #1
 80088e2:	930c      	str	r3, [sp, #48]	; 0x30
 80088e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088e8:	2b30      	cmp	r3, #48	; 0x30
 80088ea:	d0f8      	beq.n	80088de <_dtoa_r+0x62e>
 80088ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80088f0:	e04a      	b.n	8008988 <_dtoa_r+0x6d8>
 80088f2:	bf00      	nop
 80088f4:	0800a4b8 	.word	0x0800a4b8
 80088f8:	0800a490 	.word	0x0800a490
 80088fc:	3ff00000 	.word	0x3ff00000
 8008900:	40240000 	.word	0x40240000
 8008904:	401c0000 	.word	0x401c0000
 8008908:	40140000 	.word	0x40140000
 800890c:	3fe00000 	.word	0x3fe00000
 8008910:	4baf      	ldr	r3, [pc, #700]	; (8008bd0 <_dtoa_r+0x920>)
 8008912:	f7f7 fe99 	bl	8000648 <__aeabi_dmul>
 8008916:	4606      	mov	r6, r0
 8008918:	460f      	mov	r7, r1
 800891a:	e7ac      	b.n	8008876 <_dtoa_r+0x5c6>
 800891c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008920:	9d00      	ldr	r5, [sp, #0]
 8008922:	4642      	mov	r2, r8
 8008924:	464b      	mov	r3, r9
 8008926:	4630      	mov	r0, r6
 8008928:	4639      	mov	r1, r7
 800892a:	f7f7 ffb7 	bl	800089c <__aeabi_ddiv>
 800892e:	f7f8 f93b 	bl	8000ba8 <__aeabi_d2iz>
 8008932:	9002      	str	r0, [sp, #8]
 8008934:	f7f7 fe1e 	bl	8000574 <__aeabi_i2d>
 8008938:	4642      	mov	r2, r8
 800893a:	464b      	mov	r3, r9
 800893c:	f7f7 fe84 	bl	8000648 <__aeabi_dmul>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4630      	mov	r0, r6
 8008946:	4639      	mov	r1, r7
 8008948:	f7f7 fcc6 	bl	80002d8 <__aeabi_dsub>
 800894c:	9e02      	ldr	r6, [sp, #8]
 800894e:	9f01      	ldr	r7, [sp, #4]
 8008950:	3630      	adds	r6, #48	; 0x30
 8008952:	f805 6b01 	strb.w	r6, [r5], #1
 8008956:	9e00      	ldr	r6, [sp, #0]
 8008958:	1bae      	subs	r6, r5, r6
 800895a:	42b7      	cmp	r7, r6
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	d137      	bne.n	80089d2 <_dtoa_r+0x722>
 8008962:	f7f7 fcbb 	bl	80002dc <__adddf3>
 8008966:	4642      	mov	r2, r8
 8008968:	464b      	mov	r3, r9
 800896a:	4606      	mov	r6, r0
 800896c:	460f      	mov	r7, r1
 800896e:	f7f8 f8fb 	bl	8000b68 <__aeabi_dcmpgt>
 8008972:	b9c8      	cbnz	r0, 80089a8 <_dtoa_r+0x6f8>
 8008974:	4642      	mov	r2, r8
 8008976:	464b      	mov	r3, r9
 8008978:	4630      	mov	r0, r6
 800897a:	4639      	mov	r1, r7
 800897c:	f7f8 f8cc 	bl	8000b18 <__aeabi_dcmpeq>
 8008980:	b110      	cbz	r0, 8008988 <_dtoa_r+0x6d8>
 8008982:	9b02      	ldr	r3, [sp, #8]
 8008984:	07d9      	lsls	r1, r3, #31
 8008986:	d40f      	bmi.n	80089a8 <_dtoa_r+0x6f8>
 8008988:	4620      	mov	r0, r4
 800898a:	4659      	mov	r1, fp
 800898c:	f000 fcfa 	bl	8009384 <_Bfree>
 8008990:	2300      	movs	r3, #0
 8008992:	702b      	strb	r3, [r5, #0]
 8008994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008996:	f10a 0001 	add.w	r0, sl, #1
 800899a:	6018      	str	r0, [r3, #0]
 800899c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f43f acd8 	beq.w	8008354 <_dtoa_r+0xa4>
 80089a4:	601d      	str	r5, [r3, #0]
 80089a6:	e4d5      	b.n	8008354 <_dtoa_r+0xa4>
 80089a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80089ac:	462b      	mov	r3, r5
 80089ae:	461d      	mov	r5, r3
 80089b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089b4:	2a39      	cmp	r2, #57	; 0x39
 80089b6:	d108      	bne.n	80089ca <_dtoa_r+0x71a>
 80089b8:	9a00      	ldr	r2, [sp, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d1f7      	bne.n	80089ae <_dtoa_r+0x6fe>
 80089be:	9a07      	ldr	r2, [sp, #28]
 80089c0:	9900      	ldr	r1, [sp, #0]
 80089c2:	3201      	adds	r2, #1
 80089c4:	9207      	str	r2, [sp, #28]
 80089c6:	2230      	movs	r2, #48	; 0x30
 80089c8:	700a      	strb	r2, [r1, #0]
 80089ca:	781a      	ldrb	r2, [r3, #0]
 80089cc:	3201      	adds	r2, #1
 80089ce:	701a      	strb	r2, [r3, #0]
 80089d0:	e78c      	b.n	80088ec <_dtoa_r+0x63c>
 80089d2:	4b7f      	ldr	r3, [pc, #508]	; (8008bd0 <_dtoa_r+0x920>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	f7f7 fe37 	bl	8000648 <__aeabi_dmul>
 80089da:	2200      	movs	r2, #0
 80089dc:	2300      	movs	r3, #0
 80089de:	4606      	mov	r6, r0
 80089e0:	460f      	mov	r7, r1
 80089e2:	f7f8 f899 	bl	8000b18 <__aeabi_dcmpeq>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d09b      	beq.n	8008922 <_dtoa_r+0x672>
 80089ea:	e7cd      	b.n	8008988 <_dtoa_r+0x6d8>
 80089ec:	9a08      	ldr	r2, [sp, #32]
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	f000 80c4 	beq.w	8008b7c <_dtoa_r+0x8cc>
 80089f4:	9a05      	ldr	r2, [sp, #20]
 80089f6:	2a01      	cmp	r2, #1
 80089f8:	f300 80a8 	bgt.w	8008b4c <_dtoa_r+0x89c>
 80089fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80089fe:	2a00      	cmp	r2, #0
 8008a00:	f000 80a0 	beq.w	8008b44 <_dtoa_r+0x894>
 8008a04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a08:	9e06      	ldr	r6, [sp, #24]
 8008a0a:	4645      	mov	r5, r8
 8008a0c:	9a04      	ldr	r2, [sp, #16]
 8008a0e:	2101      	movs	r1, #1
 8008a10:	441a      	add	r2, r3
 8008a12:	4620      	mov	r0, r4
 8008a14:	4498      	add	r8, r3
 8008a16:	9204      	str	r2, [sp, #16]
 8008a18:	f000 fd70 	bl	80094fc <__i2b>
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	2d00      	cmp	r5, #0
 8008a20:	dd0b      	ble.n	8008a3a <_dtoa_r+0x78a>
 8008a22:	9b04      	ldr	r3, [sp, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	dd08      	ble.n	8008a3a <_dtoa_r+0x78a>
 8008a28:	42ab      	cmp	r3, r5
 8008a2a:	9a04      	ldr	r2, [sp, #16]
 8008a2c:	bfa8      	it	ge
 8008a2e:	462b      	movge	r3, r5
 8008a30:	eba8 0803 	sub.w	r8, r8, r3
 8008a34:	1aed      	subs	r5, r5, r3
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	9304      	str	r3, [sp, #16]
 8008a3a:	9b06      	ldr	r3, [sp, #24]
 8008a3c:	b1fb      	cbz	r3, 8008a7e <_dtoa_r+0x7ce>
 8008a3e:	9b08      	ldr	r3, [sp, #32]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 809f 	beq.w	8008b84 <_dtoa_r+0x8d4>
 8008a46:	2e00      	cmp	r6, #0
 8008a48:	dd11      	ble.n	8008a6e <_dtoa_r+0x7be>
 8008a4a:	4639      	mov	r1, r7
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 fe10 	bl	8009674 <__pow5mult>
 8008a54:	465a      	mov	r2, fp
 8008a56:	4601      	mov	r1, r0
 8008a58:	4607      	mov	r7, r0
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fd64 	bl	8009528 <__multiply>
 8008a60:	4659      	mov	r1, fp
 8008a62:	9007      	str	r0, [sp, #28]
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 fc8d 	bl	8009384 <_Bfree>
 8008a6a:	9b07      	ldr	r3, [sp, #28]
 8008a6c:	469b      	mov	fp, r3
 8008a6e:	9b06      	ldr	r3, [sp, #24]
 8008a70:	1b9a      	subs	r2, r3, r6
 8008a72:	d004      	beq.n	8008a7e <_dtoa_r+0x7ce>
 8008a74:	4659      	mov	r1, fp
 8008a76:	4620      	mov	r0, r4
 8008a78:	f000 fdfc 	bl	8009674 <__pow5mult>
 8008a7c:	4683      	mov	fp, r0
 8008a7e:	2101      	movs	r1, #1
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fd3b 	bl	80094fc <__i2b>
 8008a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	dd7c      	ble.n	8008b88 <_dtoa_r+0x8d8>
 8008a8e:	461a      	mov	r2, r3
 8008a90:	4601      	mov	r1, r0
 8008a92:	4620      	mov	r0, r4
 8008a94:	f000 fdee 	bl	8009674 <__pow5mult>
 8008a98:	9b05      	ldr	r3, [sp, #20]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	dd76      	ble.n	8008b8e <_dtoa_r+0x8de>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9306      	str	r3, [sp, #24]
 8008aa4:	6933      	ldr	r3, [r6, #16]
 8008aa6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008aaa:	6918      	ldr	r0, [r3, #16]
 8008aac:	f000 fcd6 	bl	800945c <__hi0bits>
 8008ab0:	f1c0 0020 	rsb	r0, r0, #32
 8008ab4:	9b04      	ldr	r3, [sp, #16]
 8008ab6:	4418      	add	r0, r3
 8008ab8:	f010 001f 	ands.w	r0, r0, #31
 8008abc:	f000 8086 	beq.w	8008bcc <_dtoa_r+0x91c>
 8008ac0:	f1c0 0320 	rsb	r3, r0, #32
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	dd7f      	ble.n	8008bc8 <_dtoa_r+0x918>
 8008ac8:	f1c0 001c 	rsb	r0, r0, #28
 8008acc:	9b04      	ldr	r3, [sp, #16]
 8008ace:	4403      	add	r3, r0
 8008ad0:	4480      	add	r8, r0
 8008ad2:	4405      	add	r5, r0
 8008ad4:	9304      	str	r3, [sp, #16]
 8008ad6:	f1b8 0f00 	cmp.w	r8, #0
 8008ada:	dd05      	ble.n	8008ae8 <_dtoa_r+0x838>
 8008adc:	4659      	mov	r1, fp
 8008ade:	4642      	mov	r2, r8
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 fe21 	bl	8009728 <__lshift>
 8008ae6:	4683      	mov	fp, r0
 8008ae8:	9b04      	ldr	r3, [sp, #16]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dd05      	ble.n	8008afa <_dtoa_r+0x84a>
 8008aee:	4631      	mov	r1, r6
 8008af0:	461a      	mov	r2, r3
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 fe18 	bl	8009728 <__lshift>
 8008af8:	4606      	mov	r6, r0
 8008afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d069      	beq.n	8008bd4 <_dtoa_r+0x924>
 8008b00:	4631      	mov	r1, r6
 8008b02:	4658      	mov	r0, fp
 8008b04:	f000 fe7c 	bl	8009800 <__mcmp>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	da63      	bge.n	8008bd4 <_dtoa_r+0x924>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4659      	mov	r1, fp
 8008b10:	220a      	movs	r2, #10
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 fc58 	bl	80093c8 <__multadd>
 8008b18:	9b08      	ldr	r3, [sp, #32]
 8008b1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008b1e:	4683      	mov	fp, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 818f 	beq.w	8008e44 <_dtoa_r+0xb94>
 8008b26:	4639      	mov	r1, r7
 8008b28:	2300      	movs	r3, #0
 8008b2a:	220a      	movs	r2, #10
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 fc4b 	bl	80093c8 <__multadd>
 8008b32:	f1b9 0f00 	cmp.w	r9, #0
 8008b36:	4607      	mov	r7, r0
 8008b38:	f300 808e 	bgt.w	8008c58 <_dtoa_r+0x9a8>
 8008b3c:	9b05      	ldr	r3, [sp, #20]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	dc50      	bgt.n	8008be4 <_dtoa_r+0x934>
 8008b42:	e089      	b.n	8008c58 <_dtoa_r+0x9a8>
 8008b44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b4a:	e75d      	b.n	8008a08 <_dtoa_r+0x758>
 8008b4c:	9b01      	ldr	r3, [sp, #4]
 8008b4e:	1e5e      	subs	r6, r3, #1
 8008b50:	9b06      	ldr	r3, [sp, #24]
 8008b52:	42b3      	cmp	r3, r6
 8008b54:	bfbf      	itttt	lt
 8008b56:	9b06      	ldrlt	r3, [sp, #24]
 8008b58:	9606      	strlt	r6, [sp, #24]
 8008b5a:	1af2      	sublt	r2, r6, r3
 8008b5c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008b5e:	bfb6      	itet	lt
 8008b60:	189b      	addlt	r3, r3, r2
 8008b62:	1b9e      	subge	r6, r3, r6
 8008b64:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008b66:	9b01      	ldr	r3, [sp, #4]
 8008b68:	bfb8      	it	lt
 8008b6a:	2600      	movlt	r6, #0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bfb5      	itete	lt
 8008b70:	eba8 0503 	sublt.w	r5, r8, r3
 8008b74:	9b01      	ldrge	r3, [sp, #4]
 8008b76:	2300      	movlt	r3, #0
 8008b78:	4645      	movge	r5, r8
 8008b7a:	e747      	b.n	8008a0c <_dtoa_r+0x75c>
 8008b7c:	9e06      	ldr	r6, [sp, #24]
 8008b7e:	9f08      	ldr	r7, [sp, #32]
 8008b80:	4645      	mov	r5, r8
 8008b82:	e74c      	b.n	8008a1e <_dtoa_r+0x76e>
 8008b84:	9a06      	ldr	r2, [sp, #24]
 8008b86:	e775      	b.n	8008a74 <_dtoa_r+0x7c4>
 8008b88:	9b05      	ldr	r3, [sp, #20]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	dc18      	bgt.n	8008bc0 <_dtoa_r+0x910>
 8008b8e:	9b02      	ldr	r3, [sp, #8]
 8008b90:	b9b3      	cbnz	r3, 8008bc0 <_dtoa_r+0x910>
 8008b92:	9b03      	ldr	r3, [sp, #12]
 8008b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b98:	b9a3      	cbnz	r3, 8008bc4 <_dtoa_r+0x914>
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ba0:	0d1b      	lsrs	r3, r3, #20
 8008ba2:	051b      	lsls	r3, r3, #20
 8008ba4:	b12b      	cbz	r3, 8008bb2 <_dtoa_r+0x902>
 8008ba6:	9b04      	ldr	r3, [sp, #16]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	9304      	str	r3, [sp, #16]
 8008bac:	f108 0801 	add.w	r8, r8, #1
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	9306      	str	r3, [sp, #24]
 8008bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f47f af74 	bne.w	8008aa4 <_dtoa_r+0x7f4>
 8008bbc:	2001      	movs	r0, #1
 8008bbe:	e779      	b.n	8008ab4 <_dtoa_r+0x804>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e7f6      	b.n	8008bb2 <_dtoa_r+0x902>
 8008bc4:	9b02      	ldr	r3, [sp, #8]
 8008bc6:	e7f4      	b.n	8008bb2 <_dtoa_r+0x902>
 8008bc8:	d085      	beq.n	8008ad6 <_dtoa_r+0x826>
 8008bca:	4618      	mov	r0, r3
 8008bcc:	301c      	adds	r0, #28
 8008bce:	e77d      	b.n	8008acc <_dtoa_r+0x81c>
 8008bd0:	40240000 	.word	0x40240000
 8008bd4:	9b01      	ldr	r3, [sp, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dc38      	bgt.n	8008c4c <_dtoa_r+0x99c>
 8008bda:	9b05      	ldr	r3, [sp, #20]
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	dd35      	ble.n	8008c4c <_dtoa_r+0x99c>
 8008be0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008be4:	f1b9 0f00 	cmp.w	r9, #0
 8008be8:	d10d      	bne.n	8008c06 <_dtoa_r+0x956>
 8008bea:	4631      	mov	r1, r6
 8008bec:	464b      	mov	r3, r9
 8008bee:	2205      	movs	r2, #5
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f000 fbe9 	bl	80093c8 <__multadd>
 8008bf6:	4601      	mov	r1, r0
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	4658      	mov	r0, fp
 8008bfc:	f000 fe00 	bl	8009800 <__mcmp>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f73f adbd 	bgt.w	8008780 <_dtoa_r+0x4d0>
 8008c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c08:	9d00      	ldr	r5, [sp, #0]
 8008c0a:	ea6f 0a03 	mvn.w	sl, r3
 8008c0e:	f04f 0800 	mov.w	r8, #0
 8008c12:	4631      	mov	r1, r6
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 fbb5 	bl	8009384 <_Bfree>
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	f43f aeb4 	beq.w	8008988 <_dtoa_r+0x6d8>
 8008c20:	f1b8 0f00 	cmp.w	r8, #0
 8008c24:	d005      	beq.n	8008c32 <_dtoa_r+0x982>
 8008c26:	45b8      	cmp	r8, r7
 8008c28:	d003      	beq.n	8008c32 <_dtoa_r+0x982>
 8008c2a:	4641      	mov	r1, r8
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f000 fba9 	bl	8009384 <_Bfree>
 8008c32:	4639      	mov	r1, r7
 8008c34:	4620      	mov	r0, r4
 8008c36:	f000 fba5 	bl	8009384 <_Bfree>
 8008c3a:	e6a5      	b.n	8008988 <_dtoa_r+0x6d8>
 8008c3c:	2600      	movs	r6, #0
 8008c3e:	4637      	mov	r7, r6
 8008c40:	e7e1      	b.n	8008c06 <_dtoa_r+0x956>
 8008c42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008c44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008c48:	4637      	mov	r7, r6
 8008c4a:	e599      	b.n	8008780 <_dtoa_r+0x4d0>
 8008c4c:	9b08      	ldr	r3, [sp, #32]
 8008c4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 80fd 	beq.w	8008e52 <_dtoa_r+0xba2>
 8008c58:	2d00      	cmp	r5, #0
 8008c5a:	dd05      	ble.n	8008c68 <_dtoa_r+0x9b8>
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	462a      	mov	r2, r5
 8008c60:	4620      	mov	r0, r4
 8008c62:	f000 fd61 	bl	8009728 <__lshift>
 8008c66:	4607      	mov	r7, r0
 8008c68:	9b06      	ldr	r3, [sp, #24]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d05c      	beq.n	8008d28 <_dtoa_r+0xa78>
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 fb47 	bl	8009304 <_Balloc>
 8008c76:	4605      	mov	r5, r0
 8008c78:	b928      	cbnz	r0, 8008c86 <_dtoa_r+0x9d6>
 8008c7a:	4b80      	ldr	r3, [pc, #512]	; (8008e7c <_dtoa_r+0xbcc>)
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c82:	f7ff bb2e 	b.w	80082e2 <_dtoa_r+0x32>
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	3202      	adds	r2, #2
 8008c8a:	0092      	lsls	r2, r2, #2
 8008c8c:	f107 010c 	add.w	r1, r7, #12
 8008c90:	300c      	adds	r0, #12
 8008c92:	f7fe fd41 	bl	8007718 <memcpy>
 8008c96:	2201      	movs	r2, #1
 8008c98:	4629      	mov	r1, r5
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f000 fd44 	bl	8009728 <__lshift>
 8008ca0:	9b00      	ldr	r3, [sp, #0]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	9b00      	ldr	r3, [sp, #0]
 8008ca8:	444b      	add	r3, r9
 8008caa:	9307      	str	r3, [sp, #28]
 8008cac:	9b02      	ldr	r3, [sp, #8]
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	46b8      	mov	r8, r7
 8008cb4:	9306      	str	r3, [sp, #24]
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	9b01      	ldr	r3, [sp, #4]
 8008cba:	4631      	mov	r1, r6
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	4658      	mov	r0, fp
 8008cc0:	9302      	str	r3, [sp, #8]
 8008cc2:	f7ff fa69 	bl	8008198 <quorem>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	3330      	adds	r3, #48	; 0x30
 8008cca:	9004      	str	r0, [sp, #16]
 8008ccc:	4641      	mov	r1, r8
 8008cce:	4658      	mov	r0, fp
 8008cd0:	9308      	str	r3, [sp, #32]
 8008cd2:	f000 fd95 	bl	8009800 <__mcmp>
 8008cd6:	463a      	mov	r2, r7
 8008cd8:	4681      	mov	r9, r0
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f000 fdab 	bl	8009838 <__mdiff>
 8008ce2:	68c2      	ldr	r2, [r0, #12]
 8008ce4:	9b08      	ldr	r3, [sp, #32]
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	bb02      	cbnz	r2, 8008d2c <_dtoa_r+0xa7c>
 8008cea:	4601      	mov	r1, r0
 8008cec:	4658      	mov	r0, fp
 8008cee:	f000 fd87 	bl	8009800 <__mcmp>
 8008cf2:	9b08      	ldr	r3, [sp, #32]
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008cfe:	f000 fb41 	bl	8009384 <_Bfree>
 8008d02:	9b05      	ldr	r3, [sp, #20]
 8008d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d06:	9d01      	ldr	r5, [sp, #4]
 8008d08:	ea43 0102 	orr.w	r1, r3, r2
 8008d0c:	9b06      	ldr	r3, [sp, #24]
 8008d0e:	430b      	orrs	r3, r1
 8008d10:	9b08      	ldr	r3, [sp, #32]
 8008d12:	d10d      	bne.n	8008d30 <_dtoa_r+0xa80>
 8008d14:	2b39      	cmp	r3, #57	; 0x39
 8008d16:	d029      	beq.n	8008d6c <_dtoa_r+0xabc>
 8008d18:	f1b9 0f00 	cmp.w	r9, #0
 8008d1c:	dd01      	ble.n	8008d22 <_dtoa_r+0xa72>
 8008d1e:	9b04      	ldr	r3, [sp, #16]
 8008d20:	3331      	adds	r3, #49	; 0x31
 8008d22:	9a02      	ldr	r2, [sp, #8]
 8008d24:	7013      	strb	r3, [r2, #0]
 8008d26:	e774      	b.n	8008c12 <_dtoa_r+0x962>
 8008d28:	4638      	mov	r0, r7
 8008d2a:	e7b9      	b.n	8008ca0 <_dtoa_r+0x9f0>
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	e7e2      	b.n	8008cf6 <_dtoa_r+0xa46>
 8008d30:	f1b9 0f00 	cmp.w	r9, #0
 8008d34:	db06      	blt.n	8008d44 <_dtoa_r+0xa94>
 8008d36:	9905      	ldr	r1, [sp, #20]
 8008d38:	ea41 0909 	orr.w	r9, r1, r9
 8008d3c:	9906      	ldr	r1, [sp, #24]
 8008d3e:	ea59 0101 	orrs.w	r1, r9, r1
 8008d42:	d120      	bne.n	8008d86 <_dtoa_r+0xad6>
 8008d44:	2a00      	cmp	r2, #0
 8008d46:	ddec      	ble.n	8008d22 <_dtoa_r+0xa72>
 8008d48:	4659      	mov	r1, fp
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	9301      	str	r3, [sp, #4]
 8008d50:	f000 fcea 	bl	8009728 <__lshift>
 8008d54:	4631      	mov	r1, r6
 8008d56:	4683      	mov	fp, r0
 8008d58:	f000 fd52 	bl	8009800 <__mcmp>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	9b01      	ldr	r3, [sp, #4]
 8008d60:	dc02      	bgt.n	8008d68 <_dtoa_r+0xab8>
 8008d62:	d1de      	bne.n	8008d22 <_dtoa_r+0xa72>
 8008d64:	07da      	lsls	r2, r3, #31
 8008d66:	d5dc      	bpl.n	8008d22 <_dtoa_r+0xa72>
 8008d68:	2b39      	cmp	r3, #57	; 0x39
 8008d6a:	d1d8      	bne.n	8008d1e <_dtoa_r+0xa6e>
 8008d6c:	9a02      	ldr	r2, [sp, #8]
 8008d6e:	2339      	movs	r3, #57	; 0x39
 8008d70:	7013      	strb	r3, [r2, #0]
 8008d72:	462b      	mov	r3, r5
 8008d74:	461d      	mov	r5, r3
 8008d76:	3b01      	subs	r3, #1
 8008d78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d7c:	2a39      	cmp	r2, #57	; 0x39
 8008d7e:	d050      	beq.n	8008e22 <_dtoa_r+0xb72>
 8008d80:	3201      	adds	r2, #1
 8008d82:	701a      	strb	r2, [r3, #0]
 8008d84:	e745      	b.n	8008c12 <_dtoa_r+0x962>
 8008d86:	2a00      	cmp	r2, #0
 8008d88:	dd03      	ble.n	8008d92 <_dtoa_r+0xae2>
 8008d8a:	2b39      	cmp	r3, #57	; 0x39
 8008d8c:	d0ee      	beq.n	8008d6c <_dtoa_r+0xabc>
 8008d8e:	3301      	adds	r3, #1
 8008d90:	e7c7      	b.n	8008d22 <_dtoa_r+0xa72>
 8008d92:	9a01      	ldr	r2, [sp, #4]
 8008d94:	9907      	ldr	r1, [sp, #28]
 8008d96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008d9a:	428a      	cmp	r2, r1
 8008d9c:	d02a      	beq.n	8008df4 <_dtoa_r+0xb44>
 8008d9e:	4659      	mov	r1, fp
 8008da0:	2300      	movs	r3, #0
 8008da2:	220a      	movs	r2, #10
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fb0f 	bl	80093c8 <__multadd>
 8008daa:	45b8      	cmp	r8, r7
 8008dac:	4683      	mov	fp, r0
 8008dae:	f04f 0300 	mov.w	r3, #0
 8008db2:	f04f 020a 	mov.w	r2, #10
 8008db6:	4641      	mov	r1, r8
 8008db8:	4620      	mov	r0, r4
 8008dba:	d107      	bne.n	8008dcc <_dtoa_r+0xb1c>
 8008dbc:	f000 fb04 	bl	80093c8 <__multadd>
 8008dc0:	4680      	mov	r8, r0
 8008dc2:	4607      	mov	r7, r0
 8008dc4:	9b01      	ldr	r3, [sp, #4]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	e775      	b.n	8008cb8 <_dtoa_r+0xa08>
 8008dcc:	f000 fafc 	bl	80093c8 <__multadd>
 8008dd0:	4639      	mov	r1, r7
 8008dd2:	4680      	mov	r8, r0
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	220a      	movs	r2, #10
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f000 faf5 	bl	80093c8 <__multadd>
 8008dde:	4607      	mov	r7, r0
 8008de0:	e7f0      	b.n	8008dc4 <_dtoa_r+0xb14>
 8008de2:	f1b9 0f00 	cmp.w	r9, #0
 8008de6:	9a00      	ldr	r2, [sp, #0]
 8008de8:	bfcc      	ite	gt
 8008dea:	464d      	movgt	r5, r9
 8008dec:	2501      	movle	r5, #1
 8008dee:	4415      	add	r5, r2
 8008df0:	f04f 0800 	mov.w	r8, #0
 8008df4:	4659      	mov	r1, fp
 8008df6:	2201      	movs	r2, #1
 8008df8:	4620      	mov	r0, r4
 8008dfa:	9301      	str	r3, [sp, #4]
 8008dfc:	f000 fc94 	bl	8009728 <__lshift>
 8008e00:	4631      	mov	r1, r6
 8008e02:	4683      	mov	fp, r0
 8008e04:	f000 fcfc 	bl	8009800 <__mcmp>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	dcb2      	bgt.n	8008d72 <_dtoa_r+0xac2>
 8008e0c:	d102      	bne.n	8008e14 <_dtoa_r+0xb64>
 8008e0e:	9b01      	ldr	r3, [sp, #4]
 8008e10:	07db      	lsls	r3, r3, #31
 8008e12:	d4ae      	bmi.n	8008d72 <_dtoa_r+0xac2>
 8008e14:	462b      	mov	r3, r5
 8008e16:	461d      	mov	r5, r3
 8008e18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e1c:	2a30      	cmp	r2, #48	; 0x30
 8008e1e:	d0fa      	beq.n	8008e16 <_dtoa_r+0xb66>
 8008e20:	e6f7      	b.n	8008c12 <_dtoa_r+0x962>
 8008e22:	9a00      	ldr	r2, [sp, #0]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d1a5      	bne.n	8008d74 <_dtoa_r+0xac4>
 8008e28:	f10a 0a01 	add.w	sl, sl, #1
 8008e2c:	2331      	movs	r3, #49	; 0x31
 8008e2e:	e779      	b.n	8008d24 <_dtoa_r+0xa74>
 8008e30:	4b13      	ldr	r3, [pc, #76]	; (8008e80 <_dtoa_r+0xbd0>)
 8008e32:	f7ff baaf 	b.w	8008394 <_dtoa_r+0xe4>
 8008e36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f47f aa86 	bne.w	800834a <_dtoa_r+0x9a>
 8008e3e:	4b11      	ldr	r3, [pc, #68]	; (8008e84 <_dtoa_r+0xbd4>)
 8008e40:	f7ff baa8 	b.w	8008394 <_dtoa_r+0xe4>
 8008e44:	f1b9 0f00 	cmp.w	r9, #0
 8008e48:	dc03      	bgt.n	8008e52 <_dtoa_r+0xba2>
 8008e4a:	9b05      	ldr	r3, [sp, #20]
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	f73f aec9 	bgt.w	8008be4 <_dtoa_r+0x934>
 8008e52:	9d00      	ldr	r5, [sp, #0]
 8008e54:	4631      	mov	r1, r6
 8008e56:	4658      	mov	r0, fp
 8008e58:	f7ff f99e 	bl	8008198 <quorem>
 8008e5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008e60:	f805 3b01 	strb.w	r3, [r5], #1
 8008e64:	9a00      	ldr	r2, [sp, #0]
 8008e66:	1aaa      	subs	r2, r5, r2
 8008e68:	4591      	cmp	r9, r2
 8008e6a:	ddba      	ble.n	8008de2 <_dtoa_r+0xb32>
 8008e6c:	4659      	mov	r1, fp
 8008e6e:	2300      	movs	r3, #0
 8008e70:	220a      	movs	r2, #10
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 faa8 	bl	80093c8 <__multadd>
 8008e78:	4683      	mov	fp, r0
 8008e7a:	e7eb      	b.n	8008e54 <_dtoa_r+0xba4>
 8008e7c:	0800a3ac 	.word	0x0800a3ac
 8008e80:	0800a204 	.word	0x0800a204
 8008e84:	0800a329 	.word	0x0800a329

08008e88 <__sflush_r>:
 8008e88:	898a      	ldrh	r2, [r1, #12]
 8008e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8e:	4605      	mov	r5, r0
 8008e90:	0710      	lsls	r0, r2, #28
 8008e92:	460c      	mov	r4, r1
 8008e94:	d458      	bmi.n	8008f48 <__sflush_r+0xc0>
 8008e96:	684b      	ldr	r3, [r1, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	dc05      	bgt.n	8008ea8 <__sflush_r+0x20>
 8008e9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	dc02      	bgt.n	8008ea8 <__sflush_r+0x20>
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eaa:	2e00      	cmp	r6, #0
 8008eac:	d0f9      	beq.n	8008ea2 <__sflush_r+0x1a>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008eb4:	682f      	ldr	r7, [r5, #0]
 8008eb6:	602b      	str	r3, [r5, #0]
 8008eb8:	d032      	beq.n	8008f20 <__sflush_r+0x98>
 8008eba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	075a      	lsls	r2, r3, #29
 8008ec0:	d505      	bpl.n	8008ece <__sflush_r+0x46>
 8008ec2:	6863      	ldr	r3, [r4, #4]
 8008ec4:	1ac0      	subs	r0, r0, r3
 8008ec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ec8:	b10b      	cbz	r3, 8008ece <__sflush_r+0x46>
 8008eca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ecc:	1ac0      	subs	r0, r0, r3
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ed4:	6a21      	ldr	r1, [r4, #32]
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	47b0      	blx	r6
 8008eda:	1c43      	adds	r3, r0, #1
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	d106      	bne.n	8008eee <__sflush_r+0x66>
 8008ee0:	6829      	ldr	r1, [r5, #0]
 8008ee2:	291d      	cmp	r1, #29
 8008ee4:	d82c      	bhi.n	8008f40 <__sflush_r+0xb8>
 8008ee6:	4a2a      	ldr	r2, [pc, #168]	; (8008f90 <__sflush_r+0x108>)
 8008ee8:	40ca      	lsrs	r2, r1
 8008eea:	07d6      	lsls	r6, r2, #31
 8008eec:	d528      	bpl.n	8008f40 <__sflush_r+0xb8>
 8008eee:	2200      	movs	r2, #0
 8008ef0:	6062      	str	r2, [r4, #4]
 8008ef2:	04d9      	lsls	r1, r3, #19
 8008ef4:	6922      	ldr	r2, [r4, #16]
 8008ef6:	6022      	str	r2, [r4, #0]
 8008ef8:	d504      	bpl.n	8008f04 <__sflush_r+0x7c>
 8008efa:	1c42      	adds	r2, r0, #1
 8008efc:	d101      	bne.n	8008f02 <__sflush_r+0x7a>
 8008efe:	682b      	ldr	r3, [r5, #0]
 8008f00:	b903      	cbnz	r3, 8008f04 <__sflush_r+0x7c>
 8008f02:	6560      	str	r0, [r4, #84]	; 0x54
 8008f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f06:	602f      	str	r7, [r5, #0]
 8008f08:	2900      	cmp	r1, #0
 8008f0a:	d0ca      	beq.n	8008ea2 <__sflush_r+0x1a>
 8008f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f10:	4299      	cmp	r1, r3
 8008f12:	d002      	beq.n	8008f1a <__sflush_r+0x92>
 8008f14:	4628      	mov	r0, r5
 8008f16:	f000 fd83 	bl	8009a20 <_free_r>
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	6360      	str	r0, [r4, #52]	; 0x34
 8008f1e:	e7c1      	b.n	8008ea4 <__sflush_r+0x1c>
 8008f20:	6a21      	ldr	r1, [r4, #32]
 8008f22:	2301      	movs	r3, #1
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b0      	blx	r6
 8008f28:	1c41      	adds	r1, r0, #1
 8008f2a:	d1c7      	bne.n	8008ebc <__sflush_r+0x34>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0c4      	beq.n	8008ebc <__sflush_r+0x34>
 8008f32:	2b1d      	cmp	r3, #29
 8008f34:	d001      	beq.n	8008f3a <__sflush_r+0xb2>
 8008f36:	2b16      	cmp	r3, #22
 8008f38:	d101      	bne.n	8008f3e <__sflush_r+0xb6>
 8008f3a:	602f      	str	r7, [r5, #0]
 8008f3c:	e7b1      	b.n	8008ea2 <__sflush_r+0x1a>
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	e7ad      	b.n	8008ea4 <__sflush_r+0x1c>
 8008f48:	690f      	ldr	r7, [r1, #16]
 8008f4a:	2f00      	cmp	r7, #0
 8008f4c:	d0a9      	beq.n	8008ea2 <__sflush_r+0x1a>
 8008f4e:	0793      	lsls	r3, r2, #30
 8008f50:	680e      	ldr	r6, [r1, #0]
 8008f52:	bf08      	it	eq
 8008f54:	694b      	ldreq	r3, [r1, #20]
 8008f56:	600f      	str	r7, [r1, #0]
 8008f58:	bf18      	it	ne
 8008f5a:	2300      	movne	r3, #0
 8008f5c:	eba6 0807 	sub.w	r8, r6, r7
 8008f60:	608b      	str	r3, [r1, #8]
 8008f62:	f1b8 0f00 	cmp.w	r8, #0
 8008f66:	dd9c      	ble.n	8008ea2 <__sflush_r+0x1a>
 8008f68:	6a21      	ldr	r1, [r4, #32]
 8008f6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f6c:	4643      	mov	r3, r8
 8008f6e:	463a      	mov	r2, r7
 8008f70:	4628      	mov	r0, r5
 8008f72:	47b0      	blx	r6
 8008f74:	2800      	cmp	r0, #0
 8008f76:	dc06      	bgt.n	8008f86 <__sflush_r+0xfe>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f7e:	81a3      	strh	r3, [r4, #12]
 8008f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f84:	e78e      	b.n	8008ea4 <__sflush_r+0x1c>
 8008f86:	4407      	add	r7, r0
 8008f88:	eba8 0800 	sub.w	r8, r8, r0
 8008f8c:	e7e9      	b.n	8008f62 <__sflush_r+0xda>
 8008f8e:	bf00      	nop
 8008f90:	20400001 	.word	0x20400001

08008f94 <_fflush_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	690b      	ldr	r3, [r1, #16]
 8008f98:	4605      	mov	r5, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	b913      	cbnz	r3, 8008fa4 <_fflush_r+0x10>
 8008f9e:	2500      	movs	r5, #0
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	b118      	cbz	r0, 8008fae <_fflush_r+0x1a>
 8008fa6:	6983      	ldr	r3, [r0, #24]
 8008fa8:	b90b      	cbnz	r3, 8008fae <_fflush_r+0x1a>
 8008faa:	f000 f887 	bl	80090bc <__sinit>
 8008fae:	4b14      	ldr	r3, [pc, #80]	; (8009000 <_fflush_r+0x6c>)
 8008fb0:	429c      	cmp	r4, r3
 8008fb2:	d11b      	bne.n	8008fec <_fflush_r+0x58>
 8008fb4:	686c      	ldr	r4, [r5, #4]
 8008fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d0ef      	beq.n	8008f9e <_fflush_r+0xa>
 8008fbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fc0:	07d0      	lsls	r0, r2, #31
 8008fc2:	d404      	bmi.n	8008fce <_fflush_r+0x3a>
 8008fc4:	0599      	lsls	r1, r3, #22
 8008fc6:	d402      	bmi.n	8008fce <_fflush_r+0x3a>
 8008fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fca:	f000 f91a 	bl	8009202 <__retarget_lock_acquire_recursive>
 8008fce:	4628      	mov	r0, r5
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	f7ff ff59 	bl	8008e88 <__sflush_r>
 8008fd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fd8:	07da      	lsls	r2, r3, #31
 8008fda:	4605      	mov	r5, r0
 8008fdc:	d4e0      	bmi.n	8008fa0 <_fflush_r+0xc>
 8008fde:	89a3      	ldrh	r3, [r4, #12]
 8008fe0:	059b      	lsls	r3, r3, #22
 8008fe2:	d4dd      	bmi.n	8008fa0 <_fflush_r+0xc>
 8008fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fe6:	f000 f90d 	bl	8009204 <__retarget_lock_release_recursive>
 8008fea:	e7d9      	b.n	8008fa0 <_fflush_r+0xc>
 8008fec:	4b05      	ldr	r3, [pc, #20]	; (8009004 <_fflush_r+0x70>)
 8008fee:	429c      	cmp	r4, r3
 8008ff0:	d101      	bne.n	8008ff6 <_fflush_r+0x62>
 8008ff2:	68ac      	ldr	r4, [r5, #8]
 8008ff4:	e7df      	b.n	8008fb6 <_fflush_r+0x22>
 8008ff6:	4b04      	ldr	r3, [pc, #16]	; (8009008 <_fflush_r+0x74>)
 8008ff8:	429c      	cmp	r4, r3
 8008ffa:	bf08      	it	eq
 8008ffc:	68ec      	ldreq	r4, [r5, #12]
 8008ffe:	e7da      	b.n	8008fb6 <_fflush_r+0x22>
 8009000:	0800a3e0 	.word	0x0800a3e0
 8009004:	0800a400 	.word	0x0800a400
 8009008:	0800a3c0 	.word	0x0800a3c0

0800900c <std>:
 800900c:	2300      	movs	r3, #0
 800900e:	b510      	push	{r4, lr}
 8009010:	4604      	mov	r4, r0
 8009012:	e9c0 3300 	strd	r3, r3, [r0]
 8009016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800901a:	6083      	str	r3, [r0, #8]
 800901c:	8181      	strh	r1, [r0, #12]
 800901e:	6643      	str	r3, [r0, #100]	; 0x64
 8009020:	81c2      	strh	r2, [r0, #14]
 8009022:	6183      	str	r3, [r0, #24]
 8009024:	4619      	mov	r1, r3
 8009026:	2208      	movs	r2, #8
 8009028:	305c      	adds	r0, #92	; 0x5c
 800902a:	f7fe fb83 	bl	8007734 <memset>
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <std+0x38>)
 8009030:	6263      	str	r3, [r4, #36]	; 0x24
 8009032:	4b05      	ldr	r3, [pc, #20]	; (8009048 <std+0x3c>)
 8009034:	62a3      	str	r3, [r4, #40]	; 0x28
 8009036:	4b05      	ldr	r3, [pc, #20]	; (800904c <std+0x40>)
 8009038:	62e3      	str	r3, [r4, #44]	; 0x2c
 800903a:	4b05      	ldr	r3, [pc, #20]	; (8009050 <std+0x44>)
 800903c:	6224      	str	r4, [r4, #32]
 800903e:	6323      	str	r3, [r4, #48]	; 0x30
 8009040:	bd10      	pop	{r4, pc}
 8009042:	bf00      	nop
 8009044:	08009e49 	.word	0x08009e49
 8009048:	08009e6b 	.word	0x08009e6b
 800904c:	08009ea3 	.word	0x08009ea3
 8009050:	08009ec7 	.word	0x08009ec7

08009054 <_cleanup_r>:
 8009054:	4901      	ldr	r1, [pc, #4]	; (800905c <_cleanup_r+0x8>)
 8009056:	f000 b8af 	b.w	80091b8 <_fwalk_reent>
 800905a:	bf00      	nop
 800905c:	08008f95 	.word	0x08008f95

08009060 <__sfmoreglue>:
 8009060:	b570      	push	{r4, r5, r6, lr}
 8009062:	1e4a      	subs	r2, r1, #1
 8009064:	2568      	movs	r5, #104	; 0x68
 8009066:	4355      	muls	r5, r2
 8009068:	460e      	mov	r6, r1
 800906a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800906e:	f000 fd27 	bl	8009ac0 <_malloc_r>
 8009072:	4604      	mov	r4, r0
 8009074:	b140      	cbz	r0, 8009088 <__sfmoreglue+0x28>
 8009076:	2100      	movs	r1, #0
 8009078:	e9c0 1600 	strd	r1, r6, [r0]
 800907c:	300c      	adds	r0, #12
 800907e:	60a0      	str	r0, [r4, #8]
 8009080:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009084:	f7fe fb56 	bl	8007734 <memset>
 8009088:	4620      	mov	r0, r4
 800908a:	bd70      	pop	{r4, r5, r6, pc}

0800908c <__sfp_lock_acquire>:
 800908c:	4801      	ldr	r0, [pc, #4]	; (8009094 <__sfp_lock_acquire+0x8>)
 800908e:	f000 b8b8 	b.w	8009202 <__retarget_lock_acquire_recursive>
 8009092:	bf00      	nop
 8009094:	20001430 	.word	0x20001430

08009098 <__sfp_lock_release>:
 8009098:	4801      	ldr	r0, [pc, #4]	; (80090a0 <__sfp_lock_release+0x8>)
 800909a:	f000 b8b3 	b.w	8009204 <__retarget_lock_release_recursive>
 800909e:	bf00      	nop
 80090a0:	20001430 	.word	0x20001430

080090a4 <__sinit_lock_acquire>:
 80090a4:	4801      	ldr	r0, [pc, #4]	; (80090ac <__sinit_lock_acquire+0x8>)
 80090a6:	f000 b8ac 	b.w	8009202 <__retarget_lock_acquire_recursive>
 80090aa:	bf00      	nop
 80090ac:	2000142b 	.word	0x2000142b

080090b0 <__sinit_lock_release>:
 80090b0:	4801      	ldr	r0, [pc, #4]	; (80090b8 <__sinit_lock_release+0x8>)
 80090b2:	f000 b8a7 	b.w	8009204 <__retarget_lock_release_recursive>
 80090b6:	bf00      	nop
 80090b8:	2000142b 	.word	0x2000142b

080090bc <__sinit>:
 80090bc:	b510      	push	{r4, lr}
 80090be:	4604      	mov	r4, r0
 80090c0:	f7ff fff0 	bl	80090a4 <__sinit_lock_acquire>
 80090c4:	69a3      	ldr	r3, [r4, #24]
 80090c6:	b11b      	cbz	r3, 80090d0 <__sinit+0x14>
 80090c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090cc:	f7ff bff0 	b.w	80090b0 <__sinit_lock_release>
 80090d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090d4:	6523      	str	r3, [r4, #80]	; 0x50
 80090d6:	4b13      	ldr	r3, [pc, #76]	; (8009124 <__sinit+0x68>)
 80090d8:	4a13      	ldr	r2, [pc, #76]	; (8009128 <__sinit+0x6c>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80090de:	42a3      	cmp	r3, r4
 80090e0:	bf04      	itt	eq
 80090e2:	2301      	moveq	r3, #1
 80090e4:	61a3      	streq	r3, [r4, #24]
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 f820 	bl	800912c <__sfp>
 80090ec:	6060      	str	r0, [r4, #4]
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 f81c 	bl	800912c <__sfp>
 80090f4:	60a0      	str	r0, [r4, #8]
 80090f6:	4620      	mov	r0, r4
 80090f8:	f000 f818 	bl	800912c <__sfp>
 80090fc:	2200      	movs	r2, #0
 80090fe:	60e0      	str	r0, [r4, #12]
 8009100:	2104      	movs	r1, #4
 8009102:	6860      	ldr	r0, [r4, #4]
 8009104:	f7ff ff82 	bl	800900c <std>
 8009108:	68a0      	ldr	r0, [r4, #8]
 800910a:	2201      	movs	r2, #1
 800910c:	2109      	movs	r1, #9
 800910e:	f7ff ff7d 	bl	800900c <std>
 8009112:	68e0      	ldr	r0, [r4, #12]
 8009114:	2202      	movs	r2, #2
 8009116:	2112      	movs	r1, #18
 8009118:	f7ff ff78 	bl	800900c <std>
 800911c:	2301      	movs	r3, #1
 800911e:	61a3      	str	r3, [r4, #24]
 8009120:	e7d2      	b.n	80090c8 <__sinit+0xc>
 8009122:	bf00      	nop
 8009124:	0800a1f0 	.word	0x0800a1f0
 8009128:	08009055 	.word	0x08009055

0800912c <__sfp>:
 800912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912e:	4607      	mov	r7, r0
 8009130:	f7ff ffac 	bl	800908c <__sfp_lock_acquire>
 8009134:	4b1e      	ldr	r3, [pc, #120]	; (80091b0 <__sfp+0x84>)
 8009136:	681e      	ldr	r6, [r3, #0]
 8009138:	69b3      	ldr	r3, [r6, #24]
 800913a:	b913      	cbnz	r3, 8009142 <__sfp+0x16>
 800913c:	4630      	mov	r0, r6
 800913e:	f7ff ffbd 	bl	80090bc <__sinit>
 8009142:	3648      	adds	r6, #72	; 0x48
 8009144:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009148:	3b01      	subs	r3, #1
 800914a:	d503      	bpl.n	8009154 <__sfp+0x28>
 800914c:	6833      	ldr	r3, [r6, #0]
 800914e:	b30b      	cbz	r3, 8009194 <__sfp+0x68>
 8009150:	6836      	ldr	r6, [r6, #0]
 8009152:	e7f7      	b.n	8009144 <__sfp+0x18>
 8009154:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009158:	b9d5      	cbnz	r5, 8009190 <__sfp+0x64>
 800915a:	4b16      	ldr	r3, [pc, #88]	; (80091b4 <__sfp+0x88>)
 800915c:	60e3      	str	r3, [r4, #12]
 800915e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009162:	6665      	str	r5, [r4, #100]	; 0x64
 8009164:	f000 f84c 	bl	8009200 <__retarget_lock_init_recursive>
 8009168:	f7ff ff96 	bl	8009098 <__sfp_lock_release>
 800916c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009170:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009174:	6025      	str	r5, [r4, #0]
 8009176:	61a5      	str	r5, [r4, #24]
 8009178:	2208      	movs	r2, #8
 800917a:	4629      	mov	r1, r5
 800917c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009180:	f7fe fad8 	bl	8007734 <memset>
 8009184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800918c:	4620      	mov	r0, r4
 800918e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009190:	3468      	adds	r4, #104	; 0x68
 8009192:	e7d9      	b.n	8009148 <__sfp+0x1c>
 8009194:	2104      	movs	r1, #4
 8009196:	4638      	mov	r0, r7
 8009198:	f7ff ff62 	bl	8009060 <__sfmoreglue>
 800919c:	4604      	mov	r4, r0
 800919e:	6030      	str	r0, [r6, #0]
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d1d5      	bne.n	8009150 <__sfp+0x24>
 80091a4:	f7ff ff78 	bl	8009098 <__sfp_lock_release>
 80091a8:	230c      	movs	r3, #12
 80091aa:	603b      	str	r3, [r7, #0]
 80091ac:	e7ee      	b.n	800918c <__sfp+0x60>
 80091ae:	bf00      	nop
 80091b0:	0800a1f0 	.word	0x0800a1f0
 80091b4:	ffff0001 	.word	0xffff0001

080091b8 <_fwalk_reent>:
 80091b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091bc:	4606      	mov	r6, r0
 80091be:	4688      	mov	r8, r1
 80091c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091c4:	2700      	movs	r7, #0
 80091c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091ca:	f1b9 0901 	subs.w	r9, r9, #1
 80091ce:	d505      	bpl.n	80091dc <_fwalk_reent+0x24>
 80091d0:	6824      	ldr	r4, [r4, #0]
 80091d2:	2c00      	cmp	r4, #0
 80091d4:	d1f7      	bne.n	80091c6 <_fwalk_reent+0xe>
 80091d6:	4638      	mov	r0, r7
 80091d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091dc:	89ab      	ldrh	r3, [r5, #12]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d907      	bls.n	80091f2 <_fwalk_reent+0x3a>
 80091e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091e6:	3301      	adds	r3, #1
 80091e8:	d003      	beq.n	80091f2 <_fwalk_reent+0x3a>
 80091ea:	4629      	mov	r1, r5
 80091ec:	4630      	mov	r0, r6
 80091ee:	47c0      	blx	r8
 80091f0:	4307      	orrs	r7, r0
 80091f2:	3568      	adds	r5, #104	; 0x68
 80091f4:	e7e9      	b.n	80091ca <_fwalk_reent+0x12>
	...

080091f8 <_localeconv_r>:
 80091f8:	4800      	ldr	r0, [pc, #0]	; (80091fc <_localeconv_r+0x4>)
 80091fa:	4770      	bx	lr
 80091fc:	20000164 	.word	0x20000164

08009200 <__retarget_lock_init_recursive>:
 8009200:	4770      	bx	lr

08009202 <__retarget_lock_acquire_recursive>:
 8009202:	4770      	bx	lr

08009204 <__retarget_lock_release_recursive>:
 8009204:	4770      	bx	lr

08009206 <__swhatbuf_r>:
 8009206:	b570      	push	{r4, r5, r6, lr}
 8009208:	460e      	mov	r6, r1
 800920a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920e:	2900      	cmp	r1, #0
 8009210:	b096      	sub	sp, #88	; 0x58
 8009212:	4614      	mov	r4, r2
 8009214:	461d      	mov	r5, r3
 8009216:	da07      	bge.n	8009228 <__swhatbuf_r+0x22>
 8009218:	2300      	movs	r3, #0
 800921a:	602b      	str	r3, [r5, #0]
 800921c:	89b3      	ldrh	r3, [r6, #12]
 800921e:	061a      	lsls	r2, r3, #24
 8009220:	d410      	bmi.n	8009244 <__swhatbuf_r+0x3e>
 8009222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009226:	e00e      	b.n	8009246 <__swhatbuf_r+0x40>
 8009228:	466a      	mov	r2, sp
 800922a:	f000 feaf 	bl	8009f8c <_fstat_r>
 800922e:	2800      	cmp	r0, #0
 8009230:	dbf2      	blt.n	8009218 <__swhatbuf_r+0x12>
 8009232:	9a01      	ldr	r2, [sp, #4]
 8009234:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009238:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800923c:	425a      	negs	r2, r3
 800923e:	415a      	adcs	r2, r3
 8009240:	602a      	str	r2, [r5, #0]
 8009242:	e7ee      	b.n	8009222 <__swhatbuf_r+0x1c>
 8009244:	2340      	movs	r3, #64	; 0x40
 8009246:	2000      	movs	r0, #0
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	b016      	add	sp, #88	; 0x58
 800924c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009250 <__smakebuf_r>:
 8009250:	898b      	ldrh	r3, [r1, #12]
 8009252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009254:	079d      	lsls	r5, r3, #30
 8009256:	4606      	mov	r6, r0
 8009258:	460c      	mov	r4, r1
 800925a:	d507      	bpl.n	800926c <__smakebuf_r+0x1c>
 800925c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	6123      	str	r3, [r4, #16]
 8009264:	2301      	movs	r3, #1
 8009266:	6163      	str	r3, [r4, #20]
 8009268:	b002      	add	sp, #8
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	ab01      	add	r3, sp, #4
 800926e:	466a      	mov	r2, sp
 8009270:	f7ff ffc9 	bl	8009206 <__swhatbuf_r>
 8009274:	9900      	ldr	r1, [sp, #0]
 8009276:	4605      	mov	r5, r0
 8009278:	4630      	mov	r0, r6
 800927a:	f000 fc21 	bl	8009ac0 <_malloc_r>
 800927e:	b948      	cbnz	r0, 8009294 <__smakebuf_r+0x44>
 8009280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009284:	059a      	lsls	r2, r3, #22
 8009286:	d4ef      	bmi.n	8009268 <__smakebuf_r+0x18>
 8009288:	f023 0303 	bic.w	r3, r3, #3
 800928c:	f043 0302 	orr.w	r3, r3, #2
 8009290:	81a3      	strh	r3, [r4, #12]
 8009292:	e7e3      	b.n	800925c <__smakebuf_r+0xc>
 8009294:	4b0d      	ldr	r3, [pc, #52]	; (80092cc <__smakebuf_r+0x7c>)
 8009296:	62b3      	str	r3, [r6, #40]	; 0x28
 8009298:	89a3      	ldrh	r3, [r4, #12]
 800929a:	6020      	str	r0, [r4, #0]
 800929c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a0:	81a3      	strh	r3, [r4, #12]
 80092a2:	9b00      	ldr	r3, [sp, #0]
 80092a4:	6163      	str	r3, [r4, #20]
 80092a6:	9b01      	ldr	r3, [sp, #4]
 80092a8:	6120      	str	r0, [r4, #16]
 80092aa:	b15b      	cbz	r3, 80092c4 <__smakebuf_r+0x74>
 80092ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b0:	4630      	mov	r0, r6
 80092b2:	f000 fe7d 	bl	8009fb0 <_isatty_r>
 80092b6:	b128      	cbz	r0, 80092c4 <__smakebuf_r+0x74>
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	f023 0303 	bic.w	r3, r3, #3
 80092be:	f043 0301 	orr.w	r3, r3, #1
 80092c2:	81a3      	strh	r3, [r4, #12]
 80092c4:	89a0      	ldrh	r0, [r4, #12]
 80092c6:	4305      	orrs	r5, r0
 80092c8:	81a5      	strh	r5, [r4, #12]
 80092ca:	e7cd      	b.n	8009268 <__smakebuf_r+0x18>
 80092cc:	08009055 	.word	0x08009055

080092d0 <malloc>:
 80092d0:	4b02      	ldr	r3, [pc, #8]	; (80092dc <malloc+0xc>)
 80092d2:	4601      	mov	r1, r0
 80092d4:	6818      	ldr	r0, [r3, #0]
 80092d6:	f000 bbf3 	b.w	8009ac0 <_malloc_r>
 80092da:	bf00      	nop
 80092dc:	20000010 	.word	0x20000010

080092e0 <__ascii_mbtowc>:
 80092e0:	b082      	sub	sp, #8
 80092e2:	b901      	cbnz	r1, 80092e6 <__ascii_mbtowc+0x6>
 80092e4:	a901      	add	r1, sp, #4
 80092e6:	b142      	cbz	r2, 80092fa <__ascii_mbtowc+0x1a>
 80092e8:	b14b      	cbz	r3, 80092fe <__ascii_mbtowc+0x1e>
 80092ea:	7813      	ldrb	r3, [r2, #0]
 80092ec:	600b      	str	r3, [r1, #0]
 80092ee:	7812      	ldrb	r2, [r2, #0]
 80092f0:	1e10      	subs	r0, r2, #0
 80092f2:	bf18      	it	ne
 80092f4:	2001      	movne	r0, #1
 80092f6:	b002      	add	sp, #8
 80092f8:	4770      	bx	lr
 80092fa:	4610      	mov	r0, r2
 80092fc:	e7fb      	b.n	80092f6 <__ascii_mbtowc+0x16>
 80092fe:	f06f 0001 	mvn.w	r0, #1
 8009302:	e7f8      	b.n	80092f6 <__ascii_mbtowc+0x16>

08009304 <_Balloc>:
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009308:	4604      	mov	r4, r0
 800930a:	460d      	mov	r5, r1
 800930c:	b976      	cbnz	r6, 800932c <_Balloc+0x28>
 800930e:	2010      	movs	r0, #16
 8009310:	f7ff ffde 	bl	80092d0 <malloc>
 8009314:	4602      	mov	r2, r0
 8009316:	6260      	str	r0, [r4, #36]	; 0x24
 8009318:	b920      	cbnz	r0, 8009324 <_Balloc+0x20>
 800931a:	4b18      	ldr	r3, [pc, #96]	; (800937c <_Balloc+0x78>)
 800931c:	4818      	ldr	r0, [pc, #96]	; (8009380 <_Balloc+0x7c>)
 800931e:	2166      	movs	r1, #102	; 0x66
 8009320:	f000 fdf4 	bl	8009f0c <__assert_func>
 8009324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009328:	6006      	str	r6, [r0, #0]
 800932a:	60c6      	str	r6, [r0, #12]
 800932c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800932e:	68f3      	ldr	r3, [r6, #12]
 8009330:	b183      	cbz	r3, 8009354 <_Balloc+0x50>
 8009332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800933a:	b9b8      	cbnz	r0, 800936c <_Balloc+0x68>
 800933c:	2101      	movs	r1, #1
 800933e:	fa01 f605 	lsl.w	r6, r1, r5
 8009342:	1d72      	adds	r2, r6, #5
 8009344:	0092      	lsls	r2, r2, #2
 8009346:	4620      	mov	r0, r4
 8009348:	f000 fb5a 	bl	8009a00 <_calloc_r>
 800934c:	b160      	cbz	r0, 8009368 <_Balloc+0x64>
 800934e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009352:	e00e      	b.n	8009372 <_Balloc+0x6e>
 8009354:	2221      	movs	r2, #33	; 0x21
 8009356:	2104      	movs	r1, #4
 8009358:	4620      	mov	r0, r4
 800935a:	f000 fb51 	bl	8009a00 <_calloc_r>
 800935e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009360:	60f0      	str	r0, [r6, #12]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e4      	bne.n	8009332 <_Balloc+0x2e>
 8009368:	2000      	movs	r0, #0
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	6802      	ldr	r2, [r0, #0]
 800936e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009372:	2300      	movs	r3, #0
 8009374:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009378:	e7f7      	b.n	800936a <_Balloc+0x66>
 800937a:	bf00      	nop
 800937c:	0800a336 	.word	0x0800a336
 8009380:	0800a42a 	.word	0x0800a42a

08009384 <_Bfree>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009388:	4605      	mov	r5, r0
 800938a:	460c      	mov	r4, r1
 800938c:	b976      	cbnz	r6, 80093ac <_Bfree+0x28>
 800938e:	2010      	movs	r0, #16
 8009390:	f7ff ff9e 	bl	80092d0 <malloc>
 8009394:	4602      	mov	r2, r0
 8009396:	6268      	str	r0, [r5, #36]	; 0x24
 8009398:	b920      	cbnz	r0, 80093a4 <_Bfree+0x20>
 800939a:	4b09      	ldr	r3, [pc, #36]	; (80093c0 <_Bfree+0x3c>)
 800939c:	4809      	ldr	r0, [pc, #36]	; (80093c4 <_Bfree+0x40>)
 800939e:	218a      	movs	r1, #138	; 0x8a
 80093a0:	f000 fdb4 	bl	8009f0c <__assert_func>
 80093a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093a8:	6006      	str	r6, [r0, #0]
 80093aa:	60c6      	str	r6, [r0, #12]
 80093ac:	b13c      	cbz	r4, 80093be <_Bfree+0x3a>
 80093ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093b0:	6862      	ldr	r2, [r4, #4]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093b8:	6021      	str	r1, [r4, #0]
 80093ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093be:	bd70      	pop	{r4, r5, r6, pc}
 80093c0:	0800a336 	.word	0x0800a336
 80093c4:	0800a42a 	.word	0x0800a42a

080093c8 <__multadd>:
 80093c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093cc:	690e      	ldr	r6, [r1, #16]
 80093ce:	4607      	mov	r7, r0
 80093d0:	4698      	mov	r8, r3
 80093d2:	460c      	mov	r4, r1
 80093d4:	f101 0014 	add.w	r0, r1, #20
 80093d8:	2300      	movs	r3, #0
 80093da:	6805      	ldr	r5, [r0, #0]
 80093dc:	b2a9      	uxth	r1, r5
 80093de:	fb02 8101 	mla	r1, r2, r1, r8
 80093e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80093e6:	0c2d      	lsrs	r5, r5, #16
 80093e8:	fb02 c505 	mla	r5, r2, r5, ip
 80093ec:	b289      	uxth	r1, r1
 80093ee:	3301      	adds	r3, #1
 80093f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80093f4:	429e      	cmp	r6, r3
 80093f6:	f840 1b04 	str.w	r1, [r0], #4
 80093fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80093fe:	dcec      	bgt.n	80093da <__multadd+0x12>
 8009400:	f1b8 0f00 	cmp.w	r8, #0
 8009404:	d022      	beq.n	800944c <__multadd+0x84>
 8009406:	68a3      	ldr	r3, [r4, #8]
 8009408:	42b3      	cmp	r3, r6
 800940a:	dc19      	bgt.n	8009440 <__multadd+0x78>
 800940c:	6861      	ldr	r1, [r4, #4]
 800940e:	4638      	mov	r0, r7
 8009410:	3101      	adds	r1, #1
 8009412:	f7ff ff77 	bl	8009304 <_Balloc>
 8009416:	4605      	mov	r5, r0
 8009418:	b928      	cbnz	r0, 8009426 <__multadd+0x5e>
 800941a:	4602      	mov	r2, r0
 800941c:	4b0d      	ldr	r3, [pc, #52]	; (8009454 <__multadd+0x8c>)
 800941e:	480e      	ldr	r0, [pc, #56]	; (8009458 <__multadd+0x90>)
 8009420:	21b5      	movs	r1, #181	; 0xb5
 8009422:	f000 fd73 	bl	8009f0c <__assert_func>
 8009426:	6922      	ldr	r2, [r4, #16]
 8009428:	3202      	adds	r2, #2
 800942a:	f104 010c 	add.w	r1, r4, #12
 800942e:	0092      	lsls	r2, r2, #2
 8009430:	300c      	adds	r0, #12
 8009432:	f7fe f971 	bl	8007718 <memcpy>
 8009436:	4621      	mov	r1, r4
 8009438:	4638      	mov	r0, r7
 800943a:	f7ff ffa3 	bl	8009384 <_Bfree>
 800943e:	462c      	mov	r4, r5
 8009440:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009444:	3601      	adds	r6, #1
 8009446:	f8c3 8014 	str.w	r8, [r3, #20]
 800944a:	6126      	str	r6, [r4, #16]
 800944c:	4620      	mov	r0, r4
 800944e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009452:	bf00      	nop
 8009454:	0800a3ac 	.word	0x0800a3ac
 8009458:	0800a42a 	.word	0x0800a42a

0800945c <__hi0bits>:
 800945c:	0c03      	lsrs	r3, r0, #16
 800945e:	041b      	lsls	r3, r3, #16
 8009460:	b9d3      	cbnz	r3, 8009498 <__hi0bits+0x3c>
 8009462:	0400      	lsls	r0, r0, #16
 8009464:	2310      	movs	r3, #16
 8009466:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800946a:	bf04      	itt	eq
 800946c:	0200      	lsleq	r0, r0, #8
 800946e:	3308      	addeq	r3, #8
 8009470:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009474:	bf04      	itt	eq
 8009476:	0100      	lsleq	r0, r0, #4
 8009478:	3304      	addeq	r3, #4
 800947a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800947e:	bf04      	itt	eq
 8009480:	0080      	lsleq	r0, r0, #2
 8009482:	3302      	addeq	r3, #2
 8009484:	2800      	cmp	r0, #0
 8009486:	db05      	blt.n	8009494 <__hi0bits+0x38>
 8009488:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800948c:	f103 0301 	add.w	r3, r3, #1
 8009490:	bf08      	it	eq
 8009492:	2320      	moveq	r3, #32
 8009494:	4618      	mov	r0, r3
 8009496:	4770      	bx	lr
 8009498:	2300      	movs	r3, #0
 800949a:	e7e4      	b.n	8009466 <__hi0bits+0xa>

0800949c <__lo0bits>:
 800949c:	6803      	ldr	r3, [r0, #0]
 800949e:	f013 0207 	ands.w	r2, r3, #7
 80094a2:	4601      	mov	r1, r0
 80094a4:	d00b      	beq.n	80094be <__lo0bits+0x22>
 80094a6:	07da      	lsls	r2, r3, #31
 80094a8:	d424      	bmi.n	80094f4 <__lo0bits+0x58>
 80094aa:	0798      	lsls	r0, r3, #30
 80094ac:	bf49      	itett	mi
 80094ae:	085b      	lsrmi	r3, r3, #1
 80094b0:	089b      	lsrpl	r3, r3, #2
 80094b2:	2001      	movmi	r0, #1
 80094b4:	600b      	strmi	r3, [r1, #0]
 80094b6:	bf5c      	itt	pl
 80094b8:	600b      	strpl	r3, [r1, #0]
 80094ba:	2002      	movpl	r0, #2
 80094bc:	4770      	bx	lr
 80094be:	b298      	uxth	r0, r3
 80094c0:	b9b0      	cbnz	r0, 80094f0 <__lo0bits+0x54>
 80094c2:	0c1b      	lsrs	r3, r3, #16
 80094c4:	2010      	movs	r0, #16
 80094c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094ca:	bf04      	itt	eq
 80094cc:	0a1b      	lsreq	r3, r3, #8
 80094ce:	3008      	addeq	r0, #8
 80094d0:	071a      	lsls	r2, r3, #28
 80094d2:	bf04      	itt	eq
 80094d4:	091b      	lsreq	r3, r3, #4
 80094d6:	3004      	addeq	r0, #4
 80094d8:	079a      	lsls	r2, r3, #30
 80094da:	bf04      	itt	eq
 80094dc:	089b      	lsreq	r3, r3, #2
 80094de:	3002      	addeq	r0, #2
 80094e0:	07da      	lsls	r2, r3, #31
 80094e2:	d403      	bmi.n	80094ec <__lo0bits+0x50>
 80094e4:	085b      	lsrs	r3, r3, #1
 80094e6:	f100 0001 	add.w	r0, r0, #1
 80094ea:	d005      	beq.n	80094f8 <__lo0bits+0x5c>
 80094ec:	600b      	str	r3, [r1, #0]
 80094ee:	4770      	bx	lr
 80094f0:	4610      	mov	r0, r2
 80094f2:	e7e8      	b.n	80094c6 <__lo0bits+0x2a>
 80094f4:	2000      	movs	r0, #0
 80094f6:	4770      	bx	lr
 80094f8:	2020      	movs	r0, #32
 80094fa:	4770      	bx	lr

080094fc <__i2b>:
 80094fc:	b510      	push	{r4, lr}
 80094fe:	460c      	mov	r4, r1
 8009500:	2101      	movs	r1, #1
 8009502:	f7ff feff 	bl	8009304 <_Balloc>
 8009506:	4602      	mov	r2, r0
 8009508:	b928      	cbnz	r0, 8009516 <__i2b+0x1a>
 800950a:	4b05      	ldr	r3, [pc, #20]	; (8009520 <__i2b+0x24>)
 800950c:	4805      	ldr	r0, [pc, #20]	; (8009524 <__i2b+0x28>)
 800950e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009512:	f000 fcfb 	bl	8009f0c <__assert_func>
 8009516:	2301      	movs	r3, #1
 8009518:	6144      	str	r4, [r0, #20]
 800951a:	6103      	str	r3, [r0, #16]
 800951c:	bd10      	pop	{r4, pc}
 800951e:	bf00      	nop
 8009520:	0800a3ac 	.word	0x0800a3ac
 8009524:	0800a42a 	.word	0x0800a42a

08009528 <__multiply>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	4614      	mov	r4, r2
 800952e:	690a      	ldr	r2, [r1, #16]
 8009530:	6923      	ldr	r3, [r4, #16]
 8009532:	429a      	cmp	r2, r3
 8009534:	bfb8      	it	lt
 8009536:	460b      	movlt	r3, r1
 8009538:	460d      	mov	r5, r1
 800953a:	bfbc      	itt	lt
 800953c:	4625      	movlt	r5, r4
 800953e:	461c      	movlt	r4, r3
 8009540:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009544:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009548:	68ab      	ldr	r3, [r5, #8]
 800954a:	6869      	ldr	r1, [r5, #4]
 800954c:	eb0a 0709 	add.w	r7, sl, r9
 8009550:	42bb      	cmp	r3, r7
 8009552:	b085      	sub	sp, #20
 8009554:	bfb8      	it	lt
 8009556:	3101      	addlt	r1, #1
 8009558:	f7ff fed4 	bl	8009304 <_Balloc>
 800955c:	b930      	cbnz	r0, 800956c <__multiply+0x44>
 800955e:	4602      	mov	r2, r0
 8009560:	4b42      	ldr	r3, [pc, #264]	; (800966c <__multiply+0x144>)
 8009562:	4843      	ldr	r0, [pc, #268]	; (8009670 <__multiply+0x148>)
 8009564:	f240 115d 	movw	r1, #349	; 0x15d
 8009568:	f000 fcd0 	bl	8009f0c <__assert_func>
 800956c:	f100 0614 	add.w	r6, r0, #20
 8009570:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009574:	4633      	mov	r3, r6
 8009576:	2200      	movs	r2, #0
 8009578:	4543      	cmp	r3, r8
 800957a:	d31e      	bcc.n	80095ba <__multiply+0x92>
 800957c:	f105 0c14 	add.w	ip, r5, #20
 8009580:	f104 0314 	add.w	r3, r4, #20
 8009584:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009588:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800958c:	9202      	str	r2, [sp, #8]
 800958e:	ebac 0205 	sub.w	r2, ip, r5
 8009592:	3a15      	subs	r2, #21
 8009594:	f022 0203 	bic.w	r2, r2, #3
 8009598:	3204      	adds	r2, #4
 800959a:	f105 0115 	add.w	r1, r5, #21
 800959e:	458c      	cmp	ip, r1
 80095a0:	bf38      	it	cc
 80095a2:	2204      	movcc	r2, #4
 80095a4:	9201      	str	r2, [sp, #4]
 80095a6:	9a02      	ldr	r2, [sp, #8]
 80095a8:	9303      	str	r3, [sp, #12]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d808      	bhi.n	80095c0 <__multiply+0x98>
 80095ae:	2f00      	cmp	r7, #0
 80095b0:	dc55      	bgt.n	800965e <__multiply+0x136>
 80095b2:	6107      	str	r7, [r0, #16]
 80095b4:	b005      	add	sp, #20
 80095b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ba:	f843 2b04 	str.w	r2, [r3], #4
 80095be:	e7db      	b.n	8009578 <__multiply+0x50>
 80095c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80095c4:	f1ba 0f00 	cmp.w	sl, #0
 80095c8:	d020      	beq.n	800960c <__multiply+0xe4>
 80095ca:	f105 0e14 	add.w	lr, r5, #20
 80095ce:	46b1      	mov	r9, r6
 80095d0:	2200      	movs	r2, #0
 80095d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80095d6:	f8d9 b000 	ldr.w	fp, [r9]
 80095da:	b2a1      	uxth	r1, r4
 80095dc:	fa1f fb8b 	uxth.w	fp, fp
 80095e0:	fb0a b101 	mla	r1, sl, r1, fp
 80095e4:	4411      	add	r1, r2
 80095e6:	f8d9 2000 	ldr.w	r2, [r9]
 80095ea:	0c24      	lsrs	r4, r4, #16
 80095ec:	0c12      	lsrs	r2, r2, #16
 80095ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80095f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80095f6:	b289      	uxth	r1, r1
 80095f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80095fc:	45f4      	cmp	ip, lr
 80095fe:	f849 1b04 	str.w	r1, [r9], #4
 8009602:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009606:	d8e4      	bhi.n	80095d2 <__multiply+0xaa>
 8009608:	9901      	ldr	r1, [sp, #4]
 800960a:	5072      	str	r2, [r6, r1]
 800960c:	9a03      	ldr	r2, [sp, #12]
 800960e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009612:	3304      	adds	r3, #4
 8009614:	f1b9 0f00 	cmp.w	r9, #0
 8009618:	d01f      	beq.n	800965a <__multiply+0x132>
 800961a:	6834      	ldr	r4, [r6, #0]
 800961c:	f105 0114 	add.w	r1, r5, #20
 8009620:	46b6      	mov	lr, r6
 8009622:	f04f 0a00 	mov.w	sl, #0
 8009626:	880a      	ldrh	r2, [r1, #0]
 8009628:	f8be b002 	ldrh.w	fp, [lr, #2]
 800962c:	fb09 b202 	mla	r2, r9, r2, fp
 8009630:	4492      	add	sl, r2
 8009632:	b2a4      	uxth	r4, r4
 8009634:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009638:	f84e 4b04 	str.w	r4, [lr], #4
 800963c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009640:	f8be 2000 	ldrh.w	r2, [lr]
 8009644:	0c24      	lsrs	r4, r4, #16
 8009646:	fb09 2404 	mla	r4, r9, r4, r2
 800964a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800964e:	458c      	cmp	ip, r1
 8009650:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009654:	d8e7      	bhi.n	8009626 <__multiply+0xfe>
 8009656:	9a01      	ldr	r2, [sp, #4]
 8009658:	50b4      	str	r4, [r6, r2]
 800965a:	3604      	adds	r6, #4
 800965c:	e7a3      	b.n	80095a6 <__multiply+0x7e>
 800965e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1a5      	bne.n	80095b2 <__multiply+0x8a>
 8009666:	3f01      	subs	r7, #1
 8009668:	e7a1      	b.n	80095ae <__multiply+0x86>
 800966a:	bf00      	nop
 800966c:	0800a3ac 	.word	0x0800a3ac
 8009670:	0800a42a 	.word	0x0800a42a

08009674 <__pow5mult>:
 8009674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009678:	4615      	mov	r5, r2
 800967a:	f012 0203 	ands.w	r2, r2, #3
 800967e:	4606      	mov	r6, r0
 8009680:	460f      	mov	r7, r1
 8009682:	d007      	beq.n	8009694 <__pow5mult+0x20>
 8009684:	4c25      	ldr	r4, [pc, #148]	; (800971c <__pow5mult+0xa8>)
 8009686:	3a01      	subs	r2, #1
 8009688:	2300      	movs	r3, #0
 800968a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800968e:	f7ff fe9b 	bl	80093c8 <__multadd>
 8009692:	4607      	mov	r7, r0
 8009694:	10ad      	asrs	r5, r5, #2
 8009696:	d03d      	beq.n	8009714 <__pow5mult+0xa0>
 8009698:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800969a:	b97c      	cbnz	r4, 80096bc <__pow5mult+0x48>
 800969c:	2010      	movs	r0, #16
 800969e:	f7ff fe17 	bl	80092d0 <malloc>
 80096a2:	4602      	mov	r2, r0
 80096a4:	6270      	str	r0, [r6, #36]	; 0x24
 80096a6:	b928      	cbnz	r0, 80096b4 <__pow5mult+0x40>
 80096a8:	4b1d      	ldr	r3, [pc, #116]	; (8009720 <__pow5mult+0xac>)
 80096aa:	481e      	ldr	r0, [pc, #120]	; (8009724 <__pow5mult+0xb0>)
 80096ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096b0:	f000 fc2c 	bl	8009f0c <__assert_func>
 80096b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096b8:	6004      	str	r4, [r0, #0]
 80096ba:	60c4      	str	r4, [r0, #12]
 80096bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096c4:	b94c      	cbnz	r4, 80096da <__pow5mult+0x66>
 80096c6:	f240 2171 	movw	r1, #625	; 0x271
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7ff ff16 	bl	80094fc <__i2b>
 80096d0:	2300      	movs	r3, #0
 80096d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80096d6:	4604      	mov	r4, r0
 80096d8:	6003      	str	r3, [r0, #0]
 80096da:	f04f 0900 	mov.w	r9, #0
 80096de:	07eb      	lsls	r3, r5, #31
 80096e0:	d50a      	bpl.n	80096f8 <__pow5mult+0x84>
 80096e2:	4639      	mov	r1, r7
 80096e4:	4622      	mov	r2, r4
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7ff ff1e 	bl	8009528 <__multiply>
 80096ec:	4639      	mov	r1, r7
 80096ee:	4680      	mov	r8, r0
 80096f0:	4630      	mov	r0, r6
 80096f2:	f7ff fe47 	bl	8009384 <_Bfree>
 80096f6:	4647      	mov	r7, r8
 80096f8:	106d      	asrs	r5, r5, #1
 80096fa:	d00b      	beq.n	8009714 <__pow5mult+0xa0>
 80096fc:	6820      	ldr	r0, [r4, #0]
 80096fe:	b938      	cbnz	r0, 8009710 <__pow5mult+0x9c>
 8009700:	4622      	mov	r2, r4
 8009702:	4621      	mov	r1, r4
 8009704:	4630      	mov	r0, r6
 8009706:	f7ff ff0f 	bl	8009528 <__multiply>
 800970a:	6020      	str	r0, [r4, #0]
 800970c:	f8c0 9000 	str.w	r9, [r0]
 8009710:	4604      	mov	r4, r0
 8009712:	e7e4      	b.n	80096de <__pow5mult+0x6a>
 8009714:	4638      	mov	r0, r7
 8009716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800971a:	bf00      	nop
 800971c:	0800a580 	.word	0x0800a580
 8009720:	0800a336 	.word	0x0800a336
 8009724:	0800a42a 	.word	0x0800a42a

08009728 <__lshift>:
 8009728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800972c:	460c      	mov	r4, r1
 800972e:	6849      	ldr	r1, [r1, #4]
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009736:	68a3      	ldr	r3, [r4, #8]
 8009738:	4607      	mov	r7, r0
 800973a:	4691      	mov	r9, r2
 800973c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009740:	f108 0601 	add.w	r6, r8, #1
 8009744:	42b3      	cmp	r3, r6
 8009746:	db0b      	blt.n	8009760 <__lshift+0x38>
 8009748:	4638      	mov	r0, r7
 800974a:	f7ff fddb 	bl	8009304 <_Balloc>
 800974e:	4605      	mov	r5, r0
 8009750:	b948      	cbnz	r0, 8009766 <__lshift+0x3e>
 8009752:	4602      	mov	r2, r0
 8009754:	4b28      	ldr	r3, [pc, #160]	; (80097f8 <__lshift+0xd0>)
 8009756:	4829      	ldr	r0, [pc, #164]	; (80097fc <__lshift+0xd4>)
 8009758:	f240 11d9 	movw	r1, #473	; 0x1d9
 800975c:	f000 fbd6 	bl	8009f0c <__assert_func>
 8009760:	3101      	adds	r1, #1
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	e7ee      	b.n	8009744 <__lshift+0x1c>
 8009766:	2300      	movs	r3, #0
 8009768:	f100 0114 	add.w	r1, r0, #20
 800976c:	f100 0210 	add.w	r2, r0, #16
 8009770:	4618      	mov	r0, r3
 8009772:	4553      	cmp	r3, sl
 8009774:	db33      	blt.n	80097de <__lshift+0xb6>
 8009776:	6920      	ldr	r0, [r4, #16]
 8009778:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800977c:	f104 0314 	add.w	r3, r4, #20
 8009780:	f019 091f 	ands.w	r9, r9, #31
 8009784:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009788:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800978c:	d02b      	beq.n	80097e6 <__lshift+0xbe>
 800978e:	f1c9 0e20 	rsb	lr, r9, #32
 8009792:	468a      	mov	sl, r1
 8009794:	2200      	movs	r2, #0
 8009796:	6818      	ldr	r0, [r3, #0]
 8009798:	fa00 f009 	lsl.w	r0, r0, r9
 800979c:	4302      	orrs	r2, r0
 800979e:	f84a 2b04 	str.w	r2, [sl], #4
 80097a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097a6:	459c      	cmp	ip, r3
 80097a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80097ac:	d8f3      	bhi.n	8009796 <__lshift+0x6e>
 80097ae:	ebac 0304 	sub.w	r3, ip, r4
 80097b2:	3b15      	subs	r3, #21
 80097b4:	f023 0303 	bic.w	r3, r3, #3
 80097b8:	3304      	adds	r3, #4
 80097ba:	f104 0015 	add.w	r0, r4, #21
 80097be:	4584      	cmp	ip, r0
 80097c0:	bf38      	it	cc
 80097c2:	2304      	movcc	r3, #4
 80097c4:	50ca      	str	r2, [r1, r3]
 80097c6:	b10a      	cbz	r2, 80097cc <__lshift+0xa4>
 80097c8:	f108 0602 	add.w	r6, r8, #2
 80097cc:	3e01      	subs	r6, #1
 80097ce:	4638      	mov	r0, r7
 80097d0:	612e      	str	r6, [r5, #16]
 80097d2:	4621      	mov	r1, r4
 80097d4:	f7ff fdd6 	bl	8009384 <_Bfree>
 80097d8:	4628      	mov	r0, r5
 80097da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097de:	f842 0f04 	str.w	r0, [r2, #4]!
 80097e2:	3301      	adds	r3, #1
 80097e4:	e7c5      	b.n	8009772 <__lshift+0x4a>
 80097e6:	3904      	subs	r1, #4
 80097e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80097f0:	459c      	cmp	ip, r3
 80097f2:	d8f9      	bhi.n	80097e8 <__lshift+0xc0>
 80097f4:	e7ea      	b.n	80097cc <__lshift+0xa4>
 80097f6:	bf00      	nop
 80097f8:	0800a3ac 	.word	0x0800a3ac
 80097fc:	0800a42a 	.word	0x0800a42a

08009800 <__mcmp>:
 8009800:	b530      	push	{r4, r5, lr}
 8009802:	6902      	ldr	r2, [r0, #16]
 8009804:	690c      	ldr	r4, [r1, #16]
 8009806:	1b12      	subs	r2, r2, r4
 8009808:	d10e      	bne.n	8009828 <__mcmp+0x28>
 800980a:	f100 0314 	add.w	r3, r0, #20
 800980e:	3114      	adds	r1, #20
 8009810:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009814:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009818:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800981c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009820:	42a5      	cmp	r5, r4
 8009822:	d003      	beq.n	800982c <__mcmp+0x2c>
 8009824:	d305      	bcc.n	8009832 <__mcmp+0x32>
 8009826:	2201      	movs	r2, #1
 8009828:	4610      	mov	r0, r2
 800982a:	bd30      	pop	{r4, r5, pc}
 800982c:	4283      	cmp	r3, r0
 800982e:	d3f3      	bcc.n	8009818 <__mcmp+0x18>
 8009830:	e7fa      	b.n	8009828 <__mcmp+0x28>
 8009832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009836:	e7f7      	b.n	8009828 <__mcmp+0x28>

08009838 <__mdiff>:
 8009838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983c:	460c      	mov	r4, r1
 800983e:	4606      	mov	r6, r0
 8009840:	4611      	mov	r1, r2
 8009842:	4620      	mov	r0, r4
 8009844:	4617      	mov	r7, r2
 8009846:	f7ff ffdb 	bl	8009800 <__mcmp>
 800984a:	1e05      	subs	r5, r0, #0
 800984c:	d110      	bne.n	8009870 <__mdiff+0x38>
 800984e:	4629      	mov	r1, r5
 8009850:	4630      	mov	r0, r6
 8009852:	f7ff fd57 	bl	8009304 <_Balloc>
 8009856:	b930      	cbnz	r0, 8009866 <__mdiff+0x2e>
 8009858:	4b39      	ldr	r3, [pc, #228]	; (8009940 <__mdiff+0x108>)
 800985a:	4602      	mov	r2, r0
 800985c:	f240 2132 	movw	r1, #562	; 0x232
 8009860:	4838      	ldr	r0, [pc, #224]	; (8009944 <__mdiff+0x10c>)
 8009862:	f000 fb53 	bl	8009f0c <__assert_func>
 8009866:	2301      	movs	r3, #1
 8009868:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800986c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009870:	bfa4      	itt	ge
 8009872:	463b      	movge	r3, r7
 8009874:	4627      	movge	r7, r4
 8009876:	4630      	mov	r0, r6
 8009878:	6879      	ldr	r1, [r7, #4]
 800987a:	bfa6      	itte	ge
 800987c:	461c      	movge	r4, r3
 800987e:	2500      	movge	r5, #0
 8009880:	2501      	movlt	r5, #1
 8009882:	f7ff fd3f 	bl	8009304 <_Balloc>
 8009886:	b920      	cbnz	r0, 8009892 <__mdiff+0x5a>
 8009888:	4b2d      	ldr	r3, [pc, #180]	; (8009940 <__mdiff+0x108>)
 800988a:	4602      	mov	r2, r0
 800988c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009890:	e7e6      	b.n	8009860 <__mdiff+0x28>
 8009892:	693e      	ldr	r6, [r7, #16]
 8009894:	60c5      	str	r5, [r0, #12]
 8009896:	6925      	ldr	r5, [r4, #16]
 8009898:	f107 0114 	add.w	r1, r7, #20
 800989c:	f104 0914 	add.w	r9, r4, #20
 80098a0:	f100 0e14 	add.w	lr, r0, #20
 80098a4:	f107 0210 	add.w	r2, r7, #16
 80098a8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80098ac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80098b0:	46f2      	mov	sl, lr
 80098b2:	2700      	movs	r7, #0
 80098b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80098b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098bc:	fa1f f883 	uxth.w	r8, r3
 80098c0:	fa17 f78b 	uxtah	r7, r7, fp
 80098c4:	0c1b      	lsrs	r3, r3, #16
 80098c6:	eba7 0808 	sub.w	r8, r7, r8
 80098ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098d2:	fa1f f888 	uxth.w	r8, r8
 80098d6:	141f      	asrs	r7, r3, #16
 80098d8:	454d      	cmp	r5, r9
 80098da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098de:	f84a 3b04 	str.w	r3, [sl], #4
 80098e2:	d8e7      	bhi.n	80098b4 <__mdiff+0x7c>
 80098e4:	1b2b      	subs	r3, r5, r4
 80098e6:	3b15      	subs	r3, #21
 80098e8:	f023 0303 	bic.w	r3, r3, #3
 80098ec:	3304      	adds	r3, #4
 80098ee:	3415      	adds	r4, #21
 80098f0:	42a5      	cmp	r5, r4
 80098f2:	bf38      	it	cc
 80098f4:	2304      	movcc	r3, #4
 80098f6:	4419      	add	r1, r3
 80098f8:	4473      	add	r3, lr
 80098fa:	469e      	mov	lr, r3
 80098fc:	460d      	mov	r5, r1
 80098fe:	4565      	cmp	r5, ip
 8009900:	d30e      	bcc.n	8009920 <__mdiff+0xe8>
 8009902:	f10c 0203 	add.w	r2, ip, #3
 8009906:	1a52      	subs	r2, r2, r1
 8009908:	f022 0203 	bic.w	r2, r2, #3
 800990c:	3903      	subs	r1, #3
 800990e:	458c      	cmp	ip, r1
 8009910:	bf38      	it	cc
 8009912:	2200      	movcc	r2, #0
 8009914:	441a      	add	r2, r3
 8009916:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800991a:	b17b      	cbz	r3, 800993c <__mdiff+0x104>
 800991c:	6106      	str	r6, [r0, #16]
 800991e:	e7a5      	b.n	800986c <__mdiff+0x34>
 8009920:	f855 8b04 	ldr.w	r8, [r5], #4
 8009924:	fa17 f488 	uxtah	r4, r7, r8
 8009928:	1422      	asrs	r2, r4, #16
 800992a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800992e:	b2a4      	uxth	r4, r4
 8009930:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009934:	f84e 4b04 	str.w	r4, [lr], #4
 8009938:	1417      	asrs	r7, r2, #16
 800993a:	e7e0      	b.n	80098fe <__mdiff+0xc6>
 800993c:	3e01      	subs	r6, #1
 800993e:	e7ea      	b.n	8009916 <__mdiff+0xde>
 8009940:	0800a3ac 	.word	0x0800a3ac
 8009944:	0800a42a 	.word	0x0800a42a

08009948 <__d2b>:
 8009948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800994c:	4689      	mov	r9, r1
 800994e:	2101      	movs	r1, #1
 8009950:	ec57 6b10 	vmov	r6, r7, d0
 8009954:	4690      	mov	r8, r2
 8009956:	f7ff fcd5 	bl	8009304 <_Balloc>
 800995a:	4604      	mov	r4, r0
 800995c:	b930      	cbnz	r0, 800996c <__d2b+0x24>
 800995e:	4602      	mov	r2, r0
 8009960:	4b25      	ldr	r3, [pc, #148]	; (80099f8 <__d2b+0xb0>)
 8009962:	4826      	ldr	r0, [pc, #152]	; (80099fc <__d2b+0xb4>)
 8009964:	f240 310a 	movw	r1, #778	; 0x30a
 8009968:	f000 fad0 	bl	8009f0c <__assert_func>
 800996c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009970:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009974:	bb35      	cbnz	r5, 80099c4 <__d2b+0x7c>
 8009976:	2e00      	cmp	r6, #0
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	d028      	beq.n	80099ce <__d2b+0x86>
 800997c:	4668      	mov	r0, sp
 800997e:	9600      	str	r6, [sp, #0]
 8009980:	f7ff fd8c 	bl	800949c <__lo0bits>
 8009984:	9900      	ldr	r1, [sp, #0]
 8009986:	b300      	cbz	r0, 80099ca <__d2b+0x82>
 8009988:	9a01      	ldr	r2, [sp, #4]
 800998a:	f1c0 0320 	rsb	r3, r0, #32
 800998e:	fa02 f303 	lsl.w	r3, r2, r3
 8009992:	430b      	orrs	r3, r1
 8009994:	40c2      	lsrs	r2, r0
 8009996:	6163      	str	r3, [r4, #20]
 8009998:	9201      	str	r2, [sp, #4]
 800999a:	9b01      	ldr	r3, [sp, #4]
 800999c:	61a3      	str	r3, [r4, #24]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	bf14      	ite	ne
 80099a2:	2202      	movne	r2, #2
 80099a4:	2201      	moveq	r2, #1
 80099a6:	6122      	str	r2, [r4, #16]
 80099a8:	b1d5      	cbz	r5, 80099e0 <__d2b+0x98>
 80099aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80099ae:	4405      	add	r5, r0
 80099b0:	f8c9 5000 	str.w	r5, [r9]
 80099b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099b8:	f8c8 0000 	str.w	r0, [r8]
 80099bc:	4620      	mov	r0, r4
 80099be:	b003      	add	sp, #12
 80099c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099c8:	e7d5      	b.n	8009976 <__d2b+0x2e>
 80099ca:	6161      	str	r1, [r4, #20]
 80099cc:	e7e5      	b.n	800999a <__d2b+0x52>
 80099ce:	a801      	add	r0, sp, #4
 80099d0:	f7ff fd64 	bl	800949c <__lo0bits>
 80099d4:	9b01      	ldr	r3, [sp, #4]
 80099d6:	6163      	str	r3, [r4, #20]
 80099d8:	2201      	movs	r2, #1
 80099da:	6122      	str	r2, [r4, #16]
 80099dc:	3020      	adds	r0, #32
 80099de:	e7e3      	b.n	80099a8 <__d2b+0x60>
 80099e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099e8:	f8c9 0000 	str.w	r0, [r9]
 80099ec:	6918      	ldr	r0, [r3, #16]
 80099ee:	f7ff fd35 	bl	800945c <__hi0bits>
 80099f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099f6:	e7df      	b.n	80099b8 <__d2b+0x70>
 80099f8:	0800a3ac 	.word	0x0800a3ac
 80099fc:	0800a42a 	.word	0x0800a42a

08009a00 <_calloc_r>:
 8009a00:	b513      	push	{r0, r1, r4, lr}
 8009a02:	434a      	muls	r2, r1
 8009a04:	4611      	mov	r1, r2
 8009a06:	9201      	str	r2, [sp, #4]
 8009a08:	f000 f85a 	bl	8009ac0 <_malloc_r>
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	b118      	cbz	r0, 8009a18 <_calloc_r+0x18>
 8009a10:	9a01      	ldr	r2, [sp, #4]
 8009a12:	2100      	movs	r1, #0
 8009a14:	f7fd fe8e 	bl	8007734 <memset>
 8009a18:	4620      	mov	r0, r4
 8009a1a:	b002      	add	sp, #8
 8009a1c:	bd10      	pop	{r4, pc}
	...

08009a20 <_free_r>:
 8009a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a22:	2900      	cmp	r1, #0
 8009a24:	d048      	beq.n	8009ab8 <_free_r+0x98>
 8009a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a2a:	9001      	str	r0, [sp, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8009a32:	bfb8      	it	lt
 8009a34:	18e4      	addlt	r4, r4, r3
 8009a36:	f000 fadd 	bl	8009ff4 <__malloc_lock>
 8009a3a:	4a20      	ldr	r2, [pc, #128]	; (8009abc <_free_r+0x9c>)
 8009a3c:	9801      	ldr	r0, [sp, #4]
 8009a3e:	6813      	ldr	r3, [r2, #0]
 8009a40:	4615      	mov	r5, r2
 8009a42:	b933      	cbnz	r3, 8009a52 <_free_r+0x32>
 8009a44:	6063      	str	r3, [r4, #4]
 8009a46:	6014      	str	r4, [r2, #0]
 8009a48:	b003      	add	sp, #12
 8009a4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a4e:	f000 bad7 	b.w	800a000 <__malloc_unlock>
 8009a52:	42a3      	cmp	r3, r4
 8009a54:	d90b      	bls.n	8009a6e <_free_r+0x4e>
 8009a56:	6821      	ldr	r1, [r4, #0]
 8009a58:	1862      	adds	r2, r4, r1
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	bf04      	itt	eq
 8009a5e:	681a      	ldreq	r2, [r3, #0]
 8009a60:	685b      	ldreq	r3, [r3, #4]
 8009a62:	6063      	str	r3, [r4, #4]
 8009a64:	bf04      	itt	eq
 8009a66:	1852      	addeq	r2, r2, r1
 8009a68:	6022      	streq	r2, [r4, #0]
 8009a6a:	602c      	str	r4, [r5, #0]
 8009a6c:	e7ec      	b.n	8009a48 <_free_r+0x28>
 8009a6e:	461a      	mov	r2, r3
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	b10b      	cbz	r3, 8009a78 <_free_r+0x58>
 8009a74:	42a3      	cmp	r3, r4
 8009a76:	d9fa      	bls.n	8009a6e <_free_r+0x4e>
 8009a78:	6811      	ldr	r1, [r2, #0]
 8009a7a:	1855      	adds	r5, r2, r1
 8009a7c:	42a5      	cmp	r5, r4
 8009a7e:	d10b      	bne.n	8009a98 <_free_r+0x78>
 8009a80:	6824      	ldr	r4, [r4, #0]
 8009a82:	4421      	add	r1, r4
 8009a84:	1854      	adds	r4, r2, r1
 8009a86:	42a3      	cmp	r3, r4
 8009a88:	6011      	str	r1, [r2, #0]
 8009a8a:	d1dd      	bne.n	8009a48 <_free_r+0x28>
 8009a8c:	681c      	ldr	r4, [r3, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	6053      	str	r3, [r2, #4]
 8009a92:	4421      	add	r1, r4
 8009a94:	6011      	str	r1, [r2, #0]
 8009a96:	e7d7      	b.n	8009a48 <_free_r+0x28>
 8009a98:	d902      	bls.n	8009aa0 <_free_r+0x80>
 8009a9a:	230c      	movs	r3, #12
 8009a9c:	6003      	str	r3, [r0, #0]
 8009a9e:	e7d3      	b.n	8009a48 <_free_r+0x28>
 8009aa0:	6825      	ldr	r5, [r4, #0]
 8009aa2:	1961      	adds	r1, r4, r5
 8009aa4:	428b      	cmp	r3, r1
 8009aa6:	bf04      	itt	eq
 8009aa8:	6819      	ldreq	r1, [r3, #0]
 8009aaa:	685b      	ldreq	r3, [r3, #4]
 8009aac:	6063      	str	r3, [r4, #4]
 8009aae:	bf04      	itt	eq
 8009ab0:	1949      	addeq	r1, r1, r5
 8009ab2:	6021      	streq	r1, [r4, #0]
 8009ab4:	6054      	str	r4, [r2, #4]
 8009ab6:	e7c7      	b.n	8009a48 <_free_r+0x28>
 8009ab8:	b003      	add	sp, #12
 8009aba:	bd30      	pop	{r4, r5, pc}
 8009abc:	20000200 	.word	0x20000200

08009ac0 <_malloc_r>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	1ccd      	adds	r5, r1, #3
 8009ac4:	f025 0503 	bic.w	r5, r5, #3
 8009ac8:	3508      	adds	r5, #8
 8009aca:	2d0c      	cmp	r5, #12
 8009acc:	bf38      	it	cc
 8009ace:	250c      	movcc	r5, #12
 8009ad0:	2d00      	cmp	r5, #0
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	db01      	blt.n	8009ada <_malloc_r+0x1a>
 8009ad6:	42a9      	cmp	r1, r5
 8009ad8:	d903      	bls.n	8009ae2 <_malloc_r+0x22>
 8009ada:	230c      	movs	r3, #12
 8009adc:	6033      	str	r3, [r6, #0]
 8009ade:	2000      	movs	r0, #0
 8009ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ae2:	f000 fa87 	bl	8009ff4 <__malloc_lock>
 8009ae6:	4921      	ldr	r1, [pc, #132]	; (8009b6c <_malloc_r+0xac>)
 8009ae8:	680a      	ldr	r2, [r1, #0]
 8009aea:	4614      	mov	r4, r2
 8009aec:	b99c      	cbnz	r4, 8009b16 <_malloc_r+0x56>
 8009aee:	4f20      	ldr	r7, [pc, #128]	; (8009b70 <_malloc_r+0xb0>)
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	b923      	cbnz	r3, 8009afe <_malloc_r+0x3e>
 8009af4:	4621      	mov	r1, r4
 8009af6:	4630      	mov	r0, r6
 8009af8:	f000 f996 	bl	8009e28 <_sbrk_r>
 8009afc:	6038      	str	r0, [r7, #0]
 8009afe:	4629      	mov	r1, r5
 8009b00:	4630      	mov	r0, r6
 8009b02:	f000 f991 	bl	8009e28 <_sbrk_r>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d123      	bne.n	8009b52 <_malloc_r+0x92>
 8009b0a:	230c      	movs	r3, #12
 8009b0c:	6033      	str	r3, [r6, #0]
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f000 fa76 	bl	800a000 <__malloc_unlock>
 8009b14:	e7e3      	b.n	8009ade <_malloc_r+0x1e>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	1b5b      	subs	r3, r3, r5
 8009b1a:	d417      	bmi.n	8009b4c <_malloc_r+0x8c>
 8009b1c:	2b0b      	cmp	r3, #11
 8009b1e:	d903      	bls.n	8009b28 <_malloc_r+0x68>
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	441c      	add	r4, r3
 8009b24:	6025      	str	r5, [r4, #0]
 8009b26:	e004      	b.n	8009b32 <_malloc_r+0x72>
 8009b28:	6863      	ldr	r3, [r4, #4]
 8009b2a:	42a2      	cmp	r2, r4
 8009b2c:	bf0c      	ite	eq
 8009b2e:	600b      	streq	r3, [r1, #0]
 8009b30:	6053      	strne	r3, [r2, #4]
 8009b32:	4630      	mov	r0, r6
 8009b34:	f000 fa64 	bl	800a000 <__malloc_unlock>
 8009b38:	f104 000b 	add.w	r0, r4, #11
 8009b3c:	1d23      	adds	r3, r4, #4
 8009b3e:	f020 0007 	bic.w	r0, r0, #7
 8009b42:	1ac2      	subs	r2, r0, r3
 8009b44:	d0cc      	beq.n	8009ae0 <_malloc_r+0x20>
 8009b46:	1a1b      	subs	r3, r3, r0
 8009b48:	50a3      	str	r3, [r4, r2]
 8009b4a:	e7c9      	b.n	8009ae0 <_malloc_r+0x20>
 8009b4c:	4622      	mov	r2, r4
 8009b4e:	6864      	ldr	r4, [r4, #4]
 8009b50:	e7cc      	b.n	8009aec <_malloc_r+0x2c>
 8009b52:	1cc4      	adds	r4, r0, #3
 8009b54:	f024 0403 	bic.w	r4, r4, #3
 8009b58:	42a0      	cmp	r0, r4
 8009b5a:	d0e3      	beq.n	8009b24 <_malloc_r+0x64>
 8009b5c:	1a21      	subs	r1, r4, r0
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f000 f962 	bl	8009e28 <_sbrk_r>
 8009b64:	3001      	adds	r0, #1
 8009b66:	d1dd      	bne.n	8009b24 <_malloc_r+0x64>
 8009b68:	e7cf      	b.n	8009b0a <_malloc_r+0x4a>
 8009b6a:	bf00      	nop
 8009b6c:	20000200 	.word	0x20000200
 8009b70:	20000204 	.word	0x20000204

08009b74 <__sfputc_r>:
 8009b74:	6893      	ldr	r3, [r2, #8]
 8009b76:	3b01      	subs	r3, #1
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	b410      	push	{r4}
 8009b7c:	6093      	str	r3, [r2, #8]
 8009b7e:	da08      	bge.n	8009b92 <__sfputc_r+0x1e>
 8009b80:	6994      	ldr	r4, [r2, #24]
 8009b82:	42a3      	cmp	r3, r4
 8009b84:	db01      	blt.n	8009b8a <__sfputc_r+0x16>
 8009b86:	290a      	cmp	r1, #10
 8009b88:	d103      	bne.n	8009b92 <__sfputc_r+0x1e>
 8009b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b8e:	f7fe ba43 	b.w	8008018 <__swbuf_r>
 8009b92:	6813      	ldr	r3, [r2, #0]
 8009b94:	1c58      	adds	r0, r3, #1
 8009b96:	6010      	str	r0, [r2, #0]
 8009b98:	7019      	strb	r1, [r3, #0]
 8009b9a:	4608      	mov	r0, r1
 8009b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <__sfputs_r>:
 8009ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba4:	4606      	mov	r6, r0
 8009ba6:	460f      	mov	r7, r1
 8009ba8:	4614      	mov	r4, r2
 8009baa:	18d5      	adds	r5, r2, r3
 8009bac:	42ac      	cmp	r4, r5
 8009bae:	d101      	bne.n	8009bb4 <__sfputs_r+0x12>
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	e007      	b.n	8009bc4 <__sfputs_r+0x22>
 8009bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb8:	463a      	mov	r2, r7
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7ff ffda 	bl	8009b74 <__sfputc_r>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	d1f3      	bne.n	8009bac <__sfputs_r+0xa>
 8009bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bc8 <_vfiprintf_r>:
 8009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	460d      	mov	r5, r1
 8009bce:	b09d      	sub	sp, #116	; 0x74
 8009bd0:	4614      	mov	r4, r2
 8009bd2:	4698      	mov	r8, r3
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	b118      	cbz	r0, 8009be0 <_vfiprintf_r+0x18>
 8009bd8:	6983      	ldr	r3, [r0, #24]
 8009bda:	b90b      	cbnz	r3, 8009be0 <_vfiprintf_r+0x18>
 8009bdc:	f7ff fa6e 	bl	80090bc <__sinit>
 8009be0:	4b89      	ldr	r3, [pc, #548]	; (8009e08 <_vfiprintf_r+0x240>)
 8009be2:	429d      	cmp	r5, r3
 8009be4:	d11b      	bne.n	8009c1e <_vfiprintf_r+0x56>
 8009be6:	6875      	ldr	r5, [r6, #4]
 8009be8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bea:	07d9      	lsls	r1, r3, #31
 8009bec:	d405      	bmi.n	8009bfa <_vfiprintf_r+0x32>
 8009bee:	89ab      	ldrh	r3, [r5, #12]
 8009bf0:	059a      	lsls	r2, r3, #22
 8009bf2:	d402      	bmi.n	8009bfa <_vfiprintf_r+0x32>
 8009bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bf6:	f7ff fb04 	bl	8009202 <__retarget_lock_acquire_recursive>
 8009bfa:	89ab      	ldrh	r3, [r5, #12]
 8009bfc:	071b      	lsls	r3, r3, #28
 8009bfe:	d501      	bpl.n	8009c04 <_vfiprintf_r+0x3c>
 8009c00:	692b      	ldr	r3, [r5, #16]
 8009c02:	b9eb      	cbnz	r3, 8009c40 <_vfiprintf_r+0x78>
 8009c04:	4629      	mov	r1, r5
 8009c06:	4630      	mov	r0, r6
 8009c08:	f7fe fa58 	bl	80080bc <__swsetup_r>
 8009c0c:	b1c0      	cbz	r0, 8009c40 <_vfiprintf_r+0x78>
 8009c0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c10:	07dc      	lsls	r4, r3, #31
 8009c12:	d50e      	bpl.n	8009c32 <_vfiprintf_r+0x6a>
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c18:	b01d      	add	sp, #116	; 0x74
 8009c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1e:	4b7b      	ldr	r3, [pc, #492]	; (8009e0c <_vfiprintf_r+0x244>)
 8009c20:	429d      	cmp	r5, r3
 8009c22:	d101      	bne.n	8009c28 <_vfiprintf_r+0x60>
 8009c24:	68b5      	ldr	r5, [r6, #8]
 8009c26:	e7df      	b.n	8009be8 <_vfiprintf_r+0x20>
 8009c28:	4b79      	ldr	r3, [pc, #484]	; (8009e10 <_vfiprintf_r+0x248>)
 8009c2a:	429d      	cmp	r5, r3
 8009c2c:	bf08      	it	eq
 8009c2e:	68f5      	ldreq	r5, [r6, #12]
 8009c30:	e7da      	b.n	8009be8 <_vfiprintf_r+0x20>
 8009c32:	89ab      	ldrh	r3, [r5, #12]
 8009c34:	0598      	lsls	r0, r3, #22
 8009c36:	d4ed      	bmi.n	8009c14 <_vfiprintf_r+0x4c>
 8009c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c3a:	f7ff fae3 	bl	8009204 <__retarget_lock_release_recursive>
 8009c3e:	e7e9      	b.n	8009c14 <_vfiprintf_r+0x4c>
 8009c40:	2300      	movs	r3, #0
 8009c42:	9309      	str	r3, [sp, #36]	; 0x24
 8009c44:	2320      	movs	r3, #32
 8009c46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c4e:	2330      	movs	r3, #48	; 0x30
 8009c50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e14 <_vfiprintf_r+0x24c>
 8009c54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c58:	f04f 0901 	mov.w	r9, #1
 8009c5c:	4623      	mov	r3, r4
 8009c5e:	469a      	mov	sl, r3
 8009c60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c64:	b10a      	cbz	r2, 8009c6a <_vfiprintf_r+0xa2>
 8009c66:	2a25      	cmp	r2, #37	; 0x25
 8009c68:	d1f9      	bne.n	8009c5e <_vfiprintf_r+0x96>
 8009c6a:	ebba 0b04 	subs.w	fp, sl, r4
 8009c6e:	d00b      	beq.n	8009c88 <_vfiprintf_r+0xc0>
 8009c70:	465b      	mov	r3, fp
 8009c72:	4622      	mov	r2, r4
 8009c74:	4629      	mov	r1, r5
 8009c76:	4630      	mov	r0, r6
 8009c78:	f7ff ff93 	bl	8009ba2 <__sfputs_r>
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	f000 80aa 	beq.w	8009dd6 <_vfiprintf_r+0x20e>
 8009c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c84:	445a      	add	r2, fp
 8009c86:	9209      	str	r2, [sp, #36]	; 0x24
 8009c88:	f89a 3000 	ldrb.w	r3, [sl]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 80a2 	beq.w	8009dd6 <_vfiprintf_r+0x20e>
 8009c92:	2300      	movs	r3, #0
 8009c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c9c:	f10a 0a01 	add.w	sl, sl, #1
 8009ca0:	9304      	str	r3, [sp, #16]
 8009ca2:	9307      	str	r3, [sp, #28]
 8009ca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ca8:	931a      	str	r3, [sp, #104]	; 0x68
 8009caa:	4654      	mov	r4, sl
 8009cac:	2205      	movs	r2, #5
 8009cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb2:	4858      	ldr	r0, [pc, #352]	; (8009e14 <_vfiprintf_r+0x24c>)
 8009cb4:	f7f6 fabc 	bl	8000230 <memchr>
 8009cb8:	9a04      	ldr	r2, [sp, #16]
 8009cba:	b9d8      	cbnz	r0, 8009cf4 <_vfiprintf_r+0x12c>
 8009cbc:	06d1      	lsls	r1, r2, #27
 8009cbe:	bf44      	itt	mi
 8009cc0:	2320      	movmi	r3, #32
 8009cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cc6:	0713      	lsls	r3, r2, #28
 8009cc8:	bf44      	itt	mi
 8009cca:	232b      	movmi	r3, #43	; 0x2b
 8009ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8009cd6:	d015      	beq.n	8009d04 <_vfiprintf_r+0x13c>
 8009cd8:	9a07      	ldr	r2, [sp, #28]
 8009cda:	4654      	mov	r4, sl
 8009cdc:	2000      	movs	r0, #0
 8009cde:	f04f 0c0a 	mov.w	ip, #10
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ce8:	3b30      	subs	r3, #48	; 0x30
 8009cea:	2b09      	cmp	r3, #9
 8009cec:	d94e      	bls.n	8009d8c <_vfiprintf_r+0x1c4>
 8009cee:	b1b0      	cbz	r0, 8009d1e <_vfiprintf_r+0x156>
 8009cf0:	9207      	str	r2, [sp, #28]
 8009cf2:	e014      	b.n	8009d1e <_vfiprintf_r+0x156>
 8009cf4:	eba0 0308 	sub.w	r3, r0, r8
 8009cf8:	fa09 f303 	lsl.w	r3, r9, r3
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	9304      	str	r3, [sp, #16]
 8009d00:	46a2      	mov	sl, r4
 8009d02:	e7d2      	b.n	8009caa <_vfiprintf_r+0xe2>
 8009d04:	9b03      	ldr	r3, [sp, #12]
 8009d06:	1d19      	adds	r1, r3, #4
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	9103      	str	r1, [sp, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	bfbb      	ittet	lt
 8009d10:	425b      	neglt	r3, r3
 8009d12:	f042 0202 	orrlt.w	r2, r2, #2
 8009d16:	9307      	strge	r3, [sp, #28]
 8009d18:	9307      	strlt	r3, [sp, #28]
 8009d1a:	bfb8      	it	lt
 8009d1c:	9204      	strlt	r2, [sp, #16]
 8009d1e:	7823      	ldrb	r3, [r4, #0]
 8009d20:	2b2e      	cmp	r3, #46	; 0x2e
 8009d22:	d10c      	bne.n	8009d3e <_vfiprintf_r+0x176>
 8009d24:	7863      	ldrb	r3, [r4, #1]
 8009d26:	2b2a      	cmp	r3, #42	; 0x2a
 8009d28:	d135      	bne.n	8009d96 <_vfiprintf_r+0x1ce>
 8009d2a:	9b03      	ldr	r3, [sp, #12]
 8009d2c:	1d1a      	adds	r2, r3, #4
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	9203      	str	r2, [sp, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	bfb8      	it	lt
 8009d36:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d3a:	3402      	adds	r4, #2
 8009d3c:	9305      	str	r3, [sp, #20]
 8009d3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e24 <_vfiprintf_r+0x25c>
 8009d42:	7821      	ldrb	r1, [r4, #0]
 8009d44:	2203      	movs	r2, #3
 8009d46:	4650      	mov	r0, sl
 8009d48:	f7f6 fa72 	bl	8000230 <memchr>
 8009d4c:	b140      	cbz	r0, 8009d60 <_vfiprintf_r+0x198>
 8009d4e:	2340      	movs	r3, #64	; 0x40
 8009d50:	eba0 000a 	sub.w	r0, r0, sl
 8009d54:	fa03 f000 	lsl.w	r0, r3, r0
 8009d58:	9b04      	ldr	r3, [sp, #16]
 8009d5a:	4303      	orrs	r3, r0
 8009d5c:	3401      	adds	r4, #1
 8009d5e:	9304      	str	r3, [sp, #16]
 8009d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d64:	482c      	ldr	r0, [pc, #176]	; (8009e18 <_vfiprintf_r+0x250>)
 8009d66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d6a:	2206      	movs	r2, #6
 8009d6c:	f7f6 fa60 	bl	8000230 <memchr>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	d03f      	beq.n	8009df4 <_vfiprintf_r+0x22c>
 8009d74:	4b29      	ldr	r3, [pc, #164]	; (8009e1c <_vfiprintf_r+0x254>)
 8009d76:	bb1b      	cbnz	r3, 8009dc0 <_vfiprintf_r+0x1f8>
 8009d78:	9b03      	ldr	r3, [sp, #12]
 8009d7a:	3307      	adds	r3, #7
 8009d7c:	f023 0307 	bic.w	r3, r3, #7
 8009d80:	3308      	adds	r3, #8
 8009d82:	9303      	str	r3, [sp, #12]
 8009d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d86:	443b      	add	r3, r7
 8009d88:	9309      	str	r3, [sp, #36]	; 0x24
 8009d8a:	e767      	b.n	8009c5c <_vfiprintf_r+0x94>
 8009d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d90:	460c      	mov	r4, r1
 8009d92:	2001      	movs	r0, #1
 8009d94:	e7a5      	b.n	8009ce2 <_vfiprintf_r+0x11a>
 8009d96:	2300      	movs	r3, #0
 8009d98:	3401      	adds	r4, #1
 8009d9a:	9305      	str	r3, [sp, #20]
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	f04f 0c0a 	mov.w	ip, #10
 8009da2:	4620      	mov	r0, r4
 8009da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009da8:	3a30      	subs	r2, #48	; 0x30
 8009daa:	2a09      	cmp	r2, #9
 8009dac:	d903      	bls.n	8009db6 <_vfiprintf_r+0x1ee>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0c5      	beq.n	8009d3e <_vfiprintf_r+0x176>
 8009db2:	9105      	str	r1, [sp, #20]
 8009db4:	e7c3      	b.n	8009d3e <_vfiprintf_r+0x176>
 8009db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dba:	4604      	mov	r4, r0
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e7f0      	b.n	8009da2 <_vfiprintf_r+0x1da>
 8009dc0:	ab03      	add	r3, sp, #12
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	462a      	mov	r2, r5
 8009dc6:	4b16      	ldr	r3, [pc, #88]	; (8009e20 <_vfiprintf_r+0x258>)
 8009dc8:	a904      	add	r1, sp, #16
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7fd fd5a 	bl	8007884 <_printf_float>
 8009dd0:	4607      	mov	r7, r0
 8009dd2:	1c78      	adds	r0, r7, #1
 8009dd4:	d1d6      	bne.n	8009d84 <_vfiprintf_r+0x1bc>
 8009dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dd8:	07d9      	lsls	r1, r3, #31
 8009dda:	d405      	bmi.n	8009de8 <_vfiprintf_r+0x220>
 8009ddc:	89ab      	ldrh	r3, [r5, #12]
 8009dde:	059a      	lsls	r2, r3, #22
 8009de0:	d402      	bmi.n	8009de8 <_vfiprintf_r+0x220>
 8009de2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009de4:	f7ff fa0e 	bl	8009204 <__retarget_lock_release_recursive>
 8009de8:	89ab      	ldrh	r3, [r5, #12]
 8009dea:	065b      	lsls	r3, r3, #25
 8009dec:	f53f af12 	bmi.w	8009c14 <_vfiprintf_r+0x4c>
 8009df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009df2:	e711      	b.n	8009c18 <_vfiprintf_r+0x50>
 8009df4:	ab03      	add	r3, sp, #12
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	462a      	mov	r2, r5
 8009dfa:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <_vfiprintf_r+0x258>)
 8009dfc:	a904      	add	r1, sp, #16
 8009dfe:	4630      	mov	r0, r6
 8009e00:	f7fd ffe4 	bl	8007dcc <_printf_i>
 8009e04:	e7e4      	b.n	8009dd0 <_vfiprintf_r+0x208>
 8009e06:	bf00      	nop
 8009e08:	0800a3e0 	.word	0x0800a3e0
 8009e0c:	0800a400 	.word	0x0800a400
 8009e10:	0800a3c0 	.word	0x0800a3c0
 8009e14:	0800a58c 	.word	0x0800a58c
 8009e18:	0800a596 	.word	0x0800a596
 8009e1c:	08007885 	.word	0x08007885
 8009e20:	08009ba3 	.word	0x08009ba3
 8009e24:	0800a592 	.word	0x0800a592

08009e28 <_sbrk_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4d06      	ldr	r5, [pc, #24]	; (8009e44 <_sbrk_r+0x1c>)
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	4604      	mov	r4, r0
 8009e30:	4608      	mov	r0, r1
 8009e32:	602b      	str	r3, [r5, #0]
 8009e34:	f000 f980 	bl	800a138 <_sbrk>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d102      	bne.n	8009e42 <_sbrk_r+0x1a>
 8009e3c:	682b      	ldr	r3, [r5, #0]
 8009e3e:	b103      	cbz	r3, 8009e42 <_sbrk_r+0x1a>
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	20001434 	.word	0x20001434

08009e48 <__sread>:
 8009e48:	b510      	push	{r4, lr}
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e50:	f000 f8dc 	bl	800a00c <_read_r>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	bfab      	itete	ge
 8009e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e5c:	181b      	addge	r3, r3, r0
 8009e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e62:	bfac      	ite	ge
 8009e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e66:	81a3      	strhlt	r3, [r4, #12]
 8009e68:	bd10      	pop	{r4, pc}

08009e6a <__swrite>:
 8009e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6e:	461f      	mov	r7, r3
 8009e70:	898b      	ldrh	r3, [r1, #12]
 8009e72:	05db      	lsls	r3, r3, #23
 8009e74:	4605      	mov	r5, r0
 8009e76:	460c      	mov	r4, r1
 8009e78:	4616      	mov	r6, r2
 8009e7a:	d505      	bpl.n	8009e88 <__swrite+0x1e>
 8009e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e80:	2302      	movs	r3, #2
 8009e82:	2200      	movs	r2, #0
 8009e84:	f000 f8a4 	bl	8009fd0 <_lseek_r>
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e92:	81a3      	strh	r3, [r4, #12]
 8009e94:	4632      	mov	r2, r6
 8009e96:	463b      	mov	r3, r7
 8009e98:	4628      	mov	r0, r5
 8009e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9e:	f000 b823 	b.w	8009ee8 <_write_r>

08009ea2 <__sseek>:
 8009ea2:	b510      	push	{r4, lr}
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eaa:	f000 f891 	bl	8009fd0 <_lseek_r>
 8009eae:	1c43      	adds	r3, r0, #1
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	bf15      	itete	ne
 8009eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ebe:	81a3      	strheq	r3, [r4, #12]
 8009ec0:	bf18      	it	ne
 8009ec2:	81a3      	strhne	r3, [r4, #12]
 8009ec4:	bd10      	pop	{r4, pc}

08009ec6 <__sclose>:
 8009ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eca:	f000 b83d 	b.w	8009f48 <_close_r>

08009ece <__ascii_wctomb>:
 8009ece:	b149      	cbz	r1, 8009ee4 <__ascii_wctomb+0x16>
 8009ed0:	2aff      	cmp	r2, #255	; 0xff
 8009ed2:	bf85      	ittet	hi
 8009ed4:	238a      	movhi	r3, #138	; 0x8a
 8009ed6:	6003      	strhi	r3, [r0, #0]
 8009ed8:	700a      	strbls	r2, [r1, #0]
 8009eda:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009ede:	bf98      	it	ls
 8009ee0:	2001      	movls	r0, #1
 8009ee2:	4770      	bx	lr
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	4770      	bx	lr

08009ee8 <_write_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d07      	ldr	r5, [pc, #28]	; (8009f08 <_write_r+0x20>)
 8009eec:	4604      	mov	r4, r0
 8009eee:	4608      	mov	r0, r1
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	602a      	str	r2, [r5, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f000 f92c 	bl	800a154 <_write>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	d102      	bne.n	8009f06 <_write_r+0x1e>
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	b103      	cbz	r3, 8009f06 <_write_r+0x1e>
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	20001434 	.word	0x20001434

08009f0c <__assert_func>:
 8009f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f0e:	4614      	mov	r4, r2
 8009f10:	461a      	mov	r2, r3
 8009f12:	4b09      	ldr	r3, [pc, #36]	; (8009f38 <__assert_func+0x2c>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4605      	mov	r5, r0
 8009f18:	68d8      	ldr	r0, [r3, #12]
 8009f1a:	b14c      	cbz	r4, 8009f30 <__assert_func+0x24>
 8009f1c:	4b07      	ldr	r3, [pc, #28]	; (8009f3c <__assert_func+0x30>)
 8009f1e:	9100      	str	r1, [sp, #0]
 8009f20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f24:	4906      	ldr	r1, [pc, #24]	; (8009f40 <__assert_func+0x34>)
 8009f26:	462b      	mov	r3, r5
 8009f28:	f000 f81e 	bl	8009f68 <fiprintf>
 8009f2c:	f000 f880 	bl	800a030 <abort>
 8009f30:	4b04      	ldr	r3, [pc, #16]	; (8009f44 <__assert_func+0x38>)
 8009f32:	461c      	mov	r4, r3
 8009f34:	e7f3      	b.n	8009f1e <__assert_func+0x12>
 8009f36:	bf00      	nop
 8009f38:	20000010 	.word	0x20000010
 8009f3c:	0800a59d 	.word	0x0800a59d
 8009f40:	0800a5aa 	.word	0x0800a5aa
 8009f44:	0800a5d8 	.word	0x0800a5d8

08009f48 <_close_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d06      	ldr	r5, [pc, #24]	; (8009f64 <_close_r+0x1c>)
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4608      	mov	r0, r1
 8009f52:	602b      	str	r3, [r5, #0]
 8009f54:	f000 f8b8 	bl	800a0c8 <_close>
 8009f58:	1c43      	adds	r3, r0, #1
 8009f5a:	d102      	bne.n	8009f62 <_close_r+0x1a>
 8009f5c:	682b      	ldr	r3, [r5, #0]
 8009f5e:	b103      	cbz	r3, 8009f62 <_close_r+0x1a>
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	bd38      	pop	{r3, r4, r5, pc}
 8009f64:	20001434 	.word	0x20001434

08009f68 <fiprintf>:
 8009f68:	b40e      	push	{r1, r2, r3}
 8009f6a:	b503      	push	{r0, r1, lr}
 8009f6c:	4601      	mov	r1, r0
 8009f6e:	ab03      	add	r3, sp, #12
 8009f70:	4805      	ldr	r0, [pc, #20]	; (8009f88 <fiprintf+0x20>)
 8009f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f76:	6800      	ldr	r0, [r0, #0]
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	f7ff fe25 	bl	8009bc8 <_vfiprintf_r>
 8009f7e:	b002      	add	sp, #8
 8009f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f84:	b003      	add	sp, #12
 8009f86:	4770      	bx	lr
 8009f88:	20000010 	.word	0x20000010

08009f8c <_fstat_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4d07      	ldr	r5, [pc, #28]	; (8009fac <_fstat_r+0x20>)
 8009f90:	2300      	movs	r3, #0
 8009f92:	4604      	mov	r4, r0
 8009f94:	4608      	mov	r0, r1
 8009f96:	4611      	mov	r1, r2
 8009f98:	602b      	str	r3, [r5, #0]
 8009f9a:	f000 f89d 	bl	800a0d8 <_fstat>
 8009f9e:	1c43      	adds	r3, r0, #1
 8009fa0:	d102      	bne.n	8009fa8 <_fstat_r+0x1c>
 8009fa2:	682b      	ldr	r3, [r5, #0]
 8009fa4:	b103      	cbz	r3, 8009fa8 <_fstat_r+0x1c>
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	bd38      	pop	{r3, r4, r5, pc}
 8009faa:	bf00      	nop
 8009fac:	20001434 	.word	0x20001434

08009fb0 <_isatty_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	4d06      	ldr	r5, [pc, #24]	; (8009fcc <_isatty_r+0x1c>)
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	4608      	mov	r0, r1
 8009fba:	602b      	str	r3, [r5, #0]
 8009fbc:	f000 f89c 	bl	800a0f8 <_isatty>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d102      	bne.n	8009fca <_isatty_r+0x1a>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b103      	cbz	r3, 8009fca <_isatty_r+0x1a>
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	20001434 	.word	0x20001434

08009fd0 <_lseek_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4d07      	ldr	r5, [pc, #28]	; (8009ff0 <_lseek_r+0x20>)
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	4608      	mov	r0, r1
 8009fd8:	4611      	mov	r1, r2
 8009fda:	2200      	movs	r2, #0
 8009fdc:	602a      	str	r2, [r5, #0]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f000 f89a 	bl	800a118 <_lseek>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	d102      	bne.n	8009fee <_lseek_r+0x1e>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	b103      	cbz	r3, 8009fee <_lseek_r+0x1e>
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	bd38      	pop	{r3, r4, r5, pc}
 8009ff0:	20001434 	.word	0x20001434

08009ff4 <__malloc_lock>:
 8009ff4:	4801      	ldr	r0, [pc, #4]	; (8009ffc <__malloc_lock+0x8>)
 8009ff6:	f7ff b904 	b.w	8009202 <__retarget_lock_acquire_recursive>
 8009ffa:	bf00      	nop
 8009ffc:	2000142c 	.word	0x2000142c

0800a000 <__malloc_unlock>:
 800a000:	4801      	ldr	r0, [pc, #4]	; (800a008 <__malloc_unlock+0x8>)
 800a002:	f7ff b8ff 	b.w	8009204 <__retarget_lock_release_recursive>
 800a006:	bf00      	nop
 800a008:	2000142c 	.word	0x2000142c

0800a00c <_read_r>:
 800a00c:	b538      	push	{r3, r4, r5, lr}
 800a00e:	4d07      	ldr	r5, [pc, #28]	; (800a02c <_read_r+0x20>)
 800a010:	4604      	mov	r4, r0
 800a012:	4608      	mov	r0, r1
 800a014:	4611      	mov	r1, r2
 800a016:	2200      	movs	r2, #0
 800a018:	602a      	str	r2, [r5, #0]
 800a01a:	461a      	mov	r2, r3
 800a01c:	f000 f884 	bl	800a128 <_read>
 800a020:	1c43      	adds	r3, r0, #1
 800a022:	d102      	bne.n	800a02a <_read_r+0x1e>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	b103      	cbz	r3, 800a02a <_read_r+0x1e>
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	bd38      	pop	{r3, r4, r5, pc}
 800a02c:	20001434 	.word	0x20001434

0800a030 <abort>:
 800a030:	b508      	push	{r3, lr}
 800a032:	2006      	movs	r0, #6
 800a034:	f000 f82c 	bl	800a090 <raise>
 800a038:	2001      	movs	r0, #1
 800a03a:	f000 f893 	bl	800a164 <_exit>

0800a03e <_raise_r>:
 800a03e:	291f      	cmp	r1, #31
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	4604      	mov	r4, r0
 800a044:	460d      	mov	r5, r1
 800a046:	d904      	bls.n	800a052 <_raise_r+0x14>
 800a048:	2316      	movs	r3, #22
 800a04a:	6003      	str	r3, [r0, #0]
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a050:	bd38      	pop	{r3, r4, r5, pc}
 800a052:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a054:	b112      	cbz	r2, 800a05c <_raise_r+0x1e>
 800a056:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a05a:	b94b      	cbnz	r3, 800a070 <_raise_r+0x32>
 800a05c:	4620      	mov	r0, r4
 800a05e:	f000 f831 	bl	800a0c4 <_getpid_r>
 800a062:	462a      	mov	r2, r5
 800a064:	4601      	mov	r1, r0
 800a066:	4620      	mov	r0, r4
 800a068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a06c:	f000 b818 	b.w	800a0a0 <_kill_r>
 800a070:	2b01      	cmp	r3, #1
 800a072:	d00a      	beq.n	800a08a <_raise_r+0x4c>
 800a074:	1c59      	adds	r1, r3, #1
 800a076:	d103      	bne.n	800a080 <_raise_r+0x42>
 800a078:	2316      	movs	r3, #22
 800a07a:	6003      	str	r3, [r0, #0]
 800a07c:	2001      	movs	r0, #1
 800a07e:	e7e7      	b.n	800a050 <_raise_r+0x12>
 800a080:	2400      	movs	r4, #0
 800a082:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a086:	4628      	mov	r0, r5
 800a088:	4798      	blx	r3
 800a08a:	2000      	movs	r0, #0
 800a08c:	e7e0      	b.n	800a050 <_raise_r+0x12>
	...

0800a090 <raise>:
 800a090:	4b02      	ldr	r3, [pc, #8]	; (800a09c <raise+0xc>)
 800a092:	4601      	mov	r1, r0
 800a094:	6818      	ldr	r0, [r3, #0]
 800a096:	f7ff bfd2 	b.w	800a03e <_raise_r>
 800a09a:	bf00      	nop
 800a09c:	20000010 	.word	0x20000010

0800a0a0 <_kill_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4d07      	ldr	r5, [pc, #28]	; (800a0c0 <_kill_r+0x20>)
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	602b      	str	r3, [r5, #0]
 800a0ae:	f000 f82b 	bl	800a108 <_kill>
 800a0b2:	1c43      	adds	r3, r0, #1
 800a0b4:	d102      	bne.n	800a0bc <_kill_r+0x1c>
 800a0b6:	682b      	ldr	r3, [r5, #0]
 800a0b8:	b103      	cbz	r3, 800a0bc <_kill_r+0x1c>
 800a0ba:	6023      	str	r3, [r4, #0]
 800a0bc:	bd38      	pop	{r3, r4, r5, pc}
 800a0be:	bf00      	nop
 800a0c0:	20001434 	.word	0x20001434

0800a0c4 <_getpid_r>:
 800a0c4:	f000 b810 	b.w	800a0e8 <_getpid>

0800a0c8 <_close>:
 800a0c8:	4b02      	ldr	r3, [pc, #8]	; (800a0d4 <_close+0xc>)
 800a0ca:	2258      	movs	r2, #88	; 0x58
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0d2:	4770      	bx	lr
 800a0d4:	20001434 	.word	0x20001434

0800a0d8 <_fstat>:
 800a0d8:	4b02      	ldr	r3, [pc, #8]	; (800a0e4 <_fstat+0xc>)
 800a0da:	2258      	movs	r2, #88	; 0x58
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0e2:	4770      	bx	lr
 800a0e4:	20001434 	.word	0x20001434

0800a0e8 <_getpid>:
 800a0e8:	4b02      	ldr	r3, [pc, #8]	; (800a0f4 <_getpid+0xc>)
 800a0ea:	2258      	movs	r2, #88	; 0x58
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0f2:	4770      	bx	lr
 800a0f4:	20001434 	.word	0x20001434

0800a0f8 <_isatty>:
 800a0f8:	4b02      	ldr	r3, [pc, #8]	; (800a104 <_isatty+0xc>)
 800a0fa:	2258      	movs	r2, #88	; 0x58
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	2000      	movs	r0, #0
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	20001434 	.word	0x20001434

0800a108 <_kill>:
 800a108:	4b02      	ldr	r3, [pc, #8]	; (800a114 <_kill+0xc>)
 800a10a:	2258      	movs	r2, #88	; 0x58
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a112:	4770      	bx	lr
 800a114:	20001434 	.word	0x20001434

0800a118 <_lseek>:
 800a118:	4b02      	ldr	r3, [pc, #8]	; (800a124 <_lseek+0xc>)
 800a11a:	2258      	movs	r2, #88	; 0x58
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a122:	4770      	bx	lr
 800a124:	20001434 	.word	0x20001434

0800a128 <_read>:
 800a128:	4b02      	ldr	r3, [pc, #8]	; (800a134 <_read+0xc>)
 800a12a:	2258      	movs	r2, #88	; 0x58
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a132:	4770      	bx	lr
 800a134:	20001434 	.word	0x20001434

0800a138 <_sbrk>:
 800a138:	4b04      	ldr	r3, [pc, #16]	; (800a14c <_sbrk+0x14>)
 800a13a:	6819      	ldr	r1, [r3, #0]
 800a13c:	4602      	mov	r2, r0
 800a13e:	b909      	cbnz	r1, 800a144 <_sbrk+0xc>
 800a140:	4903      	ldr	r1, [pc, #12]	; (800a150 <_sbrk+0x18>)
 800a142:	6019      	str	r1, [r3, #0]
 800a144:	6818      	ldr	r0, [r3, #0]
 800a146:	4402      	add	r2, r0
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	4770      	bx	lr
 800a14c:	20000208 	.word	0x20000208
 800a150:	20001438 	.word	0x20001438

0800a154 <_write>:
 800a154:	4b02      	ldr	r3, [pc, #8]	; (800a160 <_write+0xc>)
 800a156:	2258      	movs	r2, #88	; 0x58
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a15e:	4770      	bx	lr
 800a160:	20001434 	.word	0x20001434

0800a164 <_exit>:
 800a164:	e7fe      	b.n	800a164 <_exit>
	...

0800a168 <_init>:
 800a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16a:	bf00      	nop
 800a16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16e:	bc08      	pop	{r3}
 800a170:	469e      	mov	lr, r3
 800a172:	4770      	bx	lr

0800a174 <_fini>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	bf00      	nop
 800a178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17a:	bc08      	pop	{r3}
 800a17c:	469e      	mov	lr, r3
 800a17e:	4770      	bx	lr
